
/home/pchizek/dev/press-reg/bin/targets/arduino_boot/app/apps/boot/boot.elf:     file format elf32-littlearm
/home/pchizek/dev/press-reg/bin/targets/arduino_boot/app/apps/boot/boot.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000b9

Program Header:
0x70000001 off    0x00013ad0 vaddr 0x00003ad0 paddr 0x00003ad0 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00003ae8 memsz 0x00003ae8 flags r-x
    LOAD off    0x000200b4 vaddr 0x200000b4 paddr 0x00003ae8 align 2**16
         filesz 0x00000048 memsz 0x00001498 flags rw-
    LOAD off    0x0002154c vaddr 0x2000154c paddr 0x00003b30 align 2**16
         filesz 0x00000000 memsz 0x00000200 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000b4 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .text         00003ad0  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000018  00003ad0  00003ad0  00013ad0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .vector_relocation 000000b4  20000000  20000000  00030000  2**0  ALLOC
  3 .relocate     00000048  200000b4  00003ae8  000200b4  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00001450  200000fc  00003b30  000200fc  2**2  ALLOC
  5 .heap         00000200  2000154c  00003b30  0002154c  2**0  ALLOC
  6 .stack_dummy  00000400  2000174c  2000174c  000200fc  2**0  CONTENTS
  7 .debug_info   000311e0  00000000  00000000  000204fc  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007469  00000000  00000000  000516dc  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ac5d  00000000  00000000  00058b45  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e20  00000000  00000000  000637a8  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001408  00000000  00000000  000645c8  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c622  00000000  00000000  000659d0  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000ac1c  00000000  00000000  00071ff2  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000021  00000000  00000000  0007cc0e  2**0  CONTENTS, READONLY
 15 .ARM.attributes 0000002f  00000000  00000000  0007cc2f  2**0  CONTENTS, READONLY
 16 .svc_table    00000004  00000000  00000000  0007cc5e  2**0  CONTENTS, READONLY
 17 .debug_frame  00001f6c  00000000  00000000  0007cc64  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00003ad0 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000b4 l    d  .relocate	00000000 .relocate
200000fc l    d  .bss	00000000 .bss
2000154c l    d  .heap	00000000 .heap
2000174c l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup_samd21.c
00000000 l    df *ABS*	00000000 system_samd21.c
00000000 l    df *ABS*	00000000 gclk.c
00000180 l     F .text	0000000c system_gclk_is_syncing
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 interrupt_sam_nvic.c
200000fc l     O .bss	00000004 cpu_irq_critical_section_counter
20000100 l     O .bss	00000001 cpu_irq_prev_interrupt_state
00000000 l    df *ABS*	00000000 clock.c
0000041c l     F .text	00000010 _system_dfll_wait_for_sync
20000104 l     O .bss	00000018 _system_clock_inst
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 boot.c
00000000 l    df *ABS*	00000000 loader.c
0000062c l     F .text	00000050 boot_read_image_headers
0000067c l     F .text	00000080 boot_copy_sector
2000017c l     O .bss	00000400 buf.4746
000006fc l     F .text	0000002e boot_erase_sector
0000072a l     F .text	00000056 boot_finalize_revert_swap
000007f8 l     F .text	0000010c boot_copy_image
2000057c l     O .bss	000005a0 slot0_sectors.4796
20000b1c l     O .bss	000005a0 slot1_sectors.4797
2000011c l     O .bss	00000060 boot_data
200010bc l     O .bss	00000004 tmpbuf.4697
00003848 l     O .text	00000010 boot_status_tables
00003858 l     O .text	00000006 boot_swap_trans_table
00000000 l    df *ABS*	00000000 bootutil_misc.c
00000c1c l     F .text	00000022 boot_magic_off
00003870 l     O .text	00000019 boot_swap_tables
00000000 l    df *ABS*	00000000 image_validate.c
00000000 l    df *ABS*	00000000 sha256.c
0000388c l     O .text	00000100 K
000010fc l     F .text	0000007a mbedtls_sha256_update.part.0
0000398c l     O .text	00000040 sha256_padding
00000000 l    df *ABS*	00000000 hal_bsp.c
200010c0 l     O .bss	00000034 hal_uart0
000039d4 l     O .text	00000020 uart_cfgs
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 uart_hal.c
0000135c l     F .text	0000000c uart_hal_blocking_tx
00001368 l     F .text	0000000c uart_hal_start_rx
00001374 l     F .text	00000012 uart_hal_close
00001386 l     F .text	00000040 uart_hal_open
000013c6 l     F .text	0000001a uart_hal_start_tx
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
00001456 l     F .text	00000016 hal_flash_check_addr
00000000 l    df *ABS*	00000000 hal_flash.c
000015ac l     F .text	0000005c samd21_flash_init
00001608 l     F .text	00000030 samd21_flash_sector_info
00001638 l     F .text	0000002c samd21_flash_erase_sector
00001664 l     F .text	0000008e samd21_flash_write
000016f2 l     F .text	00000072 samd21_flash_read
000039f4 l     O .text	00000014 samd21_flash_funcs
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 hal_timer.c
000017b4 l     F .text	00000050 samd21_timer_set_ocmp
00001804 l     F .text	00000054 hal_timer_read_bsptimer
00003a08 l     O .text	00000018 CSWTCH.32
00003a20 l     O .text	0000000c samd21_hal_timers
00000000 l    df *ABS*	00000000 hal_uart.c
00001adc l     F .text	00000020 fill_tx_buf
00001afc l     F .text	00000028 usart_callback_rx
00001b24 l     F .text	0000003c usart_callback_txdone
200010f4 l     O .bss	000001f8 uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 nvm.c
00001e4c l     F .text	00000010 nvm_is_ready
200012ec l     O .bss	00000006 _nvm_dev
00000000 l    df *ABS*	00000000 sercom_interrupt.c
00002130 l     F .text	00000002 _sercom_default_handler
200012f2 l     O .bss	00000001 _handler_table_initialized
200012f4 l     O .bss	00000018 _sercom_interrupt_handlers
00000000 l    df *ABS*	00000000 usart.c
00002238 l     F .text	0000000a _usart_wait_for_sync
00000000 l    df *ABS*	00000000 usart_interrupt.c
00000000 l    df *ABS*	00000000 pinmux.c
00002724 l     F .text	00000084 _system_pinmux_config
00000000 l    df *ABS*	00000000 tc.c
00000000 l    df *ABS*	00000000 wdt.c
00000000 l    df *ABS*	00000000 sercom.c
2000130c l     O .bss	00000002 _sercom_config
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00002df8 l     F .text	00000020 os_dev_initialize
20001310 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_heap.c
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 HAL_CM0.S
00002f12 l       .text	00000000 SVC_User
00002f30 l       .text	00000000 SVC_Done
00002f40 l       .text	00000000 context_switch
00003a44 l       .text	00000000 file_name
00002f92 l       .text	00000000 using_msp_as_sp
00000000 l    df *ABS*	00000000 malloc.c
00002fd0 l     F .text	00000004 malloc_lock_nop
00002fd4 l     F .text	00000002 malloc_unlock_nop
00002fd8 l     F .text	00000060 __free_block
200000d4 l     O .relocate	00000018 __malloc_head
200000ec l     O .relocate	00000004 malloc_lock
200000f0 l     O .relocate	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 flash_map.c
2000131c l     O .bss	00000078 mfg_areas.11176
00000000 l    df *ABS*	00000000 mfg.c
00000000 l    df *ABS*	00000000 sysinit.c
000034b0 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 sbrk.c
200000f8 l     O .relocate	00000004 _brk
00000000 l    df *ABS*	00000000 _thumb1_case_uqi.o
00000000 l    df *ABS*	00000000 _udivsi3.o
000034f4 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
00003608 l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _ashldi3.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 arduino_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000032be g     F .text	0000001e flash_area_id_from_image_slot
2000154c g       .bss	00000000 __HeapBase
00000ca4 g     F .text	00000026 boot_read_swap_state_scratch
000037dc g     F .text	00000018 .hidden __ashldi3
00001f80 g     F .text	00000098 nvm_write_buffer
00000000 g       .svc_table	00000000 SVC_Count
000003ec g     F .text	00000030 cpu_irq_leave_critical
00000c48 g     F .text	0000005c boot_read_swap_state
00000904 g     F .text	000002d8 boot_go
00003038 g     F .text	00000050 add_malloc_block
0000257a g     F .text	00000018 usart_register_callback
00000400 g       *ABS*	00000000 STACK_SIZE
00001348 g     F .text	00000014 NVIC_SetVector
000000b4  w    F .text	00000002 DMAC_Handler
000000b4  w    F .text	00000002 HardFault_Handler
000018d8 g     F .text	000000ec hal_timer_init
0000179c g     F .text	00000016 hal_system_start
00002ab4 g     F .text	00000140 _sercom_get_async_baud_val
00001496 g     F .text	00000014 hal_flash_align
00000200 g       *ABS*	00000000 _Min_Stack_Size
000000b4  w    F .text	00000002 AC_Handler
00002f70 g     F .text	00000008 SysTick_Handler
20001538 g     O .bss	00000004 flash_map
00002f32 g     F .text	0000003e PendSV_Handler
000000b4  w    F .text	00000002 NMI_Handler
00000efa g     F .text	0000000c mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
000003aa g     F .text	0000000c system_init
00001764 g     F .text	00000028 hal_system_reset
000013e0 g     F .text	00000070 uart_hal_init
00000000 g       .text	00000000 _sfixed
200000d4 g       .relocate	00000000 __aeabi_unwind_cpp_pr0
00002144 g     F .text	00000010 SERCOM1_Handler
00003274 g     F .text	00000020 flash_area_write
000000b4  w    F .text	00000002 ADC_Handler
00003ae8 g       .vector_relocation	00000000 _etext
00000d80 g     F .text	0000007c boot_swap_type
200000fc g       .bss	00000000 _sbss
000033fc g     F .text	00000044 mfg_read_tlv_flash_area
00001184 g     F .text	0000010c mbedtls_sha256_finish
200000fc g       .bss	00000000 _szero
000000b4  w    F .text	00000002 TCC1_Handler
00002ea4 g     F .text	0000000a timer_handler
00003162 g     F .text	00000012 memcpy
200000b4 g       .relocate	00000000 _srelocate
00002dec g     F .text	0000000c os_cputime_init
00002194 g     F .text	00000020 _sercom_get_interrupt_vector
00002154 g     F .text	00000010 SERCOM2_Handler
00000000 g       *ABS*	00000000 _imghdr_size
00003ad0 g       .text	00000000 __fini_array_end
20001394 g     O .bss	00000004 SystemCoreClock
000000b4  w    F .text	00000002 TCC0_Handler
00000368 g     F .text	00000018 system_gclk_chan_set_config
00003088 g     F .text	00000098 malloc
00003254 g     F .text	00000020 flash_area_read
000034f4 g     F .text	0000010a .hidden __udivsi3
00002dbc g     F .text	00000020 __assert_func
000000b4  w    F .text	00000002 RTC_Handler
20007c00 g       *ABS*	00000000 _user_heap_end
000000b4  w    F .text	00000002 Unhandled_Handler
00002e94 g     F .text	00000008 os_malloc
20007c00 g       *ABS*	00000000 __HeapLimit
200000fc g       .bss	00000000 __bss_start__
0000178c g     F .text	00000010 hal_debugger_connected
000014e6 g     F .text	0000003c hal_flash_write
000003a8  w    F .text	00000002 _system_divas_init
000003b8 g     F .text	00000034 cpu_irq_enter_critical
00002080 g     F .text	00000054 nvm_erase_row
00000f08 g     F .text	00000090 mbedtls_sha256_starts
00000280 g     F .text	00000070 system_gclk_gen_get_hz
00001176 g     F .text	0000000c mbedtls_sha256_update
2000152c g     O .bss	00000004 g_current_task
000034e0 g     F .text	00000012 .hidden __gnu_thumb1_case_uqi
00002eae g     F .text	0000000c os_arch_save_sr
00001de4 g     F .text	00000044 hal_uart_close
00000cf4 g     F .text	00000020 boot_write_magic
000000b4  w    F .text	00000002 EIC_Handler
200000b4 g     O .relocate	00000001 g_interrupt_enabled
000024fa g     F .text	00000038 _usart_write_buffer
000000b4  w    F .text	00000002 WDT_Handler
00001c04 g     F .text	00000034 hal_uart_blocking_tx
000001ac g     F .text	0000009c system_gclk_gen_set_config
00002ecc g     F .text	00000014 os_set_env
000037f4 g     F .text	00000054 .hidden __aeabi_lmul
00001290 g     F .text	00000010 hal_bsp_flash_dev
000005fe g     F .text	00000002 __libc_init_array
000032b4 g     F .text	0000000a flash_area_align
00002e9c g     F .text	00000008 os_free
000034b8 g     F .text	00000028 _sbrk
00002532 g     F .text	00000048 _usart_read_buffer
00002a8c g     F .text	00000028 _sercom_get_sync_baud_val
000000b4  w    F .text	00000002 TC4_Handler
00001522 g     F .text	0000008a hal_flash_erase
000004b0 g     F .text	0000003c system_clock_source_osc8m_set_config
00000780 g     F .text	00000078 boot_write_status
000027d0 g     F .text	00000030 _tc_get_inst_index
2000154c g       .bss	00000000 _ebss
000000b8 g     F .text	000000a4 Reset_Handler
000000b4  w    F .text	00000002 USB_Handler
00002018 g     F .text	00000068 nvm_read_buffer
000000b4  w    F .text	00000002 TC3_Handler
00002f82 g     F .text	00000032 os_default_irq_asm
000000b4 g     F .text	00000002 Dummy_Handler
00003440 g     F .text	00000070 mfg_init
200013bc g     O .bss	00000018 _sercom_instances
000032dc g     F .text	00000098 flash_map_init
20000000 g       .heap	00000000 _ram_start
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00003608 g     F .text	00000000 .hidden __aeabi_idiv
000021b4 g     F .text	00000084 _sercom_set_handler
000033e0 g     F .text	0000001c mfg_next_tlv_with_type
200000b8 g     O .relocate	00000014 samd21_flash_dev
000003a8  w    F .text	00000002 _system_extint_init
20001534 g     O .bss	00000004 g_os_time
00001b60 g     F .text	00000030 hal_uart_init_cbs
00001e44 g     F .text	00000008 hal_watchdog_tickle
2000154c g       .bss	00000000 __bss_end__
00000200 g       *ABS*	00000000 _Min_Heap_Size
000005f0 g     F .text	0000000e _start
00000d14 g     F .text	00000036 boot_write_copy_done
000024d0 g     F .text	0000002a usart_write_wait
000000b4  w    F .text	00000002 PM_Handler
00002184 g     F .text	00000010 SERCOM5_Handler
00002ee0 g     F .text	00000012 os_arch_init_task_stack
000020d4 g     F .text	0000005c nvm_get_parameters
00003860 g     O .text	00000010 boot_img_magic
00000380 g     F .text	00000028 system_gclk_chan_get_hz
200013d4 g     O .bss	00000050 g_idle_task
200000f4 g     O .relocate	00000004 sysinit_panic_cb
00001bb8 g     F .text	0000004c hal_uart_start_tx
00002ddc g     F .text	00000010 os_default_irq
000003a8  w    F .text	00000002 system_board_init
20001530 g     O .bss	00000004 g_os_last_ctx_sw_time
00000cca g     F .text	0000002a boot_read_swap_state_img
00003148 g     F .text	0000001a memcmp
00000248 g     F .text	00000038 system_gclk_gen_enable
00002f78 g       .text	00000000 __aeabi_ldiv0
000019c4 g     F .text	00000118 hal_timer_config
00003ad0 g       .text	00000000 __fini_array_start
20001424 g     O .bss	00000004 g_os_idle_ctr
00003194 g     F .text	00000040 flash_area_open
00002244 g     F .text	0000028c usart_init
00003174 g     F .text	00000010 memset
00000000 g     O .text	000000b4 __isr_vector
00000600 g     F .text	0000002c main
000034f4 g     F .text	00000000 .hidden __aeabi_uidiv
00002ef2 g     F .text	00000040 SVC_Handler
000000b4  w    F .text	00000002 TCC2_Handler
000000b4  w    F .text	00000002 EVSYS_Handler
00003ad0 g       .text	00000000 __init_array_end
000014aa g     F .text	0000003c hal_flash_read
2000154c g       .bss	00000000 _ezero
00002164 g     F .text	00000010 SERCOM3_Handler
000031d4 g     F .text	00000002 flash_area_close
00003294 g     F .text	00000020 flash_area_erase
00002174 g     F .text	00000010 SERCOM4_Handler
000000b4  w    F .text	00000002 I2S_Handler
00003608 g     F .text	000001cc .hidden __divsi3
00000f98 g     F .text	00000164 mbedtls_sha256_process
2000153c g     O .bss	00000004 flash_map_entries
00002bf4 g     F .text	0000003c sercom_set_gclk_generator
000002f0 g     F .text	00000028 system_gclk_chan_enable
00000c3e g     F .text	0000000a boot_status_off
000000b4  w    F .text	00000002 NVMCTRL_Handler
0000015c g     F .text	00000024 SystemInit
00003ad0 g       .text	00000000 _efixed
000025b8 g     F .text	0000016c _usart_interrupt_handler
00001edc g     F .text	000000a4 nvm_execute_command
00001b90 g     F .text	00000028 hal_uart_start_rx
00000dfc g     F .text	000000fe bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
00002134 g     F .text	00000010 SERCOM0_Handler
20008000 g       .heap	00000000 __StackTop
000003a8  w    F .text	00000002 _system_events_init
00000578 g     F .text	00000078 system_clock_init
20001540 g     O .bss	0000000c mfg_state
00003ad0 g       .text	00000000 __preinit_array_end
00001e5c g     F .text	00000080 nvm_set_config
000003a8 g     F .text	00000002 _system_dummy_init
000031d6 g     F .text	0000007e flash_area_to_sectors
000004ec g     F .text	0000008c system_clock_source_enable
00003a88 g     O .text	00000048 sysflash_map_dflt
000000b4 g       .text	00000000 __isr_vector_end
20001398 g     O .bss	00000024 samd21_hal_timer0
000000b4  w    F .text	00000002 DAC_Handler
00001c38 g     F .text	000001ac hal_uart_config
000037dc g     F .text	00000018 .hidden __aeabi_llsl
0000042c g     F .text	00000084 system_clock_source_get_hz
00001858 g     F .text	00000080 samd21_timer0_irq_handler
00003600 g     F .text	00000008 .hidden __aeabi_uidivmod
200000fc g       .relocate	00000000 _erelocate
200000cc g     O .relocate	00000008 g_os_run_list
20001428 g     O .bss	00000100 g_idle_task_stack
00002a2e g     F .text	0000004a tc_set_compare_value
00001320 g     F .text	00000028 NVIC_Relocate
00000318 g     F .text	00000050 system_gclk_chan_disable
20001318 g     O .bss	00000004 os_flags
00000bdc g     F .text	00000030 boot_magic_code
20007c00 g       *ABS*	00000000 __StackLimit
000000b4  w    F .text	00000002 PTC_Handler
20001528 g     O .bss	00000004 g_os_started
00002a04 g     F .text	0000002a tc_get_count_value
2000154c g       .heap	00000000 _user_heap_start
00003ad0 g       .text	00000000 __init_array_start
00002f78 g     F .text	0000000a __aeabi_idiv0
00002d8c g     F .text	00000030 _sercom_get_sercom_inst_index
0000259c g     F .text	0000001a usart_write_buffer_job
000027a8 g     F .text	00000028 system_pinmux_pin_set_config
00001450 g     F .text	00000006 _exit
000037f4 g     F .text	00000054 .hidden __muldi3
00003184 g     F .text	00000010 strlen
00002e18 g     F .text	0000007c os_dev_create
0000018c g     F .text	00000020 system_gclk_init
00002ebc g     F .text	00000010 os_time_advance
0000146c g     F .text	0000002a hal_flash_init
00002c30 g     F .text	0000015c _sercom_get_default_pad
00002592 g     F .text	0000000a usart_read_job
00003ad0 g       .text	00000000 __preinit_array_start
000000b4  w    F .text	00000002 TC5_Handler
00002a78 g     F .text	00000014 wdt_reset_count
000037d4 g     F .text	00000008 .hidden __aeabi_idivmod
000012a0 g     F .text	00000080 hal_bsp_init
00003374 g     F .text	0000006c mfg_next_tlv
00001e28 g     F .text	0000001c hal_uart_init
00002800 g     F .text	00000204 tc_init
00000c0c g     F .text	00000010 boot_trailer_sz
00003120 g     F .text	00000028 free
000000b4  w    F .text	00000002 SYSCTRL_Handler
00000d4a g     F .text	00000034 boot_write_image_ok



Disassembly of section .text:

00000000 <__isr_vector>:
 * Initialize the operating system, calls into the architecture specific
 * support to initialize the operating system.
 */
void
os_init(int (*main_fn)(int argc, char **arg))
{
       0:	00 80 00 20 b9 00 00 00 b5 00 00 00 b5 00 00 00     ... ............
    os_error_t err;

    TAILQ_INIT(&g_callout_list);
    STAILQ_INIT(&g_os_task_list);
      10:	b5 00 00 00 b5 00 00 00 b5 00 00 00 b5 00 00 00     ................
    os_eventq_init(os_eventq_dflt_get());

    /* Initialize device list. */
    os_dev_reset();

    err = os_arch_os_init();
      20:	b5 00 00 00 b5 00 00 00 b5 00 00 00 f3 2e 00 00     ................
    assert(err == OS_OK);
      30:	b5 00 00 00 b5 00 00 00 33 2f 00 00 71 2f 00 00     ........3/..q/..

    if (main_fn) {
        err = os_task_init(&os_main_task, "main", os_main, main_fn,
      40:	b5 00 00 00 b5 00 00 00 b5 00 00 00 b5 00 00 00     ................
      50:	b5 00 00 00 b5 00 00 00 b5 00 00 00 b5 00 00 00     ................
        assert(err == 0);
    }
    /* Call bsp related OS initializations */
    hal_bsp_init();

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
      60:	b5 00 00 00 b5 00 00 00 b5 00 00 00 b5 00 00 00     ................
    assert(err == OS_OK);

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
      70:	b5 00 00 00 b5 00 00 00 b5 00 00 00 b5 00 00 00     ................
    assert(err == OS_OK);
}
      80:	b5 00 00 00 b5 00 00 00 b5 00 00 00 b5 00 00 00     ................
      90:	b5 00 00 00 b5 00 00 00 b5 00 00 00 b5 00 00 00     ................
      a0:	b5 00 00 00 b5 00 00 00 b5 00 00 00 b5 00 00 00     ................
      b0:	00 00 00 00                                         ....

000000b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
      b4:	e7fe      	b.n	b4 <Dummy_Handler>
	...

000000b8 <Reset_Handler>:
        if (pSrc != pDest) {
      b8:	481f      	ldr	r0, [pc, #124]	; (138 <Reset_Handler+0x80>)
      ba:	4920      	ldr	r1, [pc, #128]	; (13c <Reset_Handler+0x84>)
{
      bc:	b570      	push	{r4, r5, r6, lr}
      be:	2300      	movs	r3, #0
        if (pSrc != pDest) {
      c0:	4288      	cmp	r0, r1
      c2:	d132      	bne.n	12a <Reset_Handler+0x72>
                *pDest++ = 0;
      c4:	2100      	movs	r1, #0
      c6:	4b1e      	ldr	r3, [pc, #120]	; (140 <Reset_Handler+0x88>)
        for (pDest = &_szero; pDest < &_ezero;) {
      c8:	4a1e      	ldr	r2, [pc, #120]	; (144 <Reset_Handler+0x8c>)
      ca:	4293      	cmp	r3, r2
      cc:	d332      	bcc.n	134 <Reset_Handler+0x7c>
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
      ce:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
      d0:	2103      	movs	r1, #3
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
      d2:	250c      	movs	r5, #12
      d4:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
      d6:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
      d8:	4b1b      	ldr	r3, [pc, #108]	; (148 <Reset_Handler+0x90>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
      da:	481c      	ldr	r0, [pc, #112]	; (14c <Reset_Handler+0x94>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
      dc:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
      de:	78c3      	ldrb	r3, [r0, #3]
      e0:	438b      	bics	r3, r1
      e2:	4313      	orrs	r3, r2
      e4:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
      e6:	78c3      	ldrb	r3, [r0, #3]
      e8:	43ab      	bics	r3, r5
      ea:	4323      	orrs	r3, r4
      ec:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
      ee:	4b18      	ldr	r3, [pc, #96]	; (150 <Reset_Handler+0x98>)
      f0:	7b98      	ldrb	r0, [r3, #14]
      f2:	43b0      	bics	r0, r6
      f4:	0006      	movs	r6, r0
      f6:	2020      	movs	r0, #32
      f8:	4330      	orrs	r0, r6
      fa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
      fc:	7b98      	ldrb	r0, [r3, #14]
      fe:	43a8      	bics	r0, r5
     100:	4304      	orrs	r4, r0
     102:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     104:	7b98      	ldrb	r0, [r3, #14]
     106:	4388      	bics	r0, r1
     108:	4302      	orrs	r2, r0
     10a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     10c:	2380      	movs	r3, #128	; 0x80
     10e:	4a11      	ldr	r2, [pc, #68]	; (154 <Reset_Handler+0x9c>)
     110:	6851      	ldr	r1, [r2, #4]
     112:	430b      	orrs	r3, r1
     114:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     116:	f000 fa72 	bl	5fe <__libc_init_array>
        SystemInit();
     11a:	f000 f81f 	bl	15c <SystemInit>
        _start();
     11e:	f000 fa67 	bl	5f0 <_start>
     122:	e7fe      	b.n	122 <Reset_Handler+0x6a>
                        *pDest++ = *pSrc++;
     124:	58c4      	ldr	r4, [r0, r3]
     126:	3304      	adds	r3, #4
     128:	6014      	str	r4, [r2, #0]
                for (; pDest < &_erelocate;) {
     12a:	4c0b      	ldr	r4, [pc, #44]	; (158 <Reset_Handler+0xa0>)
     12c:	18ca      	adds	r2, r1, r3
     12e:	42a2      	cmp	r2, r4
     130:	d3f8      	bcc.n	124 <Reset_Handler+0x6c>
     132:	e7c7      	b.n	c4 <Reset_Handler+0xc>
                *pDest++ = 0;
     134:	c302      	stmia	r3!, {r1}
     136:	e7c8      	b.n	ca <Reset_Handler+0x12>
     138:	00003ae8 	.word	0x00003ae8
     13c:	200000b4 	.word	0x200000b4
     140:	200000fc 	.word	0x200000fc
     144:	2000154c 	.word	0x2000154c
     148:	410070fc 	.word	0x410070fc
     14c:	41005000 	.word	0x41005000
     150:	41004800 	.word	0x41004800
     154:	41004000 	.word	0x41004000
     158:	200000fc 	.word	0x200000fc

0000015c <SystemInit>:
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
     15c:	b510      	push	{r4, lr}
    // Keep the default device state after reset
    system_init();
     15e:	f000 f924 	bl	3aa <system_init>
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
     162:	2000      	movs	r0, #0
     164:	f000 f88c 	bl	280 <system_gclk_gen_get_hz>
     168:	4b03      	ldr	r3, [pc, #12]	; (178 <SystemInit+0x1c>)
     16a:	7a1b      	ldrb	r3, [r3, #8]
     16c:	40d8      	lsrs	r0, r3
    SystemCoreClock = system_cpu_clock_get_hz();    
     16e:	4b03      	ldr	r3, [pc, #12]	; (17c <SystemInit+0x20>)
     170:	6018      	str	r0, [r3, #0]
     * functions are pre-installed in the vector table at startup.  When
     * we relocate the vector table, we overwrite all of their initializations
     * and you need to manually set the vectors for the drivers you are 
     * using. See  sam0/drivers/sercom/sercom_interrupt.c at the end
     * for a simple example of how to do this */
    NVIC_Relocate();    
     172:	f001 f8d5 	bl	1320 <NVIC_Relocate>
    return;
}
     176:	bd10      	pop	{r4, pc}
     178:	40000400 	.word	0x40000400
     17c:	20001394 	.word	0x20001394

00000180 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     180:	4b01      	ldr	r3, [pc, #4]	; (188 <system_gclk_is_syncing+0x8>)
     182:	7858      	ldrb	r0, [r3, #1]
     184:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
     186:	4770      	bx	lr
     188:	40000c00 	.word	0x40000c00

0000018c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     18c:	2308      	movs	r3, #8
     18e:	4a05      	ldr	r2, [pc, #20]	; (1a4 <system_gclk_init+0x18>)
     190:	6991      	ldr	r1, [r2, #24]
     192:	430b      	orrs	r3, r1
     194:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     196:	2301      	movs	r3, #1
     198:	4a03      	ldr	r2, [pc, #12]	; (1a8 <system_gclk_init+0x1c>)
     19a:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     19c:	7811      	ldrb	r1, [r2, #0]
     19e:	4219      	tst	r1, r3
     1a0:	d1fc      	bne.n	19c <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
     1a2:	4770      	bx	lr
     1a4:	40000400 	.word	0x40000400
     1a8:	40000c00 	.word	0x40000c00

000001ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     1ac:	b570      	push	{r4, r5, r6, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     1ae:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     1b0:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     1b2:	0224      	lsls	r4, r4, #8
{
     1b4:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     1b6:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     1b8:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
     1ba:	2b00      	cmp	r3, #0
     1bc:	d002      	beq.n	1c4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     1be:	2380      	movs	r3, #128	; 0x80
     1c0:	02db      	lsls	r3, r3, #11
     1c2:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     1c4:	7a4b      	ldrb	r3, [r1, #9]
     1c6:	2b00      	cmp	r3, #0
     1c8:	d002      	beq.n	1d0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     1ca:	2380      	movs	r3, #128	; 0x80
     1cc:	031b      	lsls	r3, r3, #12
     1ce:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     1d0:	684b      	ldr	r3, [r1, #4]
     1d2:	2b01      	cmp	r3, #1
     1d4:	d910      	bls.n	1f8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     1d6:	1e5d      	subs	r5, r3, #1
     1d8:	401d      	ands	r5, r3
     1da:	d02f      	beq.n	23c <_Min_Heap_Size+0x3c>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     1dc:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     1de:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
     1e0:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     1e2:	029b      	lsls	r3, r3, #10
     1e4:	e007      	b.n	1f6 <system_gclk_gen_set_config+0x4a>
				div2_count++;
     1e6:	3501      	adds	r5, #1
						mask <<= 1) {
     1e8:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     1ea:	4293      	cmp	r3, r2
     1ec:	d8fb      	bhi.n	1e6 <system_gclk_gen_set_config+0x3a>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     1ee:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     1f0:	022d      	lsls	r5, r5, #8
     1f2:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     1f4:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     1f6:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     1f8:	7a0b      	ldrb	r3, [r1, #8]
     1fa:	2b00      	cmp	r3, #0
     1fc:	d002      	beq.n	204 <_Min_Heap_Size+0x4>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     1fe:	2380      	movs	r3, #128	; 0x80
     200:	039b      	lsls	r3, r3, #14
     202:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
     204:	f7ff ffbc 	bl	180 <system_gclk_is_syncing>
     208:	2800      	cmp	r0, #0
     20a:	d1fb      	bne.n	204 <_Min_Heap_Size+0x4>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     20c:	f000 f8d4 	bl	3b8 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     210:	4b0b      	ldr	r3, [pc, #44]	; (240 <_Min_Heap_Size+0x40>)
     212:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     214:	f7ff ffb4 	bl	180 <system_gclk_is_syncing>
     218:	2800      	cmp	r0, #0
     21a:	d1fb      	bne.n	214 <_Min_Heap_Size+0x14>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     21c:	4b09      	ldr	r3, [pc, #36]	; (244 <_Min_Heap_Size+0x44>)
     21e:	609d      	str	r5, [r3, #8]
     220:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
     222:	f7ff ffad 	bl	180 <system_gclk_is_syncing>
     226:	2800      	cmp	r0, #0
     228:	d1fb      	bne.n	222 <_Min_Heap_Size+0x22>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     22a:	2280      	movs	r2, #128	; 0x80
     22c:	686b      	ldr	r3, [r5, #4]
     22e:	0252      	lsls	r2, r2, #9
     230:	4013      	ands	r3, r2
     232:	431c      	orrs	r4, r3
     234:	606c      	str	r4, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     236:	f000 f8d9 	bl	3ec <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
     23a:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     23c:	2202      	movs	r2, #2
     23e:	e7d4      	b.n	1ea <system_gclk_gen_set_config+0x3e>
     240:	40000c08 	.word	0x40000c08
     244:	40000c00 	.word	0x40000c00

00000248 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     248:	b510      	push	{r4, lr}
     24a:	0004      	movs	r4, r0
	while (system_gclk_is_syncing()) {
     24c:	f7ff ff98 	bl	180 <system_gclk_is_syncing>
     250:	2800      	cmp	r0, #0
     252:	d1fb      	bne.n	24c <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
     254:	f000 f8b0 	bl	3b8 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     258:	4b07      	ldr	r3, [pc, #28]	; (278 <system_gclk_gen_enable+0x30>)
     25a:	701c      	strb	r4, [r3, #0]
	while (system_gclk_is_syncing()) {
     25c:	f7ff ff90 	bl	180 <system_gclk_is_syncing>
     260:	2800      	cmp	r0, #0
     262:	d1fb      	bne.n	25c <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     264:	2380      	movs	r3, #128	; 0x80
     266:	4a05      	ldr	r2, [pc, #20]	; (27c <system_gclk_gen_enable+0x34>)
     268:	025b      	lsls	r3, r3, #9
     26a:	6851      	ldr	r1, [r2, #4]
     26c:	430b      	orrs	r3, r1
     26e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     270:	f000 f8bc 	bl	3ec <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
     274:	bd10      	pop	{r4, pc}
     276:	46c0      	nop			; (mov r8, r8)
     278:	40000c04 	.word	0x40000c04
     27c:	40000c00 	.word	0x40000c00

00000280 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     282:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
     284:	f7ff ff7c 	bl	180 <system_gclk_is_syncing>
     288:	2800      	cmp	r0, #0
     28a:	d1fb      	bne.n	284 <system_gclk_gen_get_hz+0x4>
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     28c:	4e15      	ldr	r6, [pc, #84]	; (2e4 <system_gclk_gen_get_hz+0x64>)
	cpu_irq_enter_critical();
     28e:	f000 f893 	bl	3b8 <cpu_irq_enter_critical>
     292:	7037      	strb	r7, [r6, #0]
	while (system_gclk_is_syncing()) {
     294:	f7ff ff74 	bl	180 <system_gclk_is_syncing>
     298:	2800      	cmp	r0, #0
     29a:	d1fb      	bne.n	294 <system_gclk_gen_get_hz+0x14>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     29c:	4c12      	ldr	r4, [pc, #72]	; (2e8 <system_gclk_gen_get_hz+0x68>)
     29e:	6860      	ldr	r0, [r4, #4]
     2a0:	04c0      	lsls	r0, r0, #19
     2a2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     2a4:	f000 f8c2 	bl	42c <system_clock_source_get_hz>
     2a8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     2aa:	7037      	strb	r7, [r6, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     2ac:	6866      	ldr	r6, [r4, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     2ae:	4b0f      	ldr	r3, [pc, #60]	; (2ec <system_gclk_gen_get_hz+0x6c>)
	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     2b0:	02f6      	lsls	r6, r6, #11
     2b2:	0ff6      	lsrs	r6, r6, #31
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     2b4:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
     2b6:	f7ff ff63 	bl	180 <system_gclk_is_syncing>
     2ba:	2800      	cmp	r0, #0
     2bc:	d1fb      	bne.n	2b6 <system_gclk_gen_get_hz+0x36>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     2be:	68a4      	ldr	r4, [r4, #8]
     2c0:	0224      	lsls	r4, r4, #8
     2c2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     2c4:	f000 f892 	bl	3ec <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     2c8:	2e00      	cmp	r6, #0
     2ca:	d108      	bne.n	2de <system_gclk_gen_get_hz+0x5e>
     2cc:	2c01      	cmp	r4, #1
     2ce:	d904      	bls.n	2da <system_gclk_gen_get_hz+0x5a>
		gen_input_hz /= divider;
     2d0:	0028      	movs	r0, r5
     2d2:	0021      	movs	r1, r4
     2d4:	f003 f90e 	bl	34f4 <__udivsi3>
     2d8:	0005      	movs	r5, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
     2da:	0028      	movs	r0, r5
     2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
     2de:	3401      	adds	r4, #1
     2e0:	40e5      	lsrs	r5, r4
	return gen_input_hz;
     2e2:	e7fa      	b.n	2da <system_gclk_gen_get_hz+0x5a>
     2e4:	40000c04 	.word	0x40000c04
     2e8:	40000c00 	.word	0x40000c00
     2ec:	40000c08 	.word	0x40000c08

000002f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     2f0:	b510      	push	{r4, lr}
     2f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     2f4:	f000 f860 	bl	3b8 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     2f8:	4b05      	ldr	r3, [pc, #20]	; (310 <system_gclk_chan_enable+0x20>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     2fa:	4a06      	ldr	r2, [pc, #24]	; (314 <system_gclk_chan_enable+0x24>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     2fc:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     2fe:	2380      	movs	r3, #128	; 0x80
     300:	8851      	ldrh	r1, [r2, #2]
     302:	01db      	lsls	r3, r3, #7
     304:	430b      	orrs	r3, r1
     306:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     308:	f000 f870 	bl	3ec <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
     30c:	bd10      	pop	{r4, pc}
     30e:	46c0      	nop			; (mov r8, r8)
     310:	40000c02 	.word	0x40000c02
     314:	40000c00 	.word	0x40000c00

00000318 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     318:	b510      	push	{r4, lr}
     31a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     31c:	f000 f84c 	bl	3b8 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     320:	4b0d      	ldr	r3, [pc, #52]	; (358 <system_gclk_chan_disable+0x40>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
     322:	4a0e      	ldr	r2, [pc, #56]	; (35c <system_gclk_chan_disable+0x44>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     324:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     326:	4b0e      	ldr	r3, [pc, #56]	; (360 <system_gclk_chan_disable+0x48>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     328:	4c0e      	ldr	r4, [pc, #56]	; (364 <system_gclk_chan_disable+0x4c>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     32a:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
     32c:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     32e:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
     330:	4011      	ands	r1, r2
     332:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     334:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     336:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     338:	4021      	ands	r1, r4
     33a:	8059      	strh	r1, [r3, #2]
     33c:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     33e:	2280      	movs	r2, #128	; 0x80
     340:	01d2      	lsls	r2, r2, #7
     342:	885c      	ldrh	r4, [r3, #2]
     344:	4214      	tst	r4, r2
     346:	d1fc      	bne.n	342 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     348:	885a      	ldrh	r2, [r3, #2]
     34a:	0200      	lsls	r0, r0, #8
     34c:	400a      	ands	r2, r1
     34e:	4302      	orrs	r2, r0
     350:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
     352:	f000 f84b 	bl	3ec <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
     356:	bd10      	pop	{r4, pc}
     358:	40000c02 	.word	0x40000c02
     35c:	fffff0ff 	.word	0xfffff0ff
     360:	40000c00 	.word	0x40000c00
     364:	ffffbfff 	.word	0xffffbfff

00000368 <system_gclk_chan_set_config>:
{
     368:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     36a:	780c      	ldrb	r4, [r1, #0]
     36c:	0224      	lsls	r4, r4, #8
     36e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     370:	f7ff ffd2 	bl	318 <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     374:	4b01      	ldr	r3, [pc, #4]	; (37c <system_gclk_chan_set_config+0x14>)
     376:	b2a4      	uxth	r4, r4
     378:	805c      	strh	r4, [r3, #2]
}
     37a:	bd10      	pop	{r4, pc}
     37c:	40000c00 	.word	0x40000c00

00000380 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     380:	b510      	push	{r4, lr}
     382:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     384:	f000 f818 	bl	3b8 <cpu_irq_enter_critical>
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     388:	4b05      	ldr	r3, [pc, #20]	; (3a0 <system_gclk_chan_get_hz+0x20>)
     38a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     38c:	4b05      	ldr	r3, [pc, #20]	; (3a4 <system_gclk_chan_get_hz+0x24>)
     38e:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
     390:	f000 f82c 	bl	3ec <cpu_irq_leave_critical>
     394:	0524      	lsls	r4, r4, #20
     396:	0f24      	lsrs	r4, r4, #28

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     398:	0020      	movs	r0, r4
     39a:	f7ff ff71 	bl	280 <system_gclk_gen_get_hz>
}
     39e:	bd10      	pop	{r4, pc}
     3a0:	40000c02 	.word	0x40000c02
     3a4:	40000c00 	.word	0x40000c00

000003a8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     3a8:	4770      	bx	lr

000003aa <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     3aa:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     3ac:	f000 f8e4 	bl	578 <system_clock_init>

	/* Initialize External hardware */
        _system_extint_init();
     3b0:	f7ff fffa 	bl	3a8 <_system_dummy_init>
}
     3b4:	bd10      	pop	{r4, pc}
	...

000003b8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     3b8:	4b09      	ldr	r3, [pc, #36]	; (3e0 <cpu_irq_enter_critical+0x28>)
     3ba:	6819      	ldr	r1, [r3, #0]
     3bc:	2900      	cmp	r1, #0
     3be:	d10b      	bne.n	3d8 <cpu_irq_enter_critical+0x20>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     3c0:	f3ef 8010 	mrs	r0, PRIMASK
     3c4:	4a07      	ldr	r2, [pc, #28]	; (3e4 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
     3c6:	2800      	cmp	r0, #0
     3c8:	d105      	bne.n	3d6 <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
     3ca:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     3cc:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     3d0:	4905      	ldr	r1, [pc, #20]	; (3e8 <cpu_irq_enter_critical+0x30>)
     3d2:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
     3d4:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     3d6:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     3d8:	681a      	ldr	r2, [r3, #0]
     3da:	3201      	adds	r2, #1
     3dc:	601a      	str	r2, [r3, #0]
}
     3de:	4770      	bx	lr
     3e0:	200000fc 	.word	0x200000fc
     3e4:	20000100 	.word	0x20000100
     3e8:	200000b4 	.word	0x200000b4

000003ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     3ec:	4b08      	ldr	r3, [pc, #32]	; (410 <STACK_SIZE+0x10>)
     3ee:	681a      	ldr	r2, [r3, #0]
     3f0:	3a01      	subs	r2, #1
     3f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     3f4:	681b      	ldr	r3, [r3, #0]
     3f6:	2b00      	cmp	r3, #0
     3f8:	d109      	bne.n	40e <STACK_SIZE+0xe>
     3fa:	4b06      	ldr	r3, [pc, #24]	; (414 <STACK_SIZE+0x14>)
     3fc:	781b      	ldrb	r3, [r3, #0]
     3fe:	2b00      	cmp	r3, #0
     400:	d005      	beq.n	40e <STACK_SIZE+0xe>
		cpu_irq_enable();
     402:	2201      	movs	r2, #1
     404:	4b04      	ldr	r3, [pc, #16]	; (418 <STACK_SIZE+0x18>)
     406:	701a      	strb	r2, [r3, #0]
     408:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     40c:	b662      	cpsie	i
	}
}
     40e:	4770      	bx	lr
     410:	200000fc 	.word	0x200000fc
     414:	20000100 	.word	0x20000100
     418:	200000b4 	.word	0x200000b4

0000041c <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     41c:	2310      	movs	r3, #16
     41e:	4902      	ldr	r1, [pc, #8]	; (428 <_system_dfll_wait_for_sync+0xc>)
     420:	68ca      	ldr	r2, [r1, #12]
     422:	421a      	tst	r2, r3
     424:	d0fc      	beq.n	420 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
     426:	4770      	bx	lr
     428:	40000800 	.word	0x40000800

0000042c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     42c:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
     42e:	2808      	cmp	r0, #8
     430:	d806      	bhi.n	440 <system_clock_source_get_hz+0x14>
     432:	f003 f855 	bl	34e0 <__gnu_thumb1_case_uqi>
     436:	0508      	.short	0x0508
     438:	122e2e05 	.word	0x122e2e05
     43c:	150b      	.short	0x150b
     43e:	26          	.byte	0x26
     43f:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     440:	2400      	movs	r4, #0
	}
}
     442:	0020      	movs	r0, r4
     444:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
     446:	4b15      	ldr	r3, [pc, #84]	; (49c <system_clock_source_get_hz+0x70>)
     448:	691c      	ldr	r4, [r3, #16]
     44a:	e7fa      	b.n	442 <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     44c:	4b14      	ldr	r3, [pc, #80]	; (4a0 <system_clock_source_get_hz+0x74>)
     44e:	4c15      	ldr	r4, [pc, #84]	; (4a4 <system_clock_source_get_hz+0x78>)
     450:	6a1b      	ldr	r3, [r3, #32]
     452:	059b      	lsls	r3, r3, #22
     454:	0f9b      	lsrs	r3, r3, #30
     456:	40dc      	lsrs	r4, r3
     458:	e7f3      	b.n	442 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
     45a:	4b10      	ldr	r3, [pc, #64]	; (49c <system_clock_source_get_hz+0x70>)
     45c:	695c      	ldr	r4, [r3, #20]
     45e:	e7f0      	b.n	442 <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     460:	4d0e      	ldr	r5, [pc, #56]	; (49c <system_clock_source_get_hz+0x70>)
			return 0;
     462:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     464:	682b      	ldr	r3, [r5, #0]
     466:	079b      	lsls	r3, r3, #30
     468:	d5eb      	bpl.n	442 <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
     46a:	f7ff ffd7 	bl	41c <_system_dfll_wait_for_sync>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     46e:	682b      	ldr	r3, [r5, #0]
     470:	075b      	lsls	r3, r3, #29
     472:	d511      	bpl.n	498 <system_clock_source_get_hz+0x6c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     474:	0020      	movs	r0, r4
     476:	f7ff ff83 	bl	380 <system_gclk_chan_get_hz>
					(_system_clock_inst.dfll.mul & 0xffff);
     47a:	68ac      	ldr	r4, [r5, #8]
     47c:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     47e:	4344      	muls	r4, r0
     480:	e7df      	b.n	442 <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     482:	4b09      	ldr	r3, [pc, #36]	; (4a8 <system_clock_source_get_hz+0x7c>)
			return 0;
     484:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     486:	781b      	ldrb	r3, [r3, #0]
     488:	075b      	lsls	r3, r3, #29
     48a:	d5da      	bpl.n	442 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
     48c:	4b03      	ldr	r3, [pc, #12]	; (49c <system_clock_source_get_hz+0x70>)
     48e:	68dc      	ldr	r4, [r3, #12]
     490:	e7d7      	b.n	442 <system_clock_source_get_hz+0x16>
		return 32768UL;
     492:	2480      	movs	r4, #128	; 0x80
     494:	0224      	lsls	r4, r4, #8
     496:	e7d4      	b.n	442 <system_clock_source_get_hz+0x16>
		return 48000000UL;
     498:	4c04      	ldr	r4, [pc, #16]	; (4ac <system_clock_source_get_hz+0x80>)
     49a:	e7d2      	b.n	442 <system_clock_source_get_hz+0x16>
     49c:	20000104 	.word	0x20000104
     4a0:	40000800 	.word	0x40000800
     4a4:	007a1200 	.word	0x007a1200
     4a8:	40000850 	.word	0x40000850
     4ac:	02dc6c00 	.word	0x02dc6c00

000004b0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     4b0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     4b2:	7802      	ldrb	r2, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     4b4:	7884      	ldrb	r4, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     4b6:	7845      	ldrb	r5, [r0, #1]
     4b8:	2001      	movs	r0, #1
     4ba:	2640      	movs	r6, #64	; 0x40
     4bc:	4005      	ands	r5, r0
     4be:	4020      	ands	r0, r4
     4c0:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     4c2:	4908      	ldr	r1, [pc, #32]	; (4e4 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
     4c4:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     4c6:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
     4c8:	01c0      	lsls	r0, r0, #7
     4ca:	43b3      	bics	r3, r6
     4cc:	432b      	orrs	r3, r5
     4ce:	43a3      	bics	r3, r4
     4d0:	4303      	orrs	r3, r0
     4d2:	2003      	movs	r0, #3
     4d4:	4002      	ands	r2, r0
     4d6:	4804      	ldr	r0, [pc, #16]	; (4e8 <system_clock_source_osc8m_set_config+0x38>)
     4d8:	0212      	lsls	r2, r2, #8
     4da:	4003      	ands	r3, r0
     4dc:	4313      	orrs	r3, r2
     4de:	620b      	str	r3, [r1, #32]
}
     4e0:	bd70      	pop	{r4, r5, r6, pc}
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	40000800 	.word	0x40000800
     4e8:	fffffcff 	.word	0xfffffcff

000004ec <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
     4ec:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
     4ee:	2808      	cmp	r0, #8
     4f0:	d806      	bhi.n	500 <system_clock_source_enable+0x14>
     4f2:	f002 fff5 	bl	34e0 <__gnu_thumb1_case_uqi>
     4f6:	0514      	.short	0x0514
     4f8:	1a0e0c05 	.word	0x1a0e0c05
     4fc:	2007      	.short	0x2007
     4fe:	35          	.byte	0x35
     4ff:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     500:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     502:	bd70      	pop	{r4, r5, r6, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     504:	2302      	movs	r3, #2
     506:	4a19      	ldr	r2, [pc, #100]	; (56c <system_clock_source_enable+0x80>)
     508:	6a11      	ldr	r1, [r2, #32]
     50a:	430b      	orrs	r3, r1
     50c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     50e:	2000      	movs	r0, #0
     510:	e7f7      	b.n	502 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     512:	2302      	movs	r3, #2
     514:	4a15      	ldr	r2, [pc, #84]	; (56c <system_clock_source_enable+0x80>)
     516:	6991      	ldr	r1, [r2, #24]
     518:	430b      	orrs	r3, r1
     51a:	6193      	str	r3, [r2, #24]
     51c:	e7f7      	b.n	50e <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     51e:	2302      	movs	r3, #2
     520:	4a12      	ldr	r2, [pc, #72]	; (56c <system_clock_source_enable+0x80>)
     522:	8a11      	ldrh	r1, [r2, #16]
     524:	430b      	orrs	r3, r1
     526:	8213      	strh	r3, [r2, #16]
     528:	e7f1      	b.n	50e <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     52a:	2302      	movs	r3, #2
     52c:	4a0f      	ldr	r2, [pc, #60]	; (56c <system_clock_source_enable+0x80>)
     52e:	8a91      	ldrh	r1, [r2, #20]
     530:	430b      	orrs	r3, r1
     532:	8293      	strh	r3, [r2, #20]
     534:	e7eb      	b.n	50e <system_clock_source_enable+0x22>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     536:	2202      	movs	r2, #2
	SYSCTRL->DFLLCTRL.reg = 0;
     538:	2400      	movs	r4, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     53a:	4e0d      	ldr	r6, [pc, #52]	; (570 <system_clock_source_enable+0x84>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     53c:	4d0b      	ldr	r5, [pc, #44]	; (56c <system_clock_source_enable+0x80>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     53e:	6833      	ldr	r3, [r6, #0]
     540:	4313      	orrs	r3, r2
     542:	6033      	str	r3, [r6, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     544:	84aa      	strh	r2, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
     546:	f7ff ff69 	bl	41c <_system_dfll_wait_for_sync>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     54a:	68b3      	ldr	r3, [r6, #8]
     54c:	62eb      	str	r3, [r5, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     54e:	6873      	ldr	r3, [r6, #4]
     550:	62ab      	str	r3, [r5, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     552:	84ac      	strh	r4, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
     554:	f7ff ff62 	bl	41c <_system_dfll_wait_for_sync>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     558:	6833      	ldr	r3, [r6, #0]
     55a:	b29b      	uxth	r3, r3
     55c:	84ab      	strh	r3, [r5, #36]	; 0x24
     55e:	e7d6      	b.n	50e <system_clock_source_enable+0x22>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     560:	2302      	movs	r3, #2
     562:	4a04      	ldr	r2, [pc, #16]	; (574 <system_clock_source_enable+0x88>)
     564:	7811      	ldrb	r1, [r2, #0]
     566:	430b      	orrs	r3, r1
     568:	7013      	strb	r3, [r2, #0]
     56a:	e7d0      	b.n	50e <system_clock_source_enable+0x22>
     56c:	40000800 	.word	0x40000800
     570:	20000104 	.word	0x20000104
     574:	40000844 	.word	0x40000844

00000578 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     578:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     57a:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     57c:	211e      	movs	r1, #30
     57e:	4b19      	ldr	r3, [pc, #100]	; (5e4 <system_clock_init+0x6c>)
     580:	00d2      	lsls	r2, r2, #3
     582:	609a      	str	r2, [r3, #8]
     584:	4a18      	ldr	r2, [pc, #96]	; (5e8 <system_clock_init+0x70>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     586:	2400      	movs	r4, #0
     588:	6853      	ldr	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     58a:	ad01      	add	r5, sp, #4
     58c:	438b      	bics	r3, r1
     58e:	6053      	str	r3, [r2, #4]
     590:	2301      	movs	r3, #1
     592:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     594:	b2e0      	uxtb	r0, r4
     596:	0029      	movs	r1, r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     598:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     59a:	f7ff fee5 	bl	368 <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     59e:	2c25      	cmp	r4, #37	; 0x25
     5a0:	d1f8      	bne.n	594 <system_clock_init+0x1c>
	config->run_in_standby  = false;
     5a2:	2400      	movs	r4, #0
     5a4:	466b      	mov	r3, sp
	config->on_demand       = true;
     5a6:	2601      	movs	r6, #1

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     5a8:	4668      	mov	r0, sp
     5aa:	709e      	strb	r6, [r3, #2]
	config->run_in_standby  = false;
     5ac:	705c      	strb	r4, [r3, #1]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     5ae:	701c      	strb	r4, [r3, #0]
	system_clock_source_osc8m_set_config(&osc8m_conf);
     5b0:	f7ff ff7e 	bl	4b0 <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     5b4:	2006      	movs	r0, #6
     5b6:	f7ff ff99 	bl	4ec <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     5ba:	f7ff fde7 	bl	18c <system_gclk_init>
	PM->CPUSEL.reg = (uint32_t)divider;
     5be:	4b0b      	ldr	r3, [pc, #44]	; (5ec <system_clock_init+0x74>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     5c0:	0029      	movs	r1, r5
     5c2:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     5c4:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     5c6:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     5c8:	72dc      	strb	r4, [r3, #11]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     5ca:	2306      	movs	r3, #6
     5cc:	0020      	movs	r0, r4
	config->division_factor    = 1;
     5ce:	606e      	str	r6, [r5, #4]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     5d0:	702b      	strb	r3, [r5, #0]
	config->high_when_disabled = false;
     5d2:	706c      	strb	r4, [r5, #1]
#endif
	config->run_in_standby     = false;
     5d4:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
     5d6:	726c      	strb	r4, [r5, #9]
     5d8:	f7ff fde8 	bl	1ac <system_gclk_gen_set_config>
     5dc:	0020      	movs	r0, r4
     5de:	f7ff fe33 	bl	248 <system_gclk_gen_enable>
#endif
}
     5e2:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
     5e4:	40000800 	.word	0x40000800
     5e8:	41004000 	.word	0x41004000
     5ec:	40000400 	.word	0x40000400

000005f0 <_start>:
void _start(void)
{
#if !MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    rc = main(0, NULL);
     5f0:	2100      	movs	r1, #0
{
     5f2:	b510      	push	{r4, lr}
    rc = main(0, NULL);
     5f4:	0008      	movs	r0, r1
     5f6:	f000 f803 	bl	600 <main>
#define EXIT_FAILURE	1
__extern_inline void exit(int err)
{
	__extern void _exit(int s);

	_exit(err);
     5fa:	f000 ff29 	bl	1450 <_exit>

000005fe <__libc_init_array>:
}

void
__libc_init_array(void)
{
}
     5fe:	4770      	bx	lr

00000600 <main>:
#define BOOT_AREA_DESC_MAX  (256)
#define AREA_DESC_MAX       (BOOT_AREA_DESC_MAX)

int
main(void)
{
     600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    struct boot_rsp rsp;
    int rc;

    hal_bsp_init();
     602:	f000 fe4d 	bl	12a0 <hal_bsp_init>

#if MYNEWT_VAL(BOOT_SERIAL)
    sysinit();
#else
    flash_map_init();
     606:	f002 fe69 	bl	32dc <flash_map_init>
#endif

    rc = boot_go(&rsp);
     60a:	a801      	add	r0, sp, #4
     60c:	f000 f97a 	bl	904 <boot_go>
    assert(rc == 0);
     610:	2800      	cmp	r0, #0
     612:	d005      	beq.n	620 <main+0x20>
     614:	2300      	movs	r3, #0
     616:	001a      	movs	r2, r3
     618:	0019      	movs	r1, r3
     61a:	0018      	movs	r0, r3
     61c:	f002 fbce 	bl	2dbc <__assert_func>

    hal_system_start((void *)(rsp.br_image_addr + rsp.br_hdr->ih_hdr_size));
     620:	9b01      	ldr	r3, [sp, #4]
     622:	8918      	ldrh	r0, [r3, #8]
     624:	9b03      	ldr	r3, [sp, #12]
     626:	18c0      	adds	r0, r0, r3
     628:	f001 f8b8 	bl	179c <hal_system_start>

0000062c <boot_read_image_headers>:
    return rc;
}

static int
boot_read_image_headers(void)
{
     62c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int rc;
    int i;

    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
     62e:	2400      	movs	r4, #0
        rc = BOOT_EFLASH;
     630:	2601      	movs	r6, #1
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
     632:	2728      	movs	r7, #40	; 0x28
    area_id = flash_area_id_from_image_slot(slot);
     634:	0020      	movs	r0, r4
     636:	f002 fe42 	bl	32be <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fap);
     63a:	a901      	add	r1, sp, #4
     63c:	b2c0      	uxtb	r0, r0
     63e:	f002 fda9 	bl	3194 <flash_area_open>
        rc = BOOT_EFLASH;
     642:	0035      	movs	r5, r6
    rc = flash_area_open(area_id, &fap);
     644:	1e01      	subs	r1, r0, #0
    if (rc != 0) {
     646:	d10a      	bne.n	65e <boot_read_image_headers+0x32>
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
     648:	003b      	movs	r3, r7
     64a:	4363      	muls	r3, r4
     64c:	4a0a      	ldr	r2, [pc, #40]	; (678 <boot_read_image_headers+0x4c>)
     64e:	9801      	ldr	r0, [sp, #4]
     650:	18d2      	adds	r2, r2, r3
     652:	2320      	movs	r3, #32
     654:	f002 fdfe 	bl	3254 <flash_area_read>
        rc = BOOT_EFLASH;
     658:	0005      	movs	r5, r0
     65a:	1e68      	subs	r0, r5, #1
     65c:	4185      	sbcs	r5, r0
    flash_area_close(fap);
     65e:	9801      	ldr	r0, [sp, #4]
     660:	f002 fdb8 	bl	31d4 <flash_area_close>
        rc = boot_read_image_header(i, &boot_data.imgs[i].hdr);
        if (rc != 0) {
     664:	2d00      	cmp	r5, #0
     666:	d003      	beq.n	670 <boot_read_image_headers+0x44>
     668:	0035      	movs	r5, r6
     66a:	4065      	eors	r5, r4
            }
        }
    }

    return 0;
}
     66c:	0028      	movs	r0, r5
     66e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
     670:	2c01      	cmp	r4, #1
     672:	d0fb      	beq.n	66c <boot_read_image_headers+0x40>
     674:	0034      	movs	r4, r6
     676:	e7dd      	b.n	634 <boot_read_image_headers+0x8>
     678:	2000011c 	.word	0x2000011c

0000067c <boot_copy_sector>:
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_copy_sector(int flash_area_id_src, int flash_area_id_dst,
                 uint32_t off_src, uint32_t off_dst, uint32_t sz)
{
     67c:	b5f0      	push	{r4, r5, r6, r7, lr}
     67e:	b085      	sub	sp, #20
     680:	9301      	str	r3, [sp, #4]
    int chunk_sz;
    int rc;

    static uint8_t buf[1024];

    fap_src = NULL;
     682:	2300      	movs	r3, #0
{
     684:	000c      	movs	r4, r1
    fap_dst = NULL;

    rc = flash_area_open(flash_area_id_src, &fap_src);
     686:	b2c0      	uxtb	r0, r0
     688:	a902      	add	r1, sp, #8
{
     68a:	9200      	str	r2, [sp, #0]
    fap_src = NULL;
     68c:	9302      	str	r3, [sp, #8]
    fap_dst = NULL;
     68e:	9303      	str	r3, [sp, #12]
    rc = flash_area_open(flash_area_id_src, &fap_src);
     690:	f002 fd80 	bl	3194 <flash_area_open>
    if (rc != 0) {
     694:	2800      	cmp	r0, #0
     696:	d009      	beq.n	6ac <boot_copy_sector+0x30>
        rc = BOOT_EFLASH;
     698:	2601      	movs	r6, #1
    }

    rc = 0;

done:
    flash_area_close(fap_src);
     69a:	9802      	ldr	r0, [sp, #8]
     69c:	f002 fd9a 	bl	31d4 <flash_area_close>
    flash_area_close(fap_dst);
     6a0:	9803      	ldr	r0, [sp, #12]
     6a2:	f002 fd97 	bl	31d4 <flash_area_close>
    return rc;
}
     6a6:	0030      	movs	r0, r6
     6a8:	b005      	add	sp, #20
     6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = flash_area_open(flash_area_id_dst, &fap_dst);
     6ac:	b2e0      	uxtb	r0, r4
     6ae:	a903      	add	r1, sp, #12
     6b0:	f002 fd70 	bl	3194 <flash_area_open>
     6b4:	0006      	movs	r6, r0
    bytes_copied = 0;
     6b6:	1e04      	subs	r4, r0, #0
    if (rc != 0) {
     6b8:	d1ee      	bne.n	698 <boot_copy_sector+0x1c>
    while (bytes_copied < sz) {
     6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     6bc:	9802      	ldr	r0, [sp, #8]
     6be:	429c      	cmp	r4, r3
     6c0:	d2eb      	bcs.n	69a <boot_copy_sector+0x1e>
        if (sz - bytes_copied > sizeof buf) {
     6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     6c4:	1b1d      	subs	r5, r3, r4
     6c6:	2380      	movs	r3, #128	; 0x80
     6c8:	00db      	lsls	r3, r3, #3
     6ca:	429d      	cmp	r5, r3
     6cc:	d900      	bls.n	6d0 <boot_copy_sector+0x54>
     6ce:	001d      	movs	r5, r3
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     6d0:	9b00      	ldr	r3, [sp, #0]
     6d2:	4f09      	ldr	r7, [pc, #36]	; (6f8 <boot_copy_sector+0x7c>)
     6d4:	18e1      	adds	r1, r4, r3
     6d6:	003a      	movs	r2, r7
     6d8:	002b      	movs	r3, r5
     6da:	f002 fdbb 	bl	3254 <flash_area_read>
        if (rc != 0) {
     6de:	2800      	cmp	r0, #0
     6e0:	d1da      	bne.n	698 <boot_copy_sector+0x1c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     6e2:	9b01      	ldr	r3, [sp, #4]
     6e4:	003a      	movs	r2, r7
     6e6:	18e1      	adds	r1, r4, r3
     6e8:	9803      	ldr	r0, [sp, #12]
     6ea:	002b      	movs	r3, r5
     6ec:	f002 fdc2 	bl	3274 <flash_area_write>
        if (rc != 0) {
     6f0:	2800      	cmp	r0, #0
     6f2:	d1d1      	bne.n	698 <boot_copy_sector+0x1c>
        bytes_copied += chunk_sz;
     6f4:	1964      	adds	r4, r4, r5
     6f6:	e7e0      	b.n	6ba <boot_copy_sector+0x3e>
     6f8:	2000017c 	.word	0x2000017c

000006fc <boot_erase_sector>:
{
     6fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
     6fe:	000c      	movs	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
     700:	b2c0      	uxtb	r0, r0
     702:	a901      	add	r1, sp, #4
{
     704:	0015      	movs	r5, r2
    rc = flash_area_open(flash_area_id, &fap);
     706:	f002 fd45 	bl	3194 <flash_area_open>
        rc = BOOT_EFLASH;
     70a:	2601      	movs	r6, #1
    if (rc != 0) {
     70c:	2800      	cmp	r0, #0
     70e:	d107      	bne.n	720 <boot_erase_sector+0x24>
    rc = flash_area_erase(fap, off, sz);
     710:	002a      	movs	r2, r5
     712:	0021      	movs	r1, r4
     714:	9801      	ldr	r0, [sp, #4]
     716:	f002 fdbd 	bl	3294 <flash_area_erase>
        rc = BOOT_EFLASH;
     71a:	0006      	movs	r6, r0
     71c:	1e70      	subs	r0, r6, #1
     71e:	4186      	sbcs	r6, r0
    flash_area_close(fap);
     720:	9801      	ldr	r0, [sp, #4]
     722:	f002 fd57 	bl	31d4 <flash_area_close>
}
     726:	0030      	movs	r0, r6
     728:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0000072a <boot_finalize_revert_swap>:
 * the status bytes from the image revert operation don't get processed on a
 * subsequent boot.
 */
static int
boot_finalize_revert_swap(void)
{
     72a:	b507      	push	{r0, r1, r2, lr}
    const struct flash_area *fap;
    struct boot_swap_state state_slot0;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_0, &fap);
     72c:	2001      	movs	r0, #1
     72e:	a901      	add	r1, sp, #4
     730:	f002 fd30 	bl	3194 <flash_area_open>
    if (rc != 0) {
     734:	2800      	cmp	r0, #0
     736:	d001      	beq.n	73c <boot_finalize_revert_swap+0x12>
        return BOOT_EFLASH;
     738:	2001      	movs	r0, #1
            return rc;
        }
    }

    return 0;
}
     73a:	bd0e      	pop	{r1, r2, r3, pc}
    rc = boot_read_swap_state(fap, &state_slot0);
     73c:	4669      	mov	r1, sp
     73e:	9801      	ldr	r0, [sp, #4]
     740:	f000 fa82 	bl	c48 <boot_read_swap_state>
    if (rc != 0) {
     744:	2800      	cmp	r0, #0
     746:	d1f7      	bne.n	738 <boot_finalize_revert_swap+0xe>
    if (state_slot0.magic == BOOT_MAGIC_UNSET) {
     748:	466b      	mov	r3, sp
     74a:	781b      	ldrb	r3, [r3, #0]
     74c:	2b03      	cmp	r3, #3
     74e:	d011      	beq.n	774 <boot_finalize_revert_swap+0x4a>
    if (state_slot0.copy_done == 0xff) {
     750:	466b      	mov	r3, sp
     752:	785b      	ldrb	r3, [r3, #1]
     754:	2bff      	cmp	r3, #255	; 0xff
     756:	d104      	bne.n	762 <boot_finalize_revert_swap+0x38>
        rc = boot_write_copy_done(fap);
     758:	9801      	ldr	r0, [sp, #4]
     75a:	f000 fadb 	bl	d14 <boot_write_copy_done>
        if (rc != 0) {
     75e:	2800      	cmp	r0, #0
     760:	d1eb      	bne.n	73a <boot_finalize_revert_swap+0x10>
    if (state_slot0.image_ok == 0xff) {
     762:	466b      	mov	r3, sp
     764:	789b      	ldrb	r3, [r3, #2]
    return 0;
     766:	2000      	movs	r0, #0
    if (state_slot0.image_ok == 0xff) {
     768:	2bff      	cmp	r3, #255	; 0xff
     76a:	d1e6      	bne.n	73a <boot_finalize_revert_swap+0x10>
        rc = boot_write_image_ok(fap);
     76c:	9801      	ldr	r0, [sp, #4]
     76e:	f000 faec 	bl	d4a <boot_write_image_ok>
     772:	e7e2      	b.n	73a <boot_finalize_revert_swap+0x10>
        rc = boot_write_magic(fap);
     774:	9801      	ldr	r0, [sp, #4]
     776:	f000 fabd 	bl	cf4 <boot_write_magic>
        if (rc != 0) {
     77a:	2800      	cmp	r0, #0
     77c:	d0e8      	beq.n	750 <boot_finalize_revert_swap+0x26>
     77e:	e7dc      	b.n	73a <boot_finalize_revert_swap+0x10>

00000780 <boot_write_status>:
{
     780:	b5f0      	push	{r4, r5, r6, r7, lr}
     782:	0005      	movs	r5, r0
    if (bs->idx == 0) {
     784:	682b      	ldr	r3, [r5, #0]
{
     786:	b085      	sub	sp, #20
        area_id = FLASH_AREA_IMAGE_SCRATCH;
     788:	2003      	movs	r0, #3
    if (bs->idx == 0) {
     78a:	2b00      	cmp	r3, #0
     78c:	d000      	beq.n	790 <boot_write_status+0x10>
        area_id = FLASH_AREA_IMAGE_0;
     78e:	3802      	subs	r0, #2
    rc = flash_area_open(area_id, &fap);
     790:	b2c0      	uxtb	r0, r0
     792:	a901      	add	r1, sp, #4
     794:	f002 fcfe 	bl	3194 <flash_area_open>
        rc = BOOT_EFLASH;
     798:	2401      	movs	r4, #1
    if (rc != 0) {
     79a:	2800      	cmp	r0, #0
     79c:	d123      	bne.n	7e6 <boot_write_status+0x66>
    off = boot_status_off(fap) +
     79e:	9801      	ldr	r0, [sp, #4]
     7a0:	f000 fa4d 	bl	c3e <boot_status_off>
          boot_status_internal_off(bs->idx, bs->state, boot_data.write_sz);
     7a4:	4b13      	ldr	r3, [pc, #76]	; (7f4 <boot_write_status+0x74>)
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
     7a6:	3402      	adds	r4, #2
          boot_status_internal_off(bs->idx, bs->state, boot_data.write_sz);
     7a8:	335c      	adds	r3, #92	; 0x5c
     7aa:	781b      	ldrb	r3, [r3, #0]
    return idx * idx_sz + state * elem_sz;
     7ac:	682a      	ldr	r2, [r5, #0]
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
     7ae:	435c      	muls	r4, r3
    return idx * idx_sz + state * elem_sz;
     7b0:	4354      	muls	r4, r2
          boot_status_internal_off(bs->idx, bs->state, boot_data.write_sz);
     7b2:	792a      	ldrb	r2, [r5, #4]
    memset(buf, 0xFF, 8);
     7b4:	ae02      	add	r6, sp, #8
    return idx * idx_sz + state * elem_sz;
     7b6:	4353      	muls	r3, r2
     7b8:	18e4      	adds	r4, r4, r3
    align = hal_flash_align(fap->fa_device_id);
     7ba:	9b01      	ldr	r3, [sp, #4]
    off = boot_status_off(fap) +
     7bc:	1824      	adds	r4, r4, r0
    align = hal_flash_align(fap->fa_device_id);
     7be:	7858      	ldrb	r0, [r3, #1]
     7c0:	f000 fe69 	bl	1496 <hal_flash_align>
     7c4:	0007      	movs	r7, r0
    memset(buf, 0xFF, 8);
     7c6:	2208      	movs	r2, #8
     7c8:	21ff      	movs	r1, #255	; 0xff
     7ca:	0030      	movs	r0, r6
     7cc:	f002 fcd2 	bl	3174 <memset>
    buf[0] = bs->state;
     7d0:	792b      	ldrb	r3, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
     7d2:	0021      	movs	r1, r4
    buf[0] = bs->state;
     7d4:	7033      	strb	r3, [r6, #0]
    rc = flash_area_write(fap, off, buf, align);
     7d6:	0032      	movs	r2, r6
     7d8:	003b      	movs	r3, r7
     7da:	9801      	ldr	r0, [sp, #4]
     7dc:	f002 fd4a 	bl	3274 <flash_area_write>
        rc = BOOT_EFLASH;
     7e0:	0004      	movs	r4, r0
     7e2:	1e60      	subs	r0, r4, #1
     7e4:	4184      	sbcs	r4, r0
    flash_area_close(fap);
     7e6:	9801      	ldr	r0, [sp, #4]
     7e8:	f002 fcf4 	bl	31d4 <flash_area_close>
}
     7ec:	0020      	movs	r0, r4
     7ee:	b005      	add	sp, #20
     7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	2000011c 	.word	0x2000011c

000007f8 <boot_copy_image>:
    last_sector_idx = boot_data.imgs[0].num_sectors - 1;
     7f8:	4b41      	ldr	r3, [pc, #260]	; (900 <boot_copy_image+0x108>)
{
     7fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    last_sector_idx = boot_data.imgs[0].num_sectors - 1;
     7fc:	6a5e      	ldr	r6, [r3, #36]	; 0x24
{
     7fe:	0004      	movs	r4, r0
    swap_idx = 0;
     800:	2300      	movs	r3, #0
{
     802:	b085      	sub	sp, #20
    last_sector_idx = boot_data.imgs[0].num_sectors - 1;
     804:	3e01      	subs	r6, #1
        swap_idx++;
     806:	9302      	str	r3, [sp, #8]
    while (last_sector_idx >= 0) {
     808:	2e00      	cmp	r6, #0
     80a:	da02      	bge.n	812 <boot_copy_image+0x1a>
}
     80c:	2000      	movs	r0, #0
     80e:	b005      	add	sp, #20
     810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sz = 0;
     812:	2500      	movs	r5, #0
        hal_watchdog_tickle();
     814:	f001 fb16 	bl	1e44 <hal_watchdog_tickle>
        new_sz = sz + boot_data.imgs[0].sectors[i].fa_size;
     818:	4b39      	ldr	r3, [pc, #228]	; (900 <boot_copy_image+0x108>)
     81a:	6a1a      	ldr	r2, [r3, #32]
        if (new_sz > boot_data.scratch_sector.fa_size) {
     81c:	6d99      	ldr	r1, [r3, #88]	; 0x58
        new_sz = sz + boot_data.imgs[0].sectors[i].fa_size;
     81e:	230c      	movs	r3, #12
     820:	4373      	muls	r3, r6
     822:	18d3      	adds	r3, r2, r3
     824:	689b      	ldr	r3, [r3, #8]
     826:	18eb      	adds	r3, r5, r3
        if (new_sz > boot_data.scratch_sector.fa_size) {
     828:	428b      	cmp	r3, r1
     82a:	d802      	bhi.n	832 <boot_copy_image+0x3a>
     82c:	001d      	movs	r5, r3
    for (i = last_sector_idx; i >= 0; i--) {
     82e:	3e01      	subs	r6, #1
     830:	d2f5      	bcs.n	81e <boot_copy_image+0x26>
        if (swap_idx >= bs->idx) {
     832:	6823      	ldr	r3, [r4, #0]
     834:	9902      	ldr	r1, [sp, #8]
     836:	428b      	cmp	r3, r1
     838:	d85f      	bhi.n	8fa <boot_copy_image+0x102>
    img_off = boot_data.imgs[0].sectors[idx].fa_off -
     83a:	210c      	movs	r1, #12
    *out_first_sector_idx = i + 1;
     83c:	1c73      	adds	r3, r6, #1
    img_off = boot_data.imgs[0].sectors[idx].fa_off -
     83e:	4359      	muls	r1, r3
     840:	1853      	adds	r3, r2, r1
     842:	685f      	ldr	r7, [r3, #4]
     844:	9103      	str	r1, [sp, #12]
     846:	6853      	ldr	r3, [r2, #4]
    if (bs->state == 0) {
     848:	7921      	ldrb	r1, [r4, #4]
    img_off = boot_data.imgs[0].sectors[idx].fa_off -
     84a:	1aff      	subs	r7, r7, r3
    if (bs->state == 0) {
     84c:	2900      	cmp	r1, #0
     84e:	d112      	bne.n	876 <boot_copy_image+0x7e>
        rc = boot_erase_sector(FLASH_AREA_IMAGE_SCRATCH, 0, sz);
     850:	002a      	movs	r2, r5
     852:	2003      	movs	r0, #3
     854:	f7ff ff52 	bl	6fc <boot_erase_sector>
     858:	1e03      	subs	r3, r0, #0
        if (rc != 0) {
     85a:	d14e      	bne.n	8fa <boot_copy_image+0x102>
        rc = boot_copy_sector(FLASH_AREA_IMAGE_1, FLASH_AREA_IMAGE_SCRATCH,
     85c:	9500      	str	r5, [sp, #0]
     85e:	003a      	movs	r2, r7
     860:	2103      	movs	r1, #3
     862:	2002      	movs	r0, #2
     864:	f7ff ff0a 	bl	67c <boot_copy_sector>
        if (rc != 0) {
     868:	2800      	cmp	r0, #0
     86a:	d146      	bne.n	8fa <boot_copy_image+0x102>
        bs->state = 1;
     86c:	2301      	movs	r3, #1
        (void)boot_write_status(bs);
     86e:	0020      	movs	r0, r4
        bs->state = 1;
     870:	7123      	strb	r3, [r4, #4]
        (void)boot_write_status(bs);
     872:	f7ff ff85 	bl	780 <boot_write_status>
    if (bs->state == 1) {
     876:	7923      	ldrb	r3, [r4, #4]
     878:	2b01      	cmp	r3, #1
     87a:	d125      	bne.n	8c8 <boot_copy_image+0xd0>
        rc = boot_erase_sector(FLASH_AREA_IMAGE_1, img_off, sz);
     87c:	002a      	movs	r2, r5
     87e:	0039      	movs	r1, r7
     880:	2002      	movs	r0, #2
     882:	f7ff ff3b 	bl	6fc <boot_erase_sector>
        if (rc != 0) {
     886:	2800      	cmp	r0, #0
     888:	d137      	bne.n	8fa <boot_copy_image+0x102>
        if (boot_data.imgs[0].sectors[idx].fa_off + sz >=
     88a:	4b1d      	ldr	r3, [pc, #116]	; (900 <boot_copy_image+0x108>)
     88c:	9a03      	ldr	r2, [sp, #12]
     88e:	6a19      	ldr	r1, [r3, #32]
     890:	0028      	movs	r0, r5
     892:	468c      	mov	ip, r1
            boot_data.imgs[1].sectors[0].fa_off) {
     894:	6c99      	ldr	r1, [r3, #72]	; 0x48
        if (boot_data.imgs[0].sectors[idx].fa_off + sz >=
     896:	4462      	add	r2, ip
     898:	6852      	ldr	r2, [r2, #4]
     89a:	6849      	ldr	r1, [r1, #4]
     89c:	18aa      	adds	r2, r5, r2
     89e:	428a      	cmp	r2, r1
     8a0:	d304      	bcc.n	8ac <boot_copy_image+0xb4>
            copy_sz -= boot_trailer_sz(boot_data.write_sz);
     8a2:	335c      	adds	r3, #92	; 0x5c
     8a4:	7818      	ldrb	r0, [r3, #0]
     8a6:	f000 f9b1 	bl	c0c <boot_trailer_sz>
     8aa:	1a28      	subs	r0, r5, r0
        rc = boot_copy_sector(FLASH_AREA_IMAGE_0, FLASH_AREA_IMAGE_1,
     8ac:	9000      	str	r0, [sp, #0]
     8ae:	003b      	movs	r3, r7
     8b0:	003a      	movs	r2, r7
     8b2:	2102      	movs	r1, #2
     8b4:	2001      	movs	r0, #1
     8b6:	f7ff fee1 	bl	67c <boot_copy_sector>
        if (rc != 0) {
     8ba:	2800      	cmp	r0, #0
     8bc:	d11d      	bne.n	8fa <boot_copy_image+0x102>
        bs->state = 2;
     8be:	2302      	movs	r3, #2
        (void)boot_write_status(bs);
     8c0:	0020      	movs	r0, r4
        bs->state = 2;
     8c2:	7123      	strb	r3, [r4, #4]
        (void)boot_write_status(bs);
     8c4:	f7ff ff5c 	bl	780 <boot_write_status>
    if (bs->state == 2) {
     8c8:	7923      	ldrb	r3, [r4, #4]
     8ca:	2b02      	cmp	r3, #2
     8cc:	d115      	bne.n	8fa <boot_copy_image+0x102>
        rc = boot_erase_sector(FLASH_AREA_IMAGE_0, img_off, sz);
     8ce:	002a      	movs	r2, r5
     8d0:	0039      	movs	r1, r7
     8d2:	2001      	movs	r0, #1
     8d4:	f7ff ff12 	bl	6fc <boot_erase_sector>
     8d8:	1e02      	subs	r2, r0, #0
        if (rc != 0) {
     8da:	d10e      	bne.n	8fa <boot_copy_image+0x102>
        rc = boot_copy_sector(FLASH_AREA_IMAGE_SCRATCH, FLASH_AREA_IMAGE_0,
     8dc:	9500      	str	r5, [sp, #0]
     8de:	003b      	movs	r3, r7
     8e0:	2101      	movs	r1, #1
     8e2:	2003      	movs	r0, #3
     8e4:	f7ff feca 	bl	67c <boot_copy_sector>
        if (rc != 0) {
     8e8:	2800      	cmp	r0, #0
     8ea:	d106      	bne.n	8fa <boot_copy_image+0x102>
        bs->idx++;
     8ec:	6823      	ldr	r3, [r4, #0]
        bs->state = 0;
     8ee:	7120      	strb	r0, [r4, #4]
        bs->idx++;
     8f0:	3301      	adds	r3, #1
     8f2:	6023      	str	r3, [r4, #0]
        (void)boot_write_status(bs);
     8f4:	0020      	movs	r0, r4
     8f6:	f7ff ff43 	bl	780 <boot_write_status>
        swap_idx++;
     8fa:	9b02      	ldr	r3, [sp, #8]
     8fc:	3301      	adds	r3, #1
     8fe:	e782      	b.n	806 <boot_copy_image+0xe>
     900:	2000011c 	.word	0x2000011c

00000904 <boot_go>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
     904:	b5f0      	push	{r4, r5, r6, r7, lr}
    num_sectors_slot0 = BOOT_MAX_IMG_SECTORS;
     906:	2578      	movs	r5, #120	; 0x78
     * necessary because the gcc option "-fdata-sections" doesn't seem to have
     * any effect in older gcc versions (e.g., 4.8.4).
     */
    static struct flash_area slot0_sectors[BOOT_MAX_IMG_SECTORS];
    static struct flash_area slot1_sectors[BOOT_MAX_IMG_SECTORS];
    boot_data.imgs[0].sectors = slot0_sectors;
     908:	4cad      	ldr	r4, [pc, #692]	; (bc0 <boot_go+0x2bc>)
     90a:	4aae      	ldr	r2, [pc, #696]	; (bc4 <boot_go+0x2c0>)
    boot_data.imgs[1].sectors = slot1_sectors;
     90c:	4bae      	ldr	r3, [pc, #696]	; (bc8 <boot_go+0x2c4>)
{
     90e:	b091      	sub	sp, #68	; 0x44
     910:	9007      	str	r0, [sp, #28]
    boot_data.imgs[0].sectors = slot0_sectors;
     912:	6222      	str	r2, [r4, #32]
    boot_data.imgs[1].sectors = slot1_sectors;
     914:	64a3      	str	r3, [r4, #72]	; 0x48
    rc = flash_area_to_sectors(FLASH_AREA_IMAGE_0, &num_sectors_slot0,
     916:	a90d      	add	r1, sp, #52	; 0x34
     918:	2001      	movs	r0, #1
    num_sectors_slot0 = BOOT_MAX_IMG_SECTORS;
     91a:	950d      	str	r5, [sp, #52]	; 0x34
    rc = flash_area_to_sectors(FLASH_AREA_IMAGE_0, &num_sectors_slot0,
     91c:	f002 fc5b 	bl	31d6 <flash_area_to_sectors>
    if (rc != 0) {
     920:	2800      	cmp	r0, #0
     922:	d002      	beq.n	92a <boot_go+0x26>
     924:	2301      	movs	r3, #1
     926:	9306      	str	r3, [sp, #24]
     928:	e0ad      	b.n	a86 <boot_go+0x182>
    boot_data.imgs[0].num_sectors = num_sectors_slot0;
     92a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    rc = flash_area_to_sectors(FLASH_AREA_IMAGE_1, &num_sectors_slot1,
     92c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    boot_data.imgs[0].num_sectors = num_sectors_slot0;
     92e:	6263      	str	r3, [r4, #36]	; 0x24
    rc = flash_area_to_sectors(FLASH_AREA_IMAGE_1, &num_sectors_slot1,
     930:	a90e      	add	r1, sp, #56	; 0x38
     932:	2002      	movs	r0, #2
    num_sectors_slot1 = BOOT_MAX_IMG_SECTORS;
     934:	950e      	str	r5, [sp, #56]	; 0x38
    rc = flash_area_to_sectors(FLASH_AREA_IMAGE_1, &num_sectors_slot1,
     936:	f002 fc4e 	bl	31d6 <flash_area_to_sectors>
    if (rc != 0) {
     93a:	2800      	cmp	r0, #0
     93c:	d1f2      	bne.n	924 <boot_go+0x20>
    boot_data.imgs[1].num_sectors = num_sectors_slot1;
     93e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &scratch);
     940:	ad0c      	add	r5, sp, #48	; 0x30
    boot_data.imgs[1].num_sectors = num_sectors_slot1;
     942:	64e3      	str	r3, [r4, #76]	; 0x4c
    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &scratch);
     944:	0029      	movs	r1, r5
     946:	3003      	adds	r0, #3
     948:	f002 fc24 	bl	3194 <flash_area_open>
    if (rc != 0) {
     94c:	2800      	cmp	r0, #0
     94e:	d1e9      	bne.n	924 <boot_go+0x20>
    boot_data.scratch_sector = *scratch;
     950:	0023      	movs	r3, r4
     952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     954:	3350      	adds	r3, #80	; 0x50
     956:	ca43      	ldmia	r2!, {r0, r1, r6}
     958:	c343      	stmia	r3!, {r0, r1, r6}
    elem_sz = hal_flash_align(boot_data.imgs[0].sectors[0].fa_device_id);
     95a:	6a23      	ldr	r3, [r4, #32]
     95c:	7858      	ldrb	r0, [r3, #1]
     95e:	f000 fd9a 	bl	1496 <hal_flash_align>
    align = hal_flash_align(boot_data.scratch_sector.fa_device_id);
     962:	0023      	movs	r3, r4
     964:	3351      	adds	r3, #81	; 0x51
    elem_sz = hal_flash_align(boot_data.imgs[0].sectors[0].fa_device_id);
     966:	0006      	movs	r6, r0
    align = hal_flash_align(boot_data.scratch_sector.fa_device_id);
     968:	7818      	ldrb	r0, [r3, #0]
     96a:	f000 fd94 	bl	1496 <hal_flash_align>
    boot_data.write_sz = boot_write_sz();
     96e:	1c33      	adds	r3, r6, #0
     970:	4286      	cmp	r6, r0
     972:	d200      	bcs.n	976 <boot_go+0x72>
     974:	1c03      	adds	r3, r0, #0
     976:	0022      	movs	r2, r4
     978:	325c      	adds	r2, #92	; 0x5c
     97a:	7013      	strb	r3, [r2, #0]
    if (rc != 0) {
        return rc;
    }

    /* Attempt to read an image header from each slot. */
    rc = boot_read_image_headers();
     97c:	f7ff fe56 	bl	62c <boot_read_image_headers>
     980:	9006      	str	r0, [sp, #24]
    if (rc != 0) {
     982:	2800      	cmp	r0, #0
     984:	d000      	beq.n	988 <boot_go+0x84>
     986:	e07e      	b.n	a86 <boot_go+0x182>
    if (boot_data.imgs[0].num_sectors != boot_data.imgs[1].num_sectors) {
     988:	6a61      	ldr	r1, [r4, #36]	; 0x24
     98a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        rc = boot_validate_slot(0);
        if (rc != 0) {
            return BOOT_EBADIMAGE;
        }
#endif
        slot = 0;
     98c:	9005      	str	r0, [sp, #20]
    if (boot_data.imgs[0].num_sectors != boot_data.imgs[1].num_sectors) {
     98e:	4299      	cmp	r1, r3
     990:	d16b      	bne.n	a6a <boot_go+0x166>
        sector1 = boot_data.imgs[1].sectors + i;
     992:	2308      	movs	r3, #8
     994:	6a26      	ldr	r6, [r4, #32]
     996:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    for (i = 0; i < boot_data.imgs[0].num_sectors; i++) {
     998:	9a06      	ldr	r2, [sp, #24]
     99a:	4291      	cmp	r1, r2
     99c:	dc3a      	bgt.n	a14 <boot_go+0x110>
    memset(bs, 0, sizeof *bs);
     99e:	2100      	movs	r1, #0
     9a0:	2208      	movs	r2, #8
     9a2:	a80e      	add	r0, sp, #56	; 0x38
     9a4:	f002 fbe6 	bl	3174 <memset>
    rc = boot_read_swap_state_img(0, &state_slot0);
     9a8:	0029      	movs	r1, r5
     9aa:	2000      	movs	r0, #0
     9ac:	f000 f98d 	bl	cca <boot_read_swap_state_img>
    assert(rc == 0);
     9b0:	2800      	cmp	r0, #0
     9b2:	d129      	bne.n	a08 <boot_go+0x104>
    rc = boot_read_swap_state_img(1, &state_slot1);
     9b4:	a90d      	add	r1, sp, #52	; 0x34
     9b6:	2001      	movs	r0, #1
     9b8:	f000 f987 	bl	cca <boot_read_swap_state_img>
    assert(rc == 0);
     9bc:	2800      	cmp	r0, #0
     9be:	d123      	bne.n	a08 <boot_go+0x104>
    rc = boot_read_swap_state_scratch(&state_scratch);
     9c0:	ac0b      	add	r4, sp, #44	; 0x2c
     9c2:	0020      	movs	r0, r4
     9c4:	f000 f96e 	bl	ca4 <boot_read_swap_state_scratch>
     9c8:	9005      	str	r0, [sp, #20]
    assert(rc == 0);
     9ca:	1e03      	subs	r3, r0, #0
     9cc:	d11c      	bne.n	a08 <boot_go+0x104>
             table->bst_magic_scratch   == state_scratch.magic) &&
     9ce:	7826      	ldrb	r6, [r4, #0]
             table->bst_magic_slot0     == state_slot0.magic)   &&
     9d0:	782f      	ldrb	r7, [r5, #0]
             table->bst_copy_done_slot0 == state_slot0.copy_done)) {
     9d2:	786c      	ldrb	r4, [r5, #1]
     9d4:	4a7d      	ldr	r2, [pc, #500]	; (bcc <boot_go+0x2c8>)
        if ((table->bst_magic_slot0     == 0    ||
     9d6:	5c99      	ldrb	r1, [r3, r2]
     9d8:	18d5      	adds	r5, r2, r3
     9da:	2900      	cmp	r1, #0
     9dc:	d001      	beq.n	9e2 <boot_go+0xde>
     9de:	42b9      	cmp	r1, r7
     9e0:	d122      	bne.n	a28 <boot_go+0x124>
     9e2:	18d1      	adds	r1, r2, r3
            (table->bst_magic_scratch   == 0    ||
     9e4:	7848      	ldrb	r0, [r1, #1]
             table->bst_magic_slot0     == state_slot0.magic)   &&
     9e6:	2800      	cmp	r0, #0
     9e8:	d001      	beq.n	9ee <boot_go+0xea>
            (table->bst_magic_scratch   == 0    ||
     9ea:	42b0      	cmp	r0, r6
     9ec:	d11c      	bne.n	a28 <boot_go+0x124>
            (table->bst_copy_done_slot0 == 0    ||
     9ee:	7889      	ldrb	r1, [r1, #2]
             table->bst_magic_scratch   == state_scratch.magic) &&
     9f0:	2900      	cmp	r1, #0
     9f2:	d001      	beq.n	9f8 <boot_go+0xf4>
            (table->bst_copy_done_slot0 == 0    ||
     9f4:	42a1      	cmp	r1, r4
     9f6:	d117      	bne.n	a28 <boot_go+0x124>
            return table->bst_status_source;
     9f8:	78eb      	ldrb	r3, [r5, #3]
    switch (status_loc) {
     9fa:	2b01      	cmp	r3, #1
     9fc:	d046      	beq.n	a8c <boot_go+0x188>
     9fe:	2b00      	cmp	r3, #0
     a00:	d015      	beq.n	a2e <boot_go+0x12a>
        area_id = FLASH_AREA_IMAGE_0;
     a02:	2001      	movs	r0, #1
    switch (status_loc) {
     a04:	2b02      	cmp	r3, #2
     a06:	d042      	beq.n	a8e <boot_go+0x18a>
        assert(0);
     a08:	2300      	movs	r3, #0
     a0a:	001a      	movs	r2, r3
     a0c:	0019      	movs	r1, r3
     a0e:	0018      	movs	r0, r3
     a10:	f002 f9d4 	bl	2dbc <__assert_func>
     a14:	001c      	movs	r4, r3
        if (sector0->fa_size != sector1->fa_size) {
     a16:	58f7      	ldr	r7, [r6, r3]
     a18:	58c3      	ldr	r3, [r0, r3]
     a1a:	340c      	adds	r4, #12
     a1c:	429f      	cmp	r7, r3
     a1e:	d000      	beq.n	a22 <boot_go+0x11e>
     a20:	e0cc      	b.n	bbc <boot_go+0x2b8>
    for (i = 0; i < boot_data.imgs[0].num_sectors; i++) {
     a22:	3201      	adds	r2, #1
     a24:	0023      	movs	r3, r4
     a26:	e7b8      	b.n	99a <boot_go+0x96>
     a28:	3304      	adds	r3, #4
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
     a2a:	2b10      	cmp	r3, #16
     a2c:	d1d3      	bne.n	9d6 <boot_go+0xd2>
    if (bs.idx != 0 || bs.state != 0) {
     a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     a30:	ae0e      	add	r6, sp, #56	; 0x38
     a32:	2b00      	cmp	r3, #0
     a34:	d102      	bne.n	a3c <boot_go+0x138>
     a36:	7933      	ldrb	r3, [r6, #4]
     a38:	2b00      	cmp	r3, #0
     a3a:	d05f      	beq.n	afc <boot_go+0x1f8>
        rc = boot_copy_image(&bs);
     a3c:	0030      	movs	r0, r6
     a3e:	f7ff fedb 	bl	7f8 <boot_copy_image>
     a42:	1e04      	subs	r4, r0, #0
        assert(rc == 0);
     a44:	d1e0      	bne.n	a08 <boot_go+0x104>
    post_swap_type = boot_swap_type();
     a46:	f000 f99b 	bl	d80 <boot_swap_type>
        if (boot_swap_trans_table[i][1] == post_swap_type) {
     a4a:	2801      	cmp	r0, #1
     a4c:	d002      	beq.n	a54 <boot_go+0x150>
     a4e:	2804      	cmp	r0, #4
     a50:	d1da      	bne.n	a08 <boot_go+0x104>
    for (i = 0; i < BOOT_SWAP_TRANS_TABLE_SIZE; i++){
     a52:	3402      	adds	r4, #2
            return boot_swap_trans_table[i][0];
     a54:	4b5e      	ldr	r3, [pc, #376]	; (bd0 <boot_go+0x2cc>)
     a56:	0064      	lsls	r4, r4, #1
     a58:	5ce4      	ldrb	r4, [r4, r3]
    switch (swap_type) {
     a5a:	2c03      	cmp	r4, #3
     a5c:	dd00      	ble.n	a60 <boot_go+0x15c>
     a5e:	e099      	b.n	b94 <boot_go+0x290>
     a60:	2c02      	cmp	r4, #2
     a62:	db00      	blt.n	a66 <boot_go+0x162>
     a64:	e09b      	b.n	b9e <boot_go+0x29a>
     a66:	2c01      	cmp	r4, #1
     a68:	d1ce      	bne.n	a08 <boot_go+0x104>
        slot = 0;
        break;
    }

    /* Always boot from the primary slot. */
    rsp->br_flash_id = boot_data.imgs[0].sectors[0].fa_device_id;
     a6a:	4b55      	ldr	r3, [pc, #340]	; (bc0 <boot_go+0x2bc>)
     a6c:	9807      	ldr	r0, [sp, #28]
     a6e:	6a1a      	ldr	r2, [r3, #32]
     a70:	7851      	ldrb	r1, [r2, #1]
     a72:	7101      	strb	r1, [r0, #4]
    rsp->br_image_addr = boot_data.imgs[0].sectors[0].fa_off;
     a74:	6852      	ldr	r2, [r2, #4]
     a76:	9208      	str	r2, [sp, #32]
    rsp->br_hdr = &boot_data.imgs[slot].hdr;
     a78:	2228      	movs	r2, #40	; 0x28
    rsp->br_image_addr = boot_data.imgs[0].sectors[0].fa_off;
     a7a:	9908      	ldr	r1, [sp, #32]
     a7c:	6081      	str	r1, [r0, #8]
    rsp->br_hdr = &boot_data.imgs[slot].hdr;
     a7e:	9905      	ldr	r1, [sp, #20]
     a80:	434a      	muls	r2, r1
     a82:	189b      	adds	r3, r3, r2
     a84:	6003      	str	r3, [r0, #0]

    return 0;
}
     a86:	9806      	ldr	r0, [sp, #24]
     a88:	b011      	add	sp, #68	; 0x44
     a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        area_id = FLASH_AREA_IMAGE_SCRATCH;
     a8c:	2003      	movs	r0, #3
    rc = flash_area_open(area_id, &fap);
     a8e:	b2c0      	uxtb	r0, r0
     a90:	a90d      	add	r1, sp, #52	; 0x34
     a92:	f002 fb7f 	bl	3194 <flash_area_open>
     a96:	1e05      	subs	r5, r0, #0
    if (rc != 0) {
     a98:	d000      	beq.n	a9c <boot_go+0x198>
     a9a:	e743      	b.n	924 <boot_go+0x20>
    rc = boot_read_status_bytes(fap, bs);
     a9c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    for (i = 0; i < BOOT_STATUS_MAX_ENTRIES; i++) {
     a9e:	002c      	movs	r4, r5
    off = boot_status_off(fap);
     aa0:	0038      	movs	r0, r7
     aa2:	f000 f8cc 	bl	c3e <boot_status_off>
        rc = flash_area_read(fap, off + i * boot_data.write_sz, &status, 1);
     aa6:	4b46      	ldr	r3, [pc, #280]	; (bc0 <boot_go+0x2bc>)
    off = boot_status_off(fap);
     aa8:	9008      	str	r0, [sp, #32]
        rc = flash_area_read(fap, off + i * boot_data.write_sz, &status, 1);
     aaa:	335c      	adds	r3, #92	; 0x5c
     aac:	9309      	str	r3, [sp, #36]	; 0x24
     aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ab0:	ae0c      	add	r6, sp, #48	; 0x30
     ab2:	7819      	ldrb	r1, [r3, #0]
     ab4:	9b08      	ldr	r3, [sp, #32]
     ab6:	4361      	muls	r1, r4
     ab8:	0032      	movs	r2, r6
     aba:	18c9      	adds	r1, r1, r3
     abc:	0038      	movs	r0, r7
     abe:	2301      	movs	r3, #1
     ac0:	f002 fbc8 	bl	3254 <flash_area_read>
        if (rc != 0) {
     ac4:	2800      	cmp	r0, #0
     ac6:	d000      	beq.n	aca <boot_go+0x1c6>
     ac8:	e72c      	b.n	924 <boot_go+0x20>
        if (status == 0xff) {
     aca:	7833      	ldrb	r3, [r6, #0]
     acc:	2bff      	cmp	r3, #255	; 0xff
     ace:	d10e      	bne.n	aee <boot_go+0x1ea>
            if (found) {
     ad0:	2d00      	cmp	r5, #0
     ad2:	d00d      	beq.n	af0 <boot_go+0x1ec>
        i--;
     ad4:	3c01      	subs	r4, #1
        bs->idx = i / BOOT_STATUS_STATE_COUNT;
     ad6:	2103      	movs	r1, #3
     ad8:	0020      	movs	r0, r4
     ada:	f002 fd95 	bl	3608 <__divsi3>
        bs->state = i % BOOT_STATUS_STATE_COUNT;
     ade:	2103      	movs	r1, #3
        bs->idx = i / BOOT_STATUS_STATE_COUNT;
     ae0:	900e      	str	r0, [sp, #56]	; 0x38
        bs->state = i % BOOT_STATUS_STATE_COUNT;
     ae2:	0020      	movs	r0, r4
     ae4:	f002 fe76 	bl	37d4 <__aeabi_idivmod>
     ae8:	ab0e      	add	r3, sp, #56	; 0x38
     aea:	7119      	strb	r1, [r3, #4]
     aec:	e79f      	b.n	a2e <boot_go+0x12a>
            found = 1;
     aee:	2501      	movs	r5, #1
    for (i = 0; i < BOOT_STATUS_MAX_ENTRIES; i++) {
     af0:	3401      	adds	r4, #1
     af2:	2c80      	cmp	r4, #128	; 0x80
     af4:	d1db      	bne.n	aae <boot_go+0x1aa>
    if (found) {
     af6:	2d00      	cmp	r5, #0
     af8:	d099      	beq.n	a2e <boot_go+0x12a>
     afa:	e7eb      	b.n	ad4 <boot_go+0x1d0>
    swap_type = boot_swap_type();
     afc:	f000 f940 	bl	d80 <boot_swap_type>
     b00:	0004      	movs	r4, r0
    if (swap_type == BOOT_SWAP_TYPE_NONE) {
     b02:	2801      	cmp	r0, #1
     b04:	d0b1      	beq.n	a6a <boot_go+0x166>
    if (boot_data.imgs[slot].hdr.ih_magic == 0xffffffff ||
     b06:	4d2e      	ldr	r5, [pc, #184]	; (bc0 <boot_go+0x2bc>)
     b08:	6aab      	ldr	r3, [r5, #40]	; 0x28
     b0a:	3301      	adds	r3, #1
     b0c:	d029      	beq.n	b62 <boot_go+0x25e>
     b0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
     b10:	06db      	lsls	r3, r3, #27
     b12:	d426      	bmi.n	b62 <boot_go+0x25e>
    rc = flash_area_open(flash_area_id_from_image_slot(slot), &fap);
     b14:	2001      	movs	r0, #1
     b16:	f002 fbd2 	bl	32be <flash_area_id_from_image_slot>
     b1a:	a90d      	add	r1, sp, #52	; 0x34
     b1c:	b2c0      	uxtb	r0, r0
     b1e:	f002 fb39 	bl	3194 <flash_area_open>
    if (rc != 0) {
     b22:	2800      	cmp	r0, #0
     b24:	d11d      	bne.n	b62 <boot_go+0x25e>
    if (boot_data.imgs[slot].hdr.ih_magic != IMAGE_MAGIC ||
     b26:	4b2b      	ldr	r3, [pc, #172]	; (bd4 <boot_go+0x2d0>)
     b28:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     b2a:	429a      	cmp	r2, r3
     b2c:	d114      	bne.n	b58 <boot_go+0x254>
     b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    if (!tmpbuf) {
     b30:	4f29      	ldr	r7, [pc, #164]	; (bd8 <boot_go+0x2d4>)
     b32:	9308      	str	r3, [sp, #32]
     b34:	683b      	ldr	r3, [r7, #0]
     b36:	2b00      	cmp	r3, #0
     b38:	d016      	beq.n	b68 <boot_go+0x264>
    if (bootutil_img_validate(hdr, fap, tmpbuf, BOOT_TMPBUF_SZ,
     b3a:	2300      	movs	r3, #0
     b3c:	0028      	movs	r0, r5
     b3e:	4a26      	ldr	r2, [pc, #152]	; (bd8 <boot_go+0x2d4>)
     b40:	9302      	str	r3, [sp, #8]
     b42:	9301      	str	r3, [sp, #4]
     b44:	9300      	str	r3, [sp, #0]
     b46:	3301      	adds	r3, #1
     b48:	3028      	adds	r0, #40	; 0x28
     b4a:	33ff      	adds	r3, #255	; 0xff
     b4c:	6812      	ldr	r2, [r2, #0]
     b4e:	9908      	ldr	r1, [sp, #32]
     b50:	f000 f954 	bl	dfc <bootutil_img_validate>
     b54:	2800      	cmp	r0, #0
     b56:	d00f      	beq.n	b78 <boot_go+0x274>
            flash_area_erase(fap, 0, fap->fa_size);
     b58:	980d      	ldr	r0, [sp, #52]	; 0x34
     b5a:	2100      	movs	r1, #0
     b5c:	6882      	ldr	r2, [r0, #8]
     b5e:	f002 fb99 	bl	3294 <flash_area_erase>
        boot_finalize_revert_swap();
     b62:	f7ff fde2 	bl	72a <boot_finalize_revert_swap>
        break;
     b66:	e780      	b.n	a6a <boot_go+0x166>
        tmpbuf = malloc(BOOT_TMPBUF_SZ);
     b68:	2080      	movs	r0, #128	; 0x80
     b6a:	0040      	lsls	r0, r0, #1
     b6c:	f002 f992 	bl	2e94 <os_malloc>
     b70:	6038      	str	r0, [r7, #0]
        if (!tmpbuf) {
     b72:	2800      	cmp	r0, #0
     b74:	d1e1      	bne.n	b3a <boot_go+0x236>
     b76:	e7ef      	b.n	b58 <boot_go+0x254>
    flash_area_close(fap);
     b78:	980d      	ldr	r0, [sp, #52]	; 0x34
     b7a:	f002 fb2b 	bl	31d4 <flash_area_close>
        switch (swap_type) {
     b7e:	1ea3      	subs	r3, r4, #2
     b80:	2b02      	cmp	r3, #2
     b82:	d900      	bls.n	b86 <boot_go+0x282>
     b84:	e769      	b.n	a5a <boot_go+0x156>
            rc = boot_copy_image(&bs);
     b86:	0030      	movs	r0, r6
     b88:	f7ff fe36 	bl	7f8 <boot_copy_image>
            assert(rc == 0);
     b8c:	2800      	cmp	r0, #0
     b8e:	d100      	bne.n	b92 <boot_go+0x28e>
     b90:	e763      	b.n	a5a <boot_go+0x156>
     b92:	e739      	b.n	a08 <boot_go+0x104>
    switch (swap_type) {
     b94:	2c04      	cmp	r4, #4
     b96:	d00e      	beq.n	bb6 <boot_go+0x2b2>
     b98:	2cff      	cmp	r4, #255	; 0xff
     b9a:	d0e2      	beq.n	b62 <boot_go+0x25e>
     b9c:	e734      	b.n	a08 <boot_go+0x104>
    rc = flash_area_open(FLASH_AREA_IMAGE_0, &fap);
     b9e:	0031      	movs	r1, r6
     ba0:	2001      	movs	r0, #1
     ba2:	f002 faf7 	bl	3194 <flash_area_open>
    if (rc != 0) {
     ba6:	2800      	cmp	r0, #0
     ba8:	d102      	bne.n	bb0 <boot_go+0x2ac>
    rc = boot_write_copy_done(fap);
     baa:	980e      	ldr	r0, [sp, #56]	; 0x38
     bac:	f000 f8b2 	bl	d14 <boot_write_copy_done>
        slot = 1;
     bb0:	2301      	movs	r3, #1
        slot = 0;
     bb2:	9305      	str	r3, [sp, #20]
     bb4:	e759      	b.n	a6a <boot_go+0x166>
        boot_finalize_revert_swap();
     bb6:	f7ff fdb8 	bl	72a <boot_finalize_revert_swap>
     bba:	e7f9      	b.n	bb0 <boot_go+0x2ac>
        slot = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	e7f8      	b.n	bb2 <boot_go+0x2ae>
     bc0:	2000011c 	.word	0x2000011c
     bc4:	2000057c 	.word	0x2000057c
     bc8:	20000b1c 	.word	0x20000b1c
     bcc:	00003848 	.word	0x00003848
     bd0:	00003858 	.word	0x00003858
     bd4:	96f3b83c 	.word	0x96f3b83c
     bd8:	200010bc 	.word	0x200010bc

00000bdc <boot_magic_code>:
#define BOOT_SWAP_TABLES_COUNT \
    (sizeof boot_swap_tables / sizeof boot_swap_tables[0])

int
boot_magic_code(const uint32_t *magic)
{
     bdc:	b510      	push	{r4, lr}
    int i;

    if (memcmp(magic, boot_img_magic, sizeof boot_img_magic) == 0) {
     bde:	2210      	movs	r2, #16
     be0:	4909      	ldr	r1, [pc, #36]	; (c08 <boot_magic_code+0x2c>)
{
     be2:	0004      	movs	r4, r0
    if (memcmp(magic, boot_img_magic, sizeof boot_img_magic) == 0) {
     be4:	f002 fab0 	bl	3148 <memcmp>
        return BOOT_MAGIC_GOOD;
     be8:	2301      	movs	r3, #1
    if (memcmp(magic, boot_img_magic, sizeof boot_img_magic) == 0) {
     bea:	2800      	cmp	r0, #0
     bec:	d008      	beq.n	c00 <boot_magic_code+0x24>
     bee:	0023      	movs	r3, r4
     bf0:	3310      	adds	r3, #16
    }

    for (i = 0; i < 4; i++) {
        if (magic[i] == 0xffffffff) {
     bf2:	6822      	ldr	r2, [r4, #0]
     bf4:	3201      	adds	r2, #1
     bf6:	d005      	beq.n	c04 <boot_magic_code+0x28>
     bf8:	3404      	adds	r4, #4
    for (i = 0; i < 4; i++) {
     bfa:	429c      	cmp	r4, r3
     bfc:	d1f9      	bne.n	bf2 <boot_magic_code+0x16>
            return BOOT_MAGIC_UNSET;
        }
    }

    return BOOT_MAGIC_BAD;
     bfe:	2302      	movs	r3, #2
}
     c00:	0018      	movs	r0, r3
     c02:	bd10      	pop	{r4, pc}
            return BOOT_MAGIC_UNSET;
     c04:	2303      	movs	r3, #3
     c06:	e7fb      	b.n	c00 <boot_magic_code+0x24>
     c08:	00003860 	.word	0x00003860

00000c0c <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
}

uint32_t
boot_trailer_sz(uint8_t min_write_sz)
{
     c0c:	0002      	movs	r2, r0
    return sizeof boot_img_magic            +
           boot_status_sz(min_write_sz)     +
           min_write_sz * 2;
     c0e:	0043      	lsls	r3, r0, #1
    return BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
     c10:	20c0      	movs	r0, #192	; 0xc0
     c12:	0040      	lsls	r0, r0, #1
     c14:	4350      	muls	r0, r2
           boot_status_sz(min_write_sz)     +
     c16:	1818      	adds	r0, r3, r0
     c18:	3010      	adds	r0, #16
}
     c1a:	4770      	bx	lr

00000c1c <boot_magic_off>:

static uint32_t
boot_magic_off(const struct flash_area *fap)
{
     c1c:	b510      	push	{r4, lr}
     c1e:	0004      	movs	r4, r0
    uint32_t off_from_end;
    uint8_t elem_sz;

    elem_sz = flash_area_align(fap);
     c20:	f002 fb48 	bl	32b4 <flash_area_align>

    off_from_end = boot_trailer_sz(elem_sz);
     c24:	f7ff fff2 	bl	c0c <boot_trailer_sz>

    assert(off_from_end <= fap->fa_size);
     c28:	68a3      	ldr	r3, [r4, #8]
     c2a:	4283      	cmp	r3, r0
     c2c:	d205      	bcs.n	c3a <boot_magic_off+0x1e>
     c2e:	2300      	movs	r3, #0
     c30:	001a      	movs	r2, r3
     c32:	0019      	movs	r1, r3
     c34:	0018      	movs	r0, r3
     c36:	f002 f8c1 	bl	2dbc <__assert_func>
    return fap->fa_size - off_from_end;
     c3a:	1a18      	subs	r0, r3, r0
}
     c3c:	bd10      	pop	{r4, pc}

00000c3e <boot_status_off>:

uint32_t
boot_status_off(const struct flash_area *fap)
{
     c3e:	b510      	push	{r4, lr}
    return boot_magic_off(fap) + sizeof boot_img_magic;
     c40:	f7ff ffec 	bl	c1c <boot_magic_off>
     c44:	3010      	adds	r0, #16
}
     c46:	bd10      	pop	{r4, pc}

00000c48 <boot_read_swap_state>:
}

int
boot_read_swap_state(const struct flash_area *fap,
                     struct boot_swap_state *state)
{
     c48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     c4a:	0004      	movs	r4, r0
     c4c:	000d      	movs	r5, r1
    uint32_t magic[4];
    uint32_t off;
    int rc;

    off = boot_magic_off(fap);
     c4e:	f7ff ffe5 	bl	c1c <boot_magic_off>
    rc = flash_area_read(fap, off, magic, sizeof magic);
     c52:	2310      	movs	r3, #16
    off = boot_magic_off(fap);
     c54:	0001      	movs	r1, r0
    rc = flash_area_read(fap, off, magic, sizeof magic);
     c56:	466a      	mov	r2, sp
     c58:	0020      	movs	r0, r4
     c5a:	f002 fafb 	bl	3254 <flash_area_read>
    if (rc != 0) {
     c5e:	2800      	cmp	r0, #0
     c60:	d002      	beq.n	c68 <boot_read_swap_state+0x20>
        return BOOT_EFLASH;
     c62:	2001      	movs	r0, #1
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
     c64:	b004      	add	sp, #16
     c66:	bd70      	pop	{r4, r5, r6, pc}
    state->magic = boot_magic_code(magic);
     c68:	4668      	mov	r0, sp
     c6a:	f7ff ffb7 	bl	bdc <boot_magic_code>
     c6e:	7028      	strb	r0, [r5, #0]
    return fap->fa_size - flash_area_align(fap) * 2;
     c70:	0020      	movs	r0, r4
     c72:	68a6      	ldr	r6, [r4, #8]
     c74:	f002 fb1e 	bl	32b4 <flash_area_align>
     c78:	0040      	lsls	r0, r0, #1
     c7a:	1a31      	subs	r1, r6, r0
    rc = flash_area_read(fap, off, &state->copy_done, 1);
     c7c:	1c6a      	adds	r2, r5, #1
     c7e:	2301      	movs	r3, #1
     c80:	0020      	movs	r0, r4
     c82:	f002 fae7 	bl	3254 <flash_area_read>
    if (rc != 0) {
     c86:	2800      	cmp	r0, #0
     c88:	d1eb      	bne.n	c62 <boot_read_swap_state+0x1a>
    return fap->fa_size - flash_area_align(fap);
     c8a:	0020      	movs	r0, r4
     c8c:	68a6      	ldr	r6, [r4, #8]
     c8e:	f002 fb11 	bl	32b4 <flash_area_align>
    rc = flash_area_read(fap, off, &state->image_ok, 1);
     c92:	2301      	movs	r3, #1
    return fap->fa_size - flash_area_align(fap);
     c94:	1a31      	subs	r1, r6, r0
    rc = flash_area_read(fap, off, &state->image_ok, 1);
     c96:	1caa      	adds	r2, r5, #2
     c98:	0020      	movs	r0, r4
     c9a:	f002 fadb 	bl	3254 <flash_area_read>
        return BOOT_EFLASH;
     c9e:	1e43      	subs	r3, r0, #1
     ca0:	4198      	sbcs	r0, r3
     ca2:	e7df      	b.n	c64 <boot_read_swap_state+0x1c>

00000ca4 <boot_read_swap_state_scratch>:
/**
 * Reads the image trailer from the scratch area.
 */
int
boot_read_swap_state_scratch(struct boot_swap_state *state)
{
     ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
     ca6:	0005      	movs	r5, r0
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap);
     ca8:	a901      	add	r1, sp, #4
     caa:	2003      	movs	r0, #3
     cac:	f002 fa72 	bl	3194 <flash_area_open>
    if (rc) {
        rc = BOOT_EFLASH;
     cb0:	2401      	movs	r4, #1
    if (rc) {
     cb2:	2800      	cmp	r0, #0
     cb4:	d104      	bne.n	cc0 <boot_read_swap_state_scratch+0x1c>
        goto done;
    }

    rc = boot_read_swap_state(fap, state);
     cb6:	0029      	movs	r1, r5
     cb8:	9801      	ldr	r0, [sp, #4]
     cba:	f7ff ffc5 	bl	c48 <boot_read_swap_state>
     cbe:	0004      	movs	r4, r0
    }

    rc = 0;

done:
    flash_area_close(fap);
     cc0:	9801      	ldr	r0, [sp, #4]
     cc2:	f002 fa87 	bl	31d4 <flash_area_close>
    return rc;
}
     cc6:	0020      	movs	r0, r4
     cc8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00000cca <boot_read_swap_state_img>:
/**
 * Reads the image trailer from a given image slot.
 */
int
boot_read_swap_state_img(int slot, struct boot_swap_state *state)
{
     cca:	b537      	push	{r0, r1, r2, r4, r5, lr}
     ccc:	000d      	movs	r5, r1
    const struct flash_area *fap;
    int area_id;
    int rc;

    area_id = flash_area_id_from_image_slot(slot);
     cce:	f002 faf6 	bl	32be <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fap);
     cd2:	a901      	add	r1, sp, #4
     cd4:	b2c0      	uxtb	r0, r0
     cd6:	f002 fa5d 	bl	3194 <flash_area_open>
    if (rc != 0) {
        rc = BOOT_EFLASH;
     cda:	2401      	movs	r4, #1
    if (rc != 0) {
     cdc:	2800      	cmp	r0, #0
     cde:	d104      	bne.n	cea <boot_read_swap_state_img+0x20>
        goto done;
    }

    rc = boot_read_swap_state(fap, state);
     ce0:	0029      	movs	r1, r5
     ce2:	9801      	ldr	r0, [sp, #4]
     ce4:	f7ff ffb0 	bl	c48 <boot_read_swap_state>
     ce8:	0004      	movs	r4, r0
    }

    rc = 0;

done:
    flash_area_close(fap);
     cea:	9801      	ldr	r0, [sp, #4]
     cec:	f002 fa72 	bl	31d4 <flash_area_close>
    return rc;
}
     cf0:	0020      	movs	r0, r4
     cf2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00000cf4 <boot_write_magic>:

int
boot_write_magic(const struct flash_area *fap)
{
     cf4:	b510      	push	{r4, lr}
     cf6:	0004      	movs	r4, r0
    uint32_t off;
    int rc;

    off = boot_magic_off(fap);
     cf8:	f7ff ff90 	bl	c1c <boot_magic_off>

    rc = flash_area_write(fap, off, boot_img_magic, sizeof boot_img_magic);
     cfc:	2310      	movs	r3, #16
    off = boot_magic_off(fap);
     cfe:	0001      	movs	r1, r0
    rc = flash_area_write(fap, off, boot_img_magic, sizeof boot_img_magic);
     d00:	4a03      	ldr	r2, [pc, #12]	; (d10 <boot_write_magic+0x1c>)
     d02:	0020      	movs	r0, r4
     d04:	f002 fab6 	bl	3274 <flash_area_write>
    if (rc != 0) {
     d08:	1e43      	subs	r3, r0, #1
     d0a:	4198      	sbcs	r0, r3
        return BOOT_EFLASH;
    }

    return 0;
}
     d0c:	bd10      	pop	{r4, pc}
     d0e:	46c0      	nop			; (mov r8, r8)
     d10:	00003860 	.word	0x00003860

00000d14 <boot_write_copy_done>:

int
boot_write_copy_done(const struct flash_area *fap)
{
     d14:	b573      	push	{r0, r1, r4, r5, r6, lr}
     d16:	0004      	movs	r4, r0
    return fap->fa_size - flash_area_align(fap) * 2;
     d18:	6885      	ldr	r5, [r0, #8]
     d1a:	f002 facb 	bl	32b4 <flash_area_align>
     d1e:	0040      	lsls	r0, r0, #1
     d20:	1a2d      	subs	r5, r5, r0
    uint8_t buf[8];
    uint8_t align;

    off = boot_copy_done_off(fap);

    align = hal_flash_align(fap->fa_device_id);
     d22:	7860      	ldrb	r0, [r4, #1]
     d24:	f000 fbb7 	bl	1496 <hal_flash_align>
    memset(buf, 0xFF, 8);
     d28:	2208      	movs	r2, #8
    align = hal_flash_align(fap->fa_device_id);
     d2a:	0006      	movs	r6, r0
    memset(buf, 0xFF, 8);
     d2c:	21ff      	movs	r1, #255	; 0xff
     d2e:	4668      	mov	r0, sp
     d30:	f002 fa20 	bl	3174 <memset>
    buf[0] = 1;
     d34:	466a      	mov	r2, sp
     d36:	2301      	movs	r3, #1

    rc = flash_area_write(fap, off, buf, align);
     d38:	0029      	movs	r1, r5
    buf[0] = 1;
     d3a:	7013      	strb	r3, [r2, #0]
    rc = flash_area_write(fap, off, buf, align);
     d3c:	0020      	movs	r0, r4
     d3e:	0033      	movs	r3, r6
     d40:	f002 fa98 	bl	3274 <flash_area_write>
    if (rc != 0) {
     d44:	1e43      	subs	r3, r0, #1
     d46:	4198      	sbcs	r0, r3
        return BOOT_EFLASH;
    }

    return 0;
}
     d48:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

00000d4a <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
     d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
     d4c:	0004      	movs	r4, r0
    return fap->fa_size - flash_area_align(fap);
     d4e:	6885      	ldr	r5, [r0, #8]
     d50:	f002 fab0 	bl	32b4 <flash_area_align>
     d54:	1a2d      	subs	r5, r5, r0
    uint8_t buf[8];
    uint8_t align;

    off = boot_image_ok_off(fap);

    align = hal_flash_align(fap->fa_device_id);
     d56:	7860      	ldrb	r0, [r4, #1]
     d58:	f000 fb9d 	bl	1496 <hal_flash_align>
    memset(buf, 0xFF, 8);
     d5c:	2208      	movs	r2, #8
    align = hal_flash_align(fap->fa_device_id);
     d5e:	0006      	movs	r6, r0
    memset(buf, 0xFF, 8);
     d60:	21ff      	movs	r1, #255	; 0xff
     d62:	4668      	mov	r0, sp
     d64:	f002 fa06 	bl	3174 <memset>
    buf[0] = 1;
     d68:	466a      	mov	r2, sp
     d6a:	2301      	movs	r3, #1
    rc = flash_area_write(fap, off, buf, align);
     d6c:	0029      	movs	r1, r5
    buf[0] = 1;
     d6e:	7013      	strb	r3, [r2, #0]
    rc = flash_area_write(fap, off, buf, align);
     d70:	0020      	movs	r0, r4
     d72:	0033      	movs	r3, r6
     d74:	f002 fa7e 	bl	3274 <flash_area_write>
    if (rc != 0) {
     d78:	1e43      	subs	r3, r0, #1
     d7a:	4198      	sbcs	r0, r3
        return BOOT_EFLASH;
    }

    return 0;
}
     d7c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

00000d80 <boot_swap_type>:

int
boot_swap_type(void)
{
     d80:	b5f0      	push	{r4, r5, r6, r7, lr}
     d82:	b085      	sub	sp, #20
    struct boot_swap_state state_slot0;
    struct boot_swap_state state_slot1;
    int rc;
    int i;

    rc = boot_read_swap_state_img(0, &state_slot0);
     d84:	a902      	add	r1, sp, #8
     d86:	2000      	movs	r0, #0
     d88:	f7ff ff9f 	bl	cca <boot_read_swap_state_img>
    assert(rc == 0);
     d8c:	2800      	cmp	r0, #0
     d8e:	d005      	beq.n	d9c <boot_swap_type+0x1c>
     d90:	2300      	movs	r3, #0
     d92:	001a      	movs	r2, r3
     d94:	0019      	movs	r1, r3
     d96:	0018      	movs	r0, r3
     d98:	f002 f810 	bl	2dbc <__assert_func>

    rc = boot_read_swap_state_img(1, &state_slot1);
     d9c:	ac03      	add	r4, sp, #12
     d9e:	0021      	movs	r1, r4
     da0:	2001      	movs	r0, #1
     da2:	f7ff ff92 	bl	cca <boot_read_swap_state_img>
    assert(rc == 0);
     da6:	2800      	cmp	r0, #0
     da8:	d1f2      	bne.n	d90 <boot_swap_type+0x10>

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if ((table->bsw_magic_slot0     == 0    ||
             table->bsw_magic_slot0     == state_slot0.magic)           &&
     daa:	ab02      	add	r3, sp, #8
     dac:	781b      	ldrb	r3, [r3, #0]
            (table->bsw_magic_slot1     == 0    ||
             table->bsw_magic_slot1     == state_slot1.magic)           &&
     dae:	7825      	ldrb	r5, [r4, #0]
             table->bsw_magic_slot0     == state_slot0.magic)           &&
     db0:	9301      	str	r3, [sp, #4]
            (table->bsw_image_ok_slot0  == 0    ||
             table->bsw_image_ok_slot0  == state_slot0.image_ok)        &&
     db2:	ab02      	add	r3, sp, #8
     db4:	789e      	ldrb	r6, [r3, #2]
            (table->bsw_image_ok_slot1  == 0    ||
             table->bsw_image_ok_slot1  == state_slot1.image_ok)) {
     db6:	78a4      	ldrb	r4, [r4, #2]
     db8:	4b0f      	ldr	r3, [pc, #60]	; (df8 <boot_swap_type+0x78>)
        if ((table->bsw_magic_slot0     == 0    ||
     dba:	5cc2      	ldrb	r2, [r0, r3]
     dbc:	181f      	adds	r7, r3, r0
     dbe:	2a00      	cmp	r2, #0
     dc0:	d002      	beq.n	dc8 <boot_swap_type+0x48>
     dc2:	9901      	ldr	r1, [sp, #4]
     dc4:	428a      	cmp	r2, r1
     dc6:	d10f      	bne.n	de8 <boot_swap_type+0x68>
     dc8:	181a      	adds	r2, r3, r0
            (table->bsw_magic_slot1     == 0    ||
     dca:	7851      	ldrb	r1, [r2, #1]
             table->bsw_magic_slot0     == state_slot0.magic)           &&
     dcc:	2900      	cmp	r1, #0
     dce:	d001      	beq.n	dd4 <boot_swap_type+0x54>
            (table->bsw_magic_slot1     == 0    ||
     dd0:	42a9      	cmp	r1, r5
     dd2:	d109      	bne.n	de8 <boot_swap_type+0x68>
            (table->bsw_image_ok_slot0  == 0    ||
     dd4:	7891      	ldrb	r1, [r2, #2]
             table->bsw_magic_slot1     == state_slot1.magic)           &&
     dd6:	2900      	cmp	r1, #0
     dd8:	d001      	beq.n	dde <boot_swap_type+0x5e>
            (table->bsw_image_ok_slot0  == 0    ||
     dda:	42b1      	cmp	r1, r6
     ddc:	d104      	bne.n	de8 <boot_swap_type+0x68>
            (table->bsw_image_ok_slot1  == 0    ||
     dde:	78d2      	ldrb	r2, [r2, #3]
             table->bsw_image_ok_slot0  == state_slot0.image_ok)        &&
     de0:	2a00      	cmp	r2, #0
     de2:	d005      	beq.n	df0 <boot_swap_type+0x70>
            (table->bsw_image_ok_slot1  == 0    ||
     de4:	42a2      	cmp	r2, r4
     de6:	d003      	beq.n	df0 <boot_swap_type+0x70>
     de8:	3005      	adds	r0, #5
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
     dea:	2819      	cmp	r0, #25
     dec:	d1e5      	bne.n	dba <boot_swap_type+0x3a>
     dee:	e7cf      	b.n	d90 <boot_swap_type+0x10>

            return table->bsw_swap_type;
     df0:	7938      	ldrb	r0, [r7, #4]
        }
    }

    assert(0);
    return BOOT_SWAP_TYPE_NONE;
}
     df2:	b005      	add	sp, #20
     df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	00003870 	.word	0x00003870

00000dfc <bootutil_img_validate>:
 */
int
bootutil_img_validate(struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                      uint8_t *seed, int seed_len, uint8_t *out_hash)
{
     dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dfe:	b0cf      	sub	sp, #316	; 0x13c
     e00:	9303      	str	r3, [sp, #12]
#if MYNEWT_VAL(BOOTUTIL_SIGN_EC256)
    if ((hdr->ih_flags & IMAGE_F_ECDSA256_SHA256) == 0) {
        return -1;
    }
#endif
    if ((hdr->ih_flags & IMAGE_F_SHA256) == 0) {
     e02:	6903      	ldr	r3, [r0, #16]
{
     e04:	0005      	movs	r5, r0
     e06:	9101      	str	r1, [sp, #4]
     e08:	0017      	movs	r7, r2
    if ((hdr->ih_flags & IMAGE_F_SHA256) == 0) {
     e0a:	079b      	lsls	r3, r3, #30
     e0c:	d403      	bmi.n	e16 <bootutil_img_validate+0x1a>
        return -1;
     e0e:	2001      	movs	r0, #1
        }
        rc = flash_area_read(fap, sha_off, buf, sizeof hash);
        if (rc) {
            return rc;
        }
        if (memcmp(hash, buf, sizeof(hash))) {
     e10:	4240      	negs	r0, r0
    if (rc) {
        return -1;
    }
#endif
    return 0;
}
     e12:	b04f      	add	sp, #316	; 0x13c
     e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mbedtls_sha256_init(&sha256_ctx);
     e16:	a80e      	add	r0, sp, #56	; 0x38
     e18:	f000 f86f 	bl	efa <mbedtls_sha256_init>
    mbedtls_sha256_starts(&sha256_ctx, 0);
     e1c:	2100      	movs	r1, #0
     e1e:	a80e      	add	r0, sp, #56	; 0x38
     e20:	f000 f872 	bl	f08 <mbedtls_sha256_starts>
    if(seed && (seed_len > 0)) {
     e24:	9b54      	ldr	r3, [sp, #336]	; 0x150
     e26:	2b00      	cmp	r3, #0
     e28:	d007      	beq.n	e3a <bootutil_img_validate+0x3e>
     e2a:	9b55      	ldr	r3, [sp, #340]	; 0x154
     e2c:	2b00      	cmp	r3, #0
     e2e:	dd04      	ble.n	e3a <bootutil_img_validate+0x3e>
        mbedtls_sha256_update(&sha256_ctx, seed, seed_len);
     e30:	001a      	movs	r2, r3
     e32:	9954      	ldr	r1, [sp, #336]	; 0x150
     e34:	a80e      	add	r0, sp, #56	; 0x38
     e36:	f000 f99e 	bl	1176 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     e3a:	2400      	movs	r4, #0
    size = hdr->ih_img_size + hdr->ih_hdr_size;
     e3c:	892b      	ldrh	r3, [r5, #8]
     e3e:	68ea      	ldr	r2, [r5, #12]
     e40:	189b      	adds	r3, r3, r2
     e42:	9302      	str	r3, [sp, #8]
    for (off = 0; off < size; off += blk_sz) {
     e44:	9b02      	ldr	r3, [sp, #8]
     e46:	42a3      	cmp	r3, r4
     e48:	d82b      	bhi.n	ea2 <bootutil_img_validate+0xa6>
    mbedtls_sha256_finish(&sha256_ctx, hash_result);
     e4a:	a906      	add	r1, sp, #24
     e4c:	a80e      	add	r0, sp, #56	; 0x38
     e4e:	f000 f999 	bl	1184 <mbedtls_sha256_finish>
    if (out_hash) {
     e52:	9b56      	ldr	r3, [sp, #344]	; 0x158
     e54:	2b00      	cmp	r3, #0
     e56:	d004      	beq.n	e62 <bootutil_img_validate+0x66>
        memcpy(out_hash, hash, 32);
     e58:	2220      	movs	r2, #32
     e5a:	a906      	add	r1, sp, #24
     e5c:	0018      	movs	r0, r3
     e5e:	f002 f980 	bl	3162 <memcpy>
    uint32_t sha_off = 0;
     e62:	2600      	movs	r6, #0
    off = hdr->ih_img_size + hdr->ih_hdr_size;
     e64:	68eb      	ldr	r3, [r5, #12]
     e66:	892c      	ldrh	r4, [r5, #8]
     e68:	18e4      	adds	r4, r4, r3
    size = off + hdr->ih_tlv_size;
     e6a:	88ab      	ldrh	r3, [r5, #4]
     e6c:	191b      	adds	r3, r3, r4
     e6e:	9302      	str	r3, [sp, #8]
    for (; off < size; off += sizeof(tlv) + tlv.it_len) {
     e70:	9b02      	ldr	r3, [sp, #8]
     e72:	429c      	cmp	r4, r3
     e74:	d32c      	bcc.n	ed0 <bootutil_img_validate+0xd4>
    if (hdr->ih_flags & IMAGE_F_SHA256) {
     e76:	692b      	ldr	r3, [r5, #16]
    return 0;
     e78:	2000      	movs	r0, #0
    if (hdr->ih_flags & IMAGE_F_SHA256) {
     e7a:	079b      	lsls	r3, r3, #30
     e7c:	d5c9      	bpl.n	e12 <bootutil_img_validate+0x16>
        if (!sha_off) {
     e7e:	4286      	cmp	r6, r0
     e80:	d0c5      	beq.n	e0e <bootutil_img_validate+0x12>
        rc = flash_area_read(fap, sha_off, buf, sizeof hash);
     e82:	2320      	movs	r3, #32
     e84:	aa0e      	add	r2, sp, #56	; 0x38
     e86:	0031      	movs	r1, r6
     e88:	9801      	ldr	r0, [sp, #4]
     e8a:	f002 f9e3 	bl	3254 <flash_area_read>
        if (rc) {
     e8e:	2800      	cmp	r0, #0
     e90:	d1bf      	bne.n	e12 <bootutil_img_validate+0x16>
        if (memcmp(hash, buf, sizeof(hash))) {
     e92:	2220      	movs	r2, #32
     e94:	a90e      	add	r1, sp, #56	; 0x38
     e96:	a806      	add	r0, sp, #24
     e98:	f002 f956 	bl	3148 <memcmp>
     e9c:	1e43      	subs	r3, r0, #1
     e9e:	4198      	sbcs	r0, r3
     ea0:	e7b6      	b.n	e10 <bootutil_img_validate+0x14>
        hal_watchdog_tickle();
     ea2:	f000 ffcf 	bl	1e44 <hal_watchdog_tickle>
        blk_sz = size - off;
     ea6:	9b02      	ldr	r3, [sp, #8]
     ea8:	9e03      	ldr	r6, [sp, #12]
     eaa:	1b1b      	subs	r3, r3, r4
     eac:	429e      	cmp	r6, r3
     eae:	d900      	bls.n	eb2 <bootutil_img_validate+0xb6>
     eb0:	001e      	movs	r6, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     eb2:	0033      	movs	r3, r6
     eb4:	003a      	movs	r2, r7
     eb6:	0021      	movs	r1, r4
     eb8:	9801      	ldr	r0, [sp, #4]
     eba:	f002 f9cb 	bl	3254 <flash_area_read>
        if (rc) {
     ebe:	2800      	cmp	r0, #0
     ec0:	d1a7      	bne.n	e12 <bootutil_img_validate+0x16>
        mbedtls_sha256_update(&sha256_ctx, tmp_buf, blk_sz);
     ec2:	0032      	movs	r2, r6
     ec4:	0039      	movs	r1, r7
     ec6:	a80e      	add	r0, sp, #56	; 0x38
     ec8:	f000 f955 	bl	1176 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     ecc:	19a4      	adds	r4, r4, r6
     ece:	e7b9      	b.n	e44 <bootutil_img_validate+0x48>
        rc = flash_area_read(fap, off, &tlv, sizeof tlv);
     ed0:	af05      	add	r7, sp, #20
     ed2:	2304      	movs	r3, #4
     ed4:	003a      	movs	r2, r7
     ed6:	0021      	movs	r1, r4
     ed8:	9801      	ldr	r0, [sp, #4]
     eda:	f002 f9bb 	bl	3254 <flash_area_read>
        if (rc) {
     ede:	2800      	cmp	r0, #0
     ee0:	d000      	beq.n	ee4 <bootutil_img_validate+0xe8>
     ee2:	e796      	b.n	e12 <bootutil_img_validate+0x16>
        if (tlv.it_type == IMAGE_TLV_SHA256) {
     ee4:	783a      	ldrb	r2, [r7, #0]
     ee6:	887b      	ldrh	r3, [r7, #2]
     ee8:	2a01      	cmp	r2, #1
     eea:	d103      	bne.n	ef4 <bootutil_img_validate+0xf8>
            if (tlv.it_len != sizeof(hash)) {
     eec:	2b20      	cmp	r3, #32
     eee:	d000      	beq.n	ef2 <bootutil_img_validate+0xf6>
     ef0:	e78d      	b.n	e0e <bootutil_img_validate+0x12>
            sha_off = off + sizeof(tlv);
     ef2:	1d26      	adds	r6, r4, #4
    for (; off < size; off += sizeof(tlv) + tlv.it_len) {
     ef4:	3304      	adds	r3, #4
     ef6:	18e4      	adds	r4, r4, r3
     ef8:	e7ba      	b.n	e70 <bootutil_img_validate+0x74>

00000efa <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
     efa:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
     efc:	226c      	movs	r2, #108	; 0x6c
     efe:	2100      	movs	r1, #0
     f00:	f002 f938 	bl	3174 <memset>
}
     f04:	bd10      	pop	{r4, pc}
	...

00000f08 <mbedtls_sha256_starts>:
/*
 * SHA-256 context setup
 */
void mbedtls_sha256_starts( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
     f08:	2300      	movs	r3, #0
     f0a:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
     f0c:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
     f0e:	4299      	cmp	r1, r3
     f10:	d111      	bne.n	f36 <mbedtls_sha256_starts+0x2e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
     f12:	4b11      	ldr	r3, [pc, #68]	; (f58 <mbedtls_sha256_starts+0x50>)
     f14:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
     f16:	4b11      	ldr	r3, [pc, #68]	; (f5c <mbedtls_sha256_starts+0x54>)
     f18:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
     f1a:	4b11      	ldr	r3, [pc, #68]	; (f60 <mbedtls_sha256_starts+0x58>)
     f1c:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
     f1e:	4b11      	ldr	r3, [pc, #68]	; (f64 <mbedtls_sha256_starts+0x5c>)
     f20:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
     f22:	4b11      	ldr	r3, [pc, #68]	; (f68 <mbedtls_sha256_starts+0x60>)
     f24:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
     f26:	4b11      	ldr	r3, [pc, #68]	; (f6c <mbedtls_sha256_starts+0x64>)
     f28:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
     f2a:	4b11      	ldr	r3, [pc, #68]	; (f70 <mbedtls_sha256_starts+0x68>)
     f2c:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
     f2e:	4b11      	ldr	r3, [pc, #68]	; (f74 <mbedtls_sha256_starts+0x6c>)
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
     f30:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
     f32:	6681      	str	r1, [r0, #104]	; 0x68
}
     f34:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
     f36:	4b10      	ldr	r3, [pc, #64]	; (f78 <mbedtls_sha256_starts+0x70>)
     f38:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
     f3a:	4b10      	ldr	r3, [pc, #64]	; (f7c <mbedtls_sha256_starts+0x74>)
     f3c:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
     f3e:	4b10      	ldr	r3, [pc, #64]	; (f80 <mbedtls_sha256_starts+0x78>)
     f40:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
     f42:	4b10      	ldr	r3, [pc, #64]	; (f84 <mbedtls_sha256_starts+0x7c>)
     f44:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
     f46:	4b10      	ldr	r3, [pc, #64]	; (f88 <mbedtls_sha256_starts+0x80>)
     f48:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
     f4a:	4b10      	ldr	r3, [pc, #64]	; (f8c <mbedtls_sha256_starts+0x84>)
     f4c:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
     f4e:	4b10      	ldr	r3, [pc, #64]	; (f90 <mbedtls_sha256_starts+0x88>)
     f50:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
     f52:	4b10      	ldr	r3, [pc, #64]	; (f94 <mbedtls_sha256_starts+0x8c>)
     f54:	e7ec      	b.n	f30 <mbedtls_sha256_starts+0x28>
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	6a09e667 	.word	0x6a09e667
     f5c:	bb67ae85 	.word	0xbb67ae85
     f60:	3c6ef372 	.word	0x3c6ef372
     f64:	a54ff53a 	.word	0xa54ff53a
     f68:	510e527f 	.word	0x510e527f
     f6c:	9b05688c 	.word	0x9b05688c
     f70:	1f83d9ab 	.word	0x1f83d9ab
     f74:	5be0cd19 	.word	0x5be0cd19
     f78:	c1059ed8 	.word	0xc1059ed8
     f7c:	367cd507 	.word	0x367cd507
     f80:	3070dd17 	.word	0x3070dd17
     f84:	f70e5939 	.word	0xf70e5939
     f88:	ffc00b31 	.word	0xffc00b31
     f8c:	68581511 	.word	0x68581511
     f90:	64f98fa7 	.word	0x64f98fa7
     f94:	befa4fa4 	.word	0xbefa4fa4

00000f98 <mbedtls_sha256_process>:
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

void mbedtls_sha256_process( mbedtls_sha256_context *ctx, const unsigned char data[64] )
{
     f98:	2300      	movs	r3, #0
     f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
     f9c:	b0d1      	sub	sp, #324	; 0x144
     f9e:	9006      	str	r0, [sp, #24]
     fa0:	9107      	str	r1, [sp, #28]
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
     fa2:	9a06      	ldr	r2, [sp, #24]
     fa4:	18d2      	adds	r2, r2, r3
     fa6:	6892      	ldr	r2, [r2, #8]
     fa8:	9200      	str	r2, [sp, #0]
     faa:	9900      	ldr	r1, [sp, #0]
     fac:	aa08      	add	r2, sp, #32
     fae:	5099      	str	r1, [r3, r2]
     fb0:	3304      	adds	r3, #4
    for( i = 0; i < 8; i++ )
     fb2:	2b20      	cmp	r3, #32
     fb4:	d1f5      	bne.n	fa2 <mbedtls_sha256_process+0xa>
     fb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     fb8:	2120      	movs	r1, #32
     fba:	9305      	str	r3, [sp, #20]
     fbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     fbe:	4249      	negs	r1, r1
     fc0:	9301      	str	r3, [sp, #4]
     fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     fc4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
     fc6:	9302      	str	r3, [sp, #8]
     fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fca:	9808      	ldr	r0, [sp, #32]
     fcc:	469c      	mov	ip, r3
     fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     fd0:	1889      	adds	r1, r1, r2
     fd2:	9303      	str	r3, [sp, #12]
     fd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     fd6:	9304      	str	r3, [sp, #16]

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
     fd8:	2300      	movs	r3, #0
     fda:	9300      	str	r3, [sp, #0]
    {
        if( i < 16 )
     fdc:	9b00      	ldr	r3, [sp, #0]
     fde:	2b0f      	cmp	r3, #15
     fe0:	d900      	bls.n	fe4 <mbedtls_sha256_process+0x4c>
     fe2:	e06d      	b.n	10c0 <mbedtls_sha256_process+0x128>
     fe4:	9a07      	ldr	r2, [sp, #28]
     fe6:	009b      	lsls	r3, r3, #2
     fe8:	18d6      	adds	r6, r2, r3
            GET_UINT32_BE( W[i], data, 4 * i );
     fea:	5cd2      	ldrb	r2, [r2, r3]
     fec:	78f3      	ldrb	r3, [r6, #3]
     fee:	0612      	lsls	r2, r2, #24
     ff0:	431a      	orrs	r2, r3
     ff2:	7873      	ldrb	r3, [r6, #1]
     ff4:	041b      	lsls	r3, r3, #16
     ff6:	4313      	orrs	r3, r2
     ff8:	78b2      	ldrb	r2, [r6, #2]
     ffa:	0212      	lsls	r2, r2, #8
     ffc:	4313      	orrs	r3, r2
     ffe:	640b      	str	r3, [r1, #64]	; 0x40
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    1000:	2306      	movs	r3, #6
    1002:	0026      	movs	r6, r4
    1004:	0022      	movs	r2, r4
    1006:	41de      	rors	r6, r3
    1008:	3305      	adds	r3, #5
    100a:	41da      	rors	r2, r3
    100c:	2319      	movs	r3, #25
    100e:	4056      	eors	r6, r2
    1010:	0022      	movs	r2, r4
    1012:	41da      	rors	r2, r3
    1014:	9b00      	ldr	r3, [sp, #0]
    1016:	4056      	eors	r6, r2
    1018:	4a37      	ldr	r2, [pc, #220]	; (10f8 <mbedtls_sha256_process+0x160>)
    101a:	009b      	lsls	r3, r3, #2
    101c:	58d2      	ldr	r2, [r2, r3]
    101e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1020:	0005      	movs	r5, r0
    1022:	18d2      	adds	r2, r2, r3
    1024:	18b6      	adds	r6, r6, r2
    1026:	9b01      	ldr	r3, [sp, #4]
    1028:	9a02      	ldr	r2, [sp, #8]
    102a:	3104      	adds	r1, #4
    102c:	405a      	eors	r2, r3
    102e:	4022      	ands	r2, r4
    1030:	405a      	eors	r2, r3
    1032:	9b05      	ldr	r3, [sp, #20]
    1034:	18b2      	adds	r2, r6, r2
    1036:	18d2      	adds	r2, r2, r3
    1038:	9b04      	ldr	r3, [sp, #16]
    103a:	0006      	movs	r6, r0
    103c:	18d7      	adds	r7, r2, r3
    103e:	2302      	movs	r3, #2
    1040:	41de      	rors	r6, r3
    1042:	330b      	adds	r3, #11
    1044:	41dd      	rors	r5, r3
    1046:	002b      	movs	r3, r5
    1048:	0005      	movs	r5, r0
    104a:	4073      	eors	r3, r6
    104c:	2616      	movs	r6, #22
    104e:	41f5      	rors	r5, r6
    1050:	4666      	mov	r6, ip
    1052:	406b      	eors	r3, r5
    1054:	9d03      	ldr	r5, [sp, #12]
    1056:	4306      	orrs	r6, r0
    1058:	402e      	ands	r6, r5
    105a:	4665      	mov	r5, ip
    105c:	4005      	ands	r5, r0
    105e:	432e      	orrs	r6, r5
    1060:	199e      	adds	r6, r3, r6
    for( i = 0; i < 64; i++ )
    1062:	9b00      	ldr	r3, [sp, #0]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    1064:	18b6      	adds	r6, r6, r2
    for( i = 0; i < 64; i++ )
    1066:	3301      	adds	r3, #1
    1068:	9300      	str	r3, [sp, #0]
    106a:	9b01      	ldr	r3, [sp, #4]
    106c:	9305      	str	r3, [sp, #20]
    106e:	9b03      	ldr	r3, [sp, #12]
    1070:	9304      	str	r3, [sp, #16]
    1072:	9b00      	ldr	r3, [sp, #0]
    1074:	2b40      	cmp	r3, #64	; 0x40
    1076:	d11a      	bne.n	10ae <mbedtls_sha256_process+0x116>
    1078:	9b01      	ldr	r3, [sp, #4]
    107a:	970c      	str	r7, [sp, #48]	; 0x30
    107c:	930f      	str	r3, [sp, #60]	; 0x3c
    107e:	9b02      	ldr	r3, [sp, #8]
    1080:	940d      	str	r4, [sp, #52]	; 0x34
    1082:	930e      	str	r3, [sp, #56]	; 0x38
    1084:	4663      	mov	r3, ip
    1086:	930a      	str	r3, [sp, #40]	; 0x28
    1088:	9b03      	ldr	r3, [sp, #12]
    108a:	9608      	str	r6, [sp, #32]
    108c:	930b      	str	r3, [sp, #44]	; 0x2c
    108e:	2300      	movs	r3, #0
    1090:	9009      	str	r0, [sp, #36]	; 0x24
    1092:	9a06      	ldr	r2, [sp, #24]
    1094:	18d1      	adds	r1, r2, r3
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
    1096:	6888      	ldr	r0, [r1, #8]
    1098:	aa08      	add	r2, sp, #32
    109a:	4684      	mov	ip, r0
    109c:	58d2      	ldr	r2, [r2, r3]
    109e:	3304      	adds	r3, #4
    10a0:	9200      	str	r2, [sp, #0]
    10a2:	4462      	add	r2, ip
    10a4:	608a      	str	r2, [r1, #8]
    for( i = 0; i < 8; i++ )
    10a6:	2b20      	cmp	r3, #32
    10a8:	d1f3      	bne.n	1092 <mbedtls_sha256_process+0xfa>
}
    10aa:	b051      	add	sp, #324	; 0x144
    10ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10ae:	4663      	mov	r3, ip
    10b0:	9303      	str	r3, [sp, #12]
    10b2:	9b02      	ldr	r3, [sp, #8]
    10b4:	4684      	mov	ip, r0
    10b6:	9402      	str	r4, [sp, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    10b8:	0030      	movs	r0, r6
    10ba:	9301      	str	r3, [sp, #4]
    10bc:	003c      	movs	r4, r7
    10be:	e78d      	b.n	fdc <mbedtls_sha256_process+0x44>
            R( i );
    10c0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    10c2:	2511      	movs	r5, #17
    10c4:	001f      	movs	r7, r3
    10c6:	001e      	movs	r6, r3
    10c8:	41ef      	rors	r7, r5
    10ca:	3502      	adds	r5, #2
    10cc:	41ee      	rors	r6, r5
    10ce:	0a9b      	lsrs	r3, r3, #10
    10d0:	407e      	eors	r6, r7
    10d2:	684a      	ldr	r2, [r1, #4]
    10d4:	4073      	eors	r3, r6
    10d6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    10d8:	680e      	ldr	r6, [r1, #0]
    10da:	0017      	movs	r7, r2
    10dc:	19ae      	adds	r6, r5, r6
    10de:	2507      	movs	r5, #7
    10e0:	199b      	adds	r3, r3, r6
    10e2:	0016      	movs	r6, r2
    10e4:	41ef      	rors	r7, r5
    10e6:	350b      	adds	r5, #11
    10e8:	41ee      	rors	r6, r5
    10ea:	08d2      	lsrs	r2, r2, #3
    10ec:	407e      	eors	r6, r7
    10ee:	4056      	eors	r6, r2
    10f0:	199e      	adds	r6, r3, r6
    10f2:	640e      	str	r6, [r1, #64]	; 0x40
    10f4:	e784      	b.n	1000 <mbedtls_sha256_process+0x68>
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	0000388c 	.word	0x0000388c

000010fc <mbedtls_sha256_update.part.0>:
#endif /* !MBEDTLS_SHA256_PROCESS_ALT */

/*
 * SHA-256 process buffer
 */
void mbedtls_sha256_update( mbedtls_sha256_context *ctx, const unsigned char *input,
    10fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
    10fe:	263f      	movs	r6, #63	; 0x3f
    1100:	6803      	ldr	r3, [r0, #0]
void mbedtls_sha256_update( mbedtls_sha256_context *ctx, const unsigned char *input,
    1102:	0004      	movs	r4, r0
    left = ctx->total[0] & 0x3F;
    1104:	401e      	ands	r6, r3
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
    1106:	189b      	adds	r3, r3, r2
void mbedtls_sha256_update( mbedtls_sha256_context *ctx, const unsigned char *input,
    1108:	000f      	movs	r7, r1
    110a:	0015      	movs	r5, r2
    ctx->total[0] += (uint32_t) ilen;
    110c:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    110e:	429a      	cmp	r2, r3
    1110:	d902      	bls.n	1118 <mbedtls_sha256_update.part.0+0x1c>
        ctx->total[1]++;
    1112:	6843      	ldr	r3, [r0, #4]
    1114:	3301      	adds	r3, #1
    1116:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    1118:	2e00      	cmp	r6, #0
    111a:	d014      	beq.n	1146 <mbedtls_sha256_update.part.0+0x4a>
    fill = 64 - left;
    111c:	2340      	movs	r3, #64	; 0x40
    111e:	1b9b      	subs	r3, r3, r6
    1120:	9300      	str	r3, [sp, #0]
    if( left && ilen >= fill )
    1122:	42ab      	cmp	r3, r5
    1124:	d80f      	bhi.n	1146 <mbedtls_sha256_update.part.0+0x4a>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
    1126:	0023      	movs	r3, r4
    1128:	3328      	adds	r3, #40	; 0x28
    112a:	1998      	adds	r0, r3, r6
        mbedtls_sha256_process( ctx, ctx->buffer );
        input += fill;
        ilen  -= fill;
        left = 0;
    112c:	2600      	movs	r6, #0
        memcpy( (void *) (ctx->buffer + left), input, fill );
    112e:	0039      	movs	r1, r7
    1130:	9a00      	ldr	r2, [sp, #0]
    1132:	9301      	str	r3, [sp, #4]
    1134:	f002 f815 	bl	3162 <memcpy>
        mbedtls_sha256_process( ctx, ctx->buffer );
    1138:	9901      	ldr	r1, [sp, #4]
    113a:	0020      	movs	r0, r4
    113c:	f7ff ff2c 	bl	f98 <mbedtls_sha256_process>
        input += fill;
    1140:	9b00      	ldr	r3, [sp, #0]
    1142:	18ff      	adds	r7, r7, r3
        ilen  -= fill;
    1144:	1aed      	subs	r5, r5, r3
        left = 0;
    1146:	9500      	str	r5, [sp, #0]
    1148:	9b00      	ldr	r3, [sp, #0]
    114a:	1979      	adds	r1, r7, r5
    114c:	1ac9      	subs	r1, r1, r3
    }

    while( ilen >= 64 )
    114e:	2b3f      	cmp	r3, #63	; 0x3f
    1150:	d80a      	bhi.n	1168 <mbedtls_sha256_update.part.0+0x6c>
    1152:	09aa      	lsrs	r2, r5, #6
    1154:	0192      	lsls	r2, r2, #6
    1156:	18b9      	adds	r1, r7, r2
    1158:	1aaa      	subs	r2, r5, r2
        mbedtls_sha256_process( ctx, input );
        input += 64;
        ilen  -= 64;
    }

    if( ilen > 0 )
    115a:	d004      	beq.n	1166 <mbedtls_sha256_update.part.0+0x6a>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    115c:	0020      	movs	r0, r4
    115e:	3028      	adds	r0, #40	; 0x28
    1160:	1980      	adds	r0, r0, r6
    1162:	f001 fffe 	bl	3162 <memcpy>
}
    1166:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        mbedtls_sha256_process( ctx, input );
    1168:	0020      	movs	r0, r4
    116a:	f7ff ff15 	bl	f98 <mbedtls_sha256_process>
        ilen  -= 64;
    116e:	9b00      	ldr	r3, [sp, #0]
    1170:	3b40      	subs	r3, #64	; 0x40
    1172:	9300      	str	r3, [sp, #0]
    1174:	e7e8      	b.n	1148 <mbedtls_sha256_update.part.0+0x4c>

00001176 <mbedtls_sha256_update>:
{
    1176:	b510      	push	{r4, lr}
    if( ilen == 0 )
    1178:	2a00      	cmp	r2, #0
    117a:	d001      	beq.n	1180 <mbedtls_sha256_update+0xa>
    117c:	f7ff ffbe 	bl	10fc <mbedtls_sha256_update.part.0>
}
    1180:	bd10      	pop	{r4, pc}
	...

00001184 <mbedtls_sha256_finish>:

/*
 * SHA-256 final digest
 */
void mbedtls_sha256_finish( mbedtls_sha256_context *ctx, unsigned char output[32] )
{
    1184:	b573      	push	{r0, r1, r4, r5, r6, lr}

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, msglen, 0 );
    1186:	466e      	mov	r6, sp
    high = ( ctx->total[0] >> 29 )
    1188:	6802      	ldr	r2, [r0, #0]
         | ( ctx->total[1] <<  3 );
    118a:	6843      	ldr	r3, [r0, #4]
{
    118c:	000d      	movs	r5, r1
         | ( ctx->total[1] <<  3 );
    118e:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    1190:	0f51      	lsrs	r1, r2, #29
    1192:	430b      	orrs	r3, r1
{
    1194:	0004      	movs	r4, r0
    PUT_UINT32_BE( high, msglen, 0 );
    1196:	0e18      	lsrs	r0, r3, #24
    low  = ( ctx->total[0] <<  3 );
    1198:	00d1      	lsls	r1, r2, #3
    PUT_UINT32_BE( high, msglen, 0 );
    119a:	7030      	strb	r0, [r6, #0]
    119c:	0c18      	lsrs	r0, r3, #16
    119e:	7070      	strb	r0, [r6, #1]
    11a0:	70f3      	strb	r3, [r6, #3]
    11a2:	0a18      	lsrs	r0, r3, #8
    PUT_UINT32_BE( low,  msglen, 4 );
    11a4:	0e0b      	lsrs	r3, r1, #24
    11a6:	7133      	strb	r3, [r6, #4]
    11a8:	0c0b      	lsrs	r3, r1, #16
    11aa:	7173      	strb	r3, [r6, #5]
    11ac:	0a0b      	lsrs	r3, r1, #8
    11ae:	71b3      	strb	r3, [r6, #6]

    last = ctx->total[0] & 0x3F;
    11b0:	233f      	movs	r3, #63	; 0x3f
    PUT_UINT32_BE( high, msglen, 0 );
    11b2:	70b0      	strb	r0, [r6, #2]
    last = ctx->total[0] & 0x3F;
    11b4:	401a      	ands	r2, r3
    PUT_UINT32_BE( low,  msglen, 4 );
    11b6:	71f1      	strb	r1, [r6, #7]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
    11b8:	3b07      	subs	r3, #7
    11ba:	2a37      	cmp	r2, #55	; 0x37
    11bc:	d900      	bls.n	11c0 <mbedtls_sha256_finish+0x3c>
    11be:	2378      	movs	r3, #120	; 0x78
    11c0:	1a9a      	subs	r2, r3, r2

    mbedtls_sha256_update( ctx, sha256_padding, padn );
    11c2:	4932      	ldr	r1, [pc, #200]	; (128c <mbedtls_sha256_finish+0x108>)
    11c4:	0020      	movs	r0, r4
    11c6:	f7ff ffd6 	bl	1176 <mbedtls_sha256_update>
    11ca:	2208      	movs	r2, #8
    11cc:	4669      	mov	r1, sp
    11ce:	0020      	movs	r0, r4
    11d0:	f7ff ff94 	bl	10fc <mbedtls_sha256_update.part.0>
    mbedtls_sha256_update( ctx, msglen, 8 );

    PUT_UINT32_BE( ctx->state[0], output,  0 );
    11d4:	68a3      	ldr	r3, [r4, #8]
    11d6:	0e1b      	lsrs	r3, r3, #24
    11d8:	702b      	strb	r3, [r5, #0]
    11da:	68a3      	ldr	r3, [r4, #8]
    11dc:	0c1b      	lsrs	r3, r3, #16
    11de:	706b      	strb	r3, [r5, #1]
    11e0:	68a3      	ldr	r3, [r4, #8]
    11e2:	0a1b      	lsrs	r3, r3, #8
    11e4:	70ab      	strb	r3, [r5, #2]
    11e6:	68a3      	ldr	r3, [r4, #8]
    11e8:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    11ea:	68e3      	ldr	r3, [r4, #12]
    11ec:	0e1b      	lsrs	r3, r3, #24
    11ee:	712b      	strb	r3, [r5, #4]
    11f0:	68e3      	ldr	r3, [r4, #12]
    11f2:	0c1b      	lsrs	r3, r3, #16
    11f4:	716b      	strb	r3, [r5, #5]
    11f6:	68e3      	ldr	r3, [r4, #12]
    11f8:	0a1b      	lsrs	r3, r3, #8
    11fa:	71ab      	strb	r3, [r5, #6]
    11fc:	68e3      	ldr	r3, [r4, #12]
    11fe:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    1200:	6923      	ldr	r3, [r4, #16]
    1202:	0e1b      	lsrs	r3, r3, #24
    1204:	722b      	strb	r3, [r5, #8]
    1206:	6923      	ldr	r3, [r4, #16]
    1208:	0c1b      	lsrs	r3, r3, #16
    120a:	726b      	strb	r3, [r5, #9]
    120c:	6923      	ldr	r3, [r4, #16]
    120e:	0a1b      	lsrs	r3, r3, #8
    1210:	72ab      	strb	r3, [r5, #10]
    1212:	6923      	ldr	r3, [r4, #16]
    1214:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    1216:	6963      	ldr	r3, [r4, #20]
    1218:	0e1b      	lsrs	r3, r3, #24
    121a:	732b      	strb	r3, [r5, #12]
    121c:	6963      	ldr	r3, [r4, #20]
    121e:	0c1b      	lsrs	r3, r3, #16
    1220:	736b      	strb	r3, [r5, #13]
    1222:	6963      	ldr	r3, [r4, #20]
    1224:	0a1b      	lsrs	r3, r3, #8
    1226:	73ab      	strb	r3, [r5, #14]
    1228:	6963      	ldr	r3, [r4, #20]
    122a:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    122c:	69a3      	ldr	r3, [r4, #24]
    122e:	0e1b      	lsrs	r3, r3, #24
    1230:	742b      	strb	r3, [r5, #16]
    1232:	69a3      	ldr	r3, [r4, #24]
    1234:	0c1b      	lsrs	r3, r3, #16
    1236:	746b      	strb	r3, [r5, #17]
    1238:	69a3      	ldr	r3, [r4, #24]
    123a:	0a1b      	lsrs	r3, r3, #8
    123c:	74ab      	strb	r3, [r5, #18]
    123e:	69a3      	ldr	r3, [r4, #24]
    1240:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    1242:	69e3      	ldr	r3, [r4, #28]
    1244:	0e1b      	lsrs	r3, r3, #24
    1246:	752b      	strb	r3, [r5, #20]
    1248:	69e3      	ldr	r3, [r4, #28]
    124a:	0c1b      	lsrs	r3, r3, #16
    124c:	756b      	strb	r3, [r5, #21]
    124e:	69e3      	ldr	r3, [r4, #28]
    1250:	0a1b      	lsrs	r3, r3, #8
    1252:	75ab      	strb	r3, [r5, #22]
    1254:	69e3      	ldr	r3, [r4, #28]
    1256:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    1258:	6a23      	ldr	r3, [r4, #32]
    125a:	0e1b      	lsrs	r3, r3, #24
    125c:	762b      	strb	r3, [r5, #24]
    125e:	6a23      	ldr	r3, [r4, #32]
    1260:	0c1b      	lsrs	r3, r3, #16
    1262:	766b      	strb	r3, [r5, #25]
    1264:	6a23      	ldr	r3, [r4, #32]
    1266:	0a1b      	lsrs	r3, r3, #8
    1268:	76ab      	strb	r3, [r5, #26]
    126a:	6a23      	ldr	r3, [r4, #32]
    126c:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
    126e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    1270:	2b00      	cmp	r3, #0
    1272:	d10a      	bne.n	128a <mbedtls_sha256_finish+0x106>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    1274:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1276:	0e1b      	lsrs	r3, r3, #24
    1278:	772b      	strb	r3, [r5, #28]
    127a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    127c:	0c1b      	lsrs	r3, r3, #16
    127e:	776b      	strb	r3, [r5, #29]
    1280:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1282:	0a1b      	lsrs	r3, r3, #8
    1284:	77ab      	strb	r3, [r5, #30]
    1286:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1288:	77eb      	strb	r3, [r5, #31]
}
    128a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    128c:	0000398c 	.word	0x0000398c

00001290 <hal_bsp_flash_dev>:
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id != 0) {
        return NULL;
    1290:	2300      	movs	r3, #0
    if (id != 0) {
    1292:	4298      	cmp	r0, r3
    1294:	d100      	bne.n	1298 <hal_bsp_flash_dev+0x8>
    }

    return &samd21_flash_dev;
    1296:	4b01      	ldr	r3, [pc, #4]	; (129c <hal_bsp_flash_dev+0xc>)
}
    1298:	0018      	movs	r0, r3
    129a:	4770      	bx	lr
    129c:	200000b8 	.word	0x200000b8

000012a0 <hal_bsp_init>:
    return pri;
}

void
hal_bsp_init(void)
{
    12a0:	b510      	push	{r4, lr}
#if MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2)
    struct samd21_timer_cfg tmr_cfg;
#endif

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &hal_uart0, "uart0",
    12a2:	4b18      	ldr	r3, [pc, #96]	; (1304 <hal_bsp_init+0x64>)
{
    12a4:	b086      	sub	sp, #24
    rc = os_dev_create((struct os_dev *) &hal_uart0, "uart0",
    12a6:	9301      	str	r3, [sp, #4]
    12a8:	4b17      	ldr	r3, [pc, #92]	; (1308 <hal_bsp_init+0x68>)
    12aa:	2201      	movs	r2, #1
    12ac:	9300      	str	r3, [sp, #0]
    12ae:	4917      	ldr	r1, [pc, #92]	; (130c <hal_bsp_init+0x6c>)
    12b0:	2300      	movs	r3, #0
    12b2:	4817      	ldr	r0, [pc, #92]	; (1310 <hal_bsp_init+0x70>)
    12b4:	f001 fdb0 	bl	2e18 <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *)&uart_cfgs[0]);
    SYSINIT_PANIC_ASSERT(rc == 0);
    12b8:	2800      	cmp	r0, #0
    12ba:	d007      	beq.n	12cc <hal_bsp_init+0x2c>
    12bc:	2000      	movs	r0, #0
    12be:	4b15      	ldr	r3, [pc, #84]	; (1314 <hal_bsp_init+0x74>)
    12c0:	9000      	str	r0, [sp, #0]
    12c2:	681c      	ldr	r4, [r3, #0]
    12c4:	0002      	movs	r2, r0
    12c6:	0003      	movs	r3, r0
    12c8:	0001      	movs	r1, r0
    12ca:	47a0      	blx	r4
#endif

#if MYNEWT_VAL(TIMER_0)
    tmr_cfg.clkgen = GCLK_GENERATOR_2;
    12cc:	2302      	movs	r3, #2
    12ce:	a902      	add	r1, sp, #8
    12d0:	720b      	strb	r3, [r1, #8]
    tmr_cfg.src_clock = GCLK_SOURCE_OSC8M;
    12d2:	3304      	adds	r3, #4
    12d4:	700b      	strb	r3, [r1, #0]
    tmr_cfg.hwtimer = TC3;
    12d6:	4b10      	ldr	r3, [pc, #64]	; (1318 <hal_bsp_init+0x78>)
    tmr_cfg.irq_num = TC3_IRQn;
    rc = hal_timer_init(0, &tmr_cfg);
    12d8:	2000      	movs	r0, #0
    tmr_cfg.hwtimer = TC3;
    12da:	60cb      	str	r3, [r1, #12]
    tmr_cfg.irq_num = TC3_IRQn;
    12dc:	2312      	movs	r3, #18
    12de:	604b      	str	r3, [r1, #4]
    rc = hal_timer_init(0, &tmr_cfg);
    12e0:	f000 fafa 	bl	18d8 <hal_timer_init>
    assert(rc == 0);
    12e4:	2800      	cmp	r0, #0
    12e6:	d005      	beq.n	12f4 <hal_bsp_init+0x54>
    12e8:	2300      	movs	r3, #0
    12ea:	001a      	movs	r2, r3
    12ec:	0019      	movs	r1, r3
    12ee:	0018      	movs	r0, r3
    12f0:	f001 fd64 	bl	2dbc <__assert_func>

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    /*
     * Set cputime to count at 1 usec increments.
     */
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
    12f4:	4809      	ldr	r0, [pc, #36]	; (131c <hal_bsp_init+0x7c>)
    12f6:	f001 fd79 	bl	2dec <os_cputime_init>
    assert(rc == 0);
    12fa:	2800      	cmp	r0, #0
    12fc:	d1f4      	bne.n	12e8 <hal_bsp_init+0x48>

#if MYNEWT_VAL(I2C_5)
    rc = hal_i2c_init(5, &i2c_config);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    12fe:	b006      	add	sp, #24
    1300:	bd10      	pop	{r4, pc}
    1302:	46c0      	nop			; (mov r8, r8)
    1304:	000039d4 	.word	0x000039d4
    1308:	000013e1 	.word	0x000013e1
    130c:	000039cc 	.word	0x000039cc
    1310:	200010c0 	.word	0x200010c0
    1314:	200000f4 	.word	0x200000f4
    1318:	42002c00 	.word	0x42002c00
    131c:	000f4240 	.word	0x000f4240

00001320 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    1320:	4a06      	ldr	r2, [pc, #24]	; (133c <NVIC_Relocate+0x1c>)
    1322:	4907      	ldr	r1, [pc, #28]	; (1340 <NVIC_Relocate+0x20>)
    1324:	428a      	cmp	r2, r1
    1326:	d005      	beq.n	1334 <NVIC_Relocate+0x14>
    1328:	2300      	movs	r3, #0
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
            new_location[i] = current_location[i];
    132a:	58c8      	ldr	r0, [r1, r3]
    132c:	50d0      	str	r0, [r2, r3]
    132e:	3304      	adds	r3, #4
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    1330:	2bb4      	cmp	r3, #180	; 0xb4
    1332:	d1fa      	bne.n	132a <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    1334:	4b03      	ldr	r3, [pc, #12]	; (1344 <NVIC_Relocate+0x24>)
    1336:	609a      	str	r2, [r3, #8]
#endif
}
    1338:	4770      	bx	lr
    133a:	46c0      	nop			; (mov r8, r8)
    133c:	20000000 	.word	0x20000000
    1340:	00000000 	.word	0x00000000
    1344:	e000ed00 	.word	0xe000ed00

00001348 <NVIC_SetVector>:
{
    uint32_t *vectors;
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
    vectors = (uint32_t *)&__vector_tbl_reloc__;
#else
    vectors = (uint32_t *)SCB->VTOR;
    1348:	4b03      	ldr	r3, [pc, #12]	; (1358 <NVIC_SetVector+0x10>)
#endif
    vectors[IRQn + NVIC_USER_IRQ_OFFSET] = vector;
    134a:	3010      	adds	r0, #16
    vectors = (uint32_t *)SCB->VTOR;
    134c:	689b      	ldr	r3, [r3, #8]
    vectors[IRQn + NVIC_USER_IRQ_OFFSET] = vector;
    134e:	0080      	lsls	r0, r0, #2
    1350:	50c1      	str	r1, [r0, r3]
  __ASM volatile ("dmb 0xF":::"memory");
    1352:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    1356:	4770      	bx	lr
    1358:	e000ed00 	.word	0xe000ed00

0000135c <uart_hal_blocking_tx>:
    hal_uart_start_rx(priv->unit);
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
    135c:	b510      	push	{r4, lr}
    struct uart_hal_priv *priv;

    priv = dev->ud_priv;

    hal_uart_blocking_tx(priv->unit, byte);
    135e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1360:	6818      	ldr	r0, [r3, #0]
    1362:	f000 fc4f 	bl	1c04 <hal_uart_blocking_tx>
}
    1366:	bd10      	pop	{r4, pc}

00001368 <uart_hal_start_rx>:
{
    1368:	b510      	push	{r4, lr}
    hal_uart_start_rx(priv->unit);
    136a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    136c:	6818      	ldr	r0, [r3, #0]
    136e:	f000 fc0f 	bl	1b90 <hal_uart_start_rx>
}
    1372:	bd10      	pop	{r4, pc}

00001374 <uart_hal_close>:
    struct uart_hal_priv *priv;
    int rc;

    priv = ((struct uart_dev *)odev)->ud_priv;

    rc = hal_uart_close(priv->unit);
    1374:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
    1376:	b510      	push	{r4, lr}
    rc = hal_uart_close(priv->unit);
    1378:	6818      	ldr	r0, [r3, #0]
    137a:	f000 fd33 	bl	1de4 <hal_uart_close>
    if (rc) {
    137e:	2800      	cmp	r0, #0
    1380:	d000      	beq.n	1384 <uart_hal_close+0x10>
        return OS_EINVAL;
    1382:	2002      	movs	r0, #2
    }
    return OS_OK;
}
    1384:	bd10      	pop	{r4, pc}

00001386 <uart_hal_open>:
{
    1386:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1388:	0003      	movs	r3, r0
    138a:	1e14      	subs	r4, r2, #0
    if (!uc) {
    138c:	d101      	bne.n	1392 <uart_hal_open+0xc>
        return OS_EINVAL;
    138e:	2002      	movs	r0, #2
}
    1390:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
    1392:	7ec2      	ldrb	r2, [r0, #27]
        return OS_EBUSY;
    1394:	200b      	movs	r0, #11
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
    1396:	0792      	lsls	r2, r2, #30
    1398:	d4fa      	bmi.n	1390 <uart_hal_open+0xa>
    priv = ((struct uart_dev *)odev)->ud_priv;
    139a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    hal_uart_init_cbs(priv->unit, uc->uc_tx_char, uc->uc_tx_done,
    139c:	6963      	ldr	r3, [r4, #20]
    139e:	6922      	ldr	r2, [r4, #16]
    13a0:	9300      	str	r3, [sp, #0]
    13a2:	68a1      	ldr	r1, [r4, #8]
    13a4:	68e3      	ldr	r3, [r4, #12]
    13a6:	6828      	ldr	r0, [r5, #0]
    13a8:	f000 fbda 	bl	1b60 <hal_uart_init_cbs>
    rc = hal_uart_config(priv->unit, uc->uc_speed, uc->uc_databits,
    13ac:	79e1      	ldrb	r1, [r4, #7]
    13ae:	7963      	ldrb	r3, [r4, #5]
    13b0:	9101      	str	r1, [sp, #4]
    13b2:	79a1      	ldrb	r1, [r4, #6]
    13b4:	7922      	ldrb	r2, [r4, #4]
    13b6:	9100      	str	r1, [sp, #0]
    13b8:	6828      	ldr	r0, [r5, #0]
    13ba:	6821      	ldr	r1, [r4, #0]
    13bc:	f000 fc3c 	bl	1c38 <hal_uart_config>
    if (rc) {
    13c0:	2800      	cmp	r0, #0
    13c2:	d0e5      	beq.n	1390 <uart_hal_open+0xa>
    13c4:	e7e3      	b.n	138e <uart_hal_open+0x8>

000013c6 <uart_hal_start_tx>:
    priv = dev->ud_priv;
    13c6:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
    13c8:	b510      	push	{r4, lr}
    assert(priv);
    13ca:	2800      	cmp	r0, #0
    13cc:	d104      	bne.n	13d8 <uart_hal_start_tx+0x12>
    13ce:	0003      	movs	r3, r0
    13d0:	0002      	movs	r2, r0
    13d2:	0001      	movs	r1, r0
    13d4:	f001 fcf2 	bl	2dbc <__assert_func>
    hal_uart_start_tx(priv->unit);
    13d8:	6800      	ldr	r0, [r0, #0]
    13da:	f000 fbed 	bl	1bb8 <hal_uart_start_tx>
}
    13de:	bd10      	pop	{r4, pc}

000013e0 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
    13e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13e2:	0004      	movs	r4, r0
    struct uart_dev *dev;
    struct uart_hal_priv *priv;
    char ch;

    priv = os_malloc(sizeof(struct uart_hal_priv));
    13e4:	2004      	movs	r0, #4
{
    13e6:	000f      	movs	r7, r1
    priv = os_malloc(sizeof(struct uart_hal_priv));
    13e8:	f001 fd54 	bl	2e94 <os_malloc>
    13ec:	0006      	movs	r6, r0
    if (!priv) {
        return OS_ENOMEM;
    13ee:	2001      	movs	r0, #1
    if (!priv) {
    13f0:	2e00      	cmp	r6, #0
    13f2:	d010      	beq.n	1416 <uart_hal_init+0x36>
    }
    priv->unit = -1;
    13f4:	2301      	movs	r3, #1

    ch = odev->od_name[strlen(odev->od_name) - 1];
    13f6:	69e5      	ldr	r5, [r4, #28]
    priv->unit = -1;
    13f8:	425b      	negs	r3, r3
    ch = odev->od_name[strlen(odev->od_name) - 1];
    13fa:	0028      	movs	r0, r5
    priv->unit = -1;
    13fc:	6033      	str	r3, [r6, #0]
    ch = odev->od_name[strlen(odev->od_name) - 1];
    13fe:	f001 fec1 	bl	3184 <strlen>
    1402:	182d      	adds	r5, r5, r0
    1404:	3d01      	subs	r5, #1
    1406:	7828      	ldrb	r0, [r5, #0]
    if (!isdigit((int) ch)) {
    1408:	3830      	subs	r0, #48	; 0x30
    140a:	2809      	cmp	r0, #9
    140c:	d904      	bls.n	1418 <uart_hal_init+0x38>
        os_free(priv);
    140e:	0030      	movs	r0, r6
    1410:	f001 fd44 	bl	2e9c <os_free>
        return OS_EINVAL;
    1414:	2002      	movs	r0, #2
    dev->ud_priv = priv;

    hal_uart_init(priv->unit, arg);

    return OS_OK;
}
    1416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
    1418:	4b08      	ldr	r3, [pc, #32]	; (143c <uart_hal_init+0x5c>)
    priv->unit = ch - '0';
    141a:	6030      	str	r0, [r6, #0]
    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
    141c:	6023      	str	r3, [r4, #0]
    141e:	4b08      	ldr	r3, [pc, #32]	; (1440 <uart_hal_init+0x60>)
    dev->ud_priv = priv;
    1420:	6326      	str	r6, [r4, #48]	; 0x30
    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
    1422:	60e3      	str	r3, [r4, #12]
    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
    1424:	4b07      	ldr	r3, [pc, #28]	; (1444 <uart_hal_init+0x64>)
    hal_uart_init(priv->unit, arg);
    1426:	0039      	movs	r1, r7
    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
    1428:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
    142a:	4b07      	ldr	r3, [pc, #28]	; (1448 <uart_hal_init+0x68>)
    142c:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
    142e:	4b07      	ldr	r3, [pc, #28]	; (144c <uart_hal_init+0x6c>)
    1430:	62e3      	str	r3, [r4, #44]	; 0x2c
    hal_uart_init(priv->unit, arg);
    1432:	f000 fcf9 	bl	1e28 <hal_uart_init>
    return OS_OK;
    1436:	2000      	movs	r0, #0
    1438:	e7ed      	b.n	1416 <uart_hal_init+0x36>
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	00001387 	.word	0x00001387
    1440:	00001375 	.word	0x00001375
    1444:	000013c7 	.word	0x000013c7
    1448:	00001369 	.word	0x00001369
    144c:	0000135d 	.word	0x0000135d

00001450 <_exit>:

void _exit(int status);

void
_exit(int status)
{
    1450:	b510      	push	{r4, lr}
    hal_system_reset();
    1452:	f000 f987 	bl	1764 <hal_system_reset>

00001456 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    1456:	6843      	ldr	r3, [r0, #4]
    1458:	428b      	cmp	r3, r1
    145a:	d804      	bhi.n	1466 <hal_flash_check_addr+0x10>
    145c:	6880      	ldr	r0, [r0, #8]
    145e:	1818      	adds	r0, r3, r0
    1460:	4288      	cmp	r0, r1
    1462:	4180      	sbcs	r0, r0
        return -1;
    }
    return 0;
}
    1464:	4770      	bx	lr
        return -1;
    1466:	2001      	movs	r0, #1
    1468:	4240      	negs	r0, r0
    146a:	e7fb      	b.n	1464 <hal_flash_check_addr+0xe>

0000146c <hal_flash_init>:
{
    146c:	b570      	push	{r4, r5, r6, lr}
    int rc = 0;
    146e:	2500      	movs	r5, #0
            rc = -1;
    1470:	2601      	movs	r6, #1
    for (i = 0; ; i++) {
    1472:	002c      	movs	r4, r5
            rc = -1;
    1474:	4276      	negs	r6, r6
        hf = hal_bsp_flash_dev(i);
    1476:	0020      	movs	r0, r4
    1478:	f7ff ff0a 	bl	1290 <hal_bsp_flash_dev>
        if (!hf) {
    147c:	2800      	cmp	r0, #0
    147e:	d008      	beq.n	1492 <hal_flash_init+0x26>
        if (hf->hf_itf->hff_init(hf)) {
    1480:	6803      	ldr	r3, [r0, #0]
    1482:	691b      	ldr	r3, [r3, #16]
    1484:	4798      	blx	r3
    1486:	2800      	cmp	r0, #0
    1488:	d000      	beq.n	148c <hal_flash_init+0x20>
            rc = -1;
    148a:	0035      	movs	r5, r6
    for (i = 0; ; i++) {
    148c:	3401      	adds	r4, #1
    148e:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
    1490:	e7f1      	b.n	1476 <hal_flash_init+0xa>
}
    1492:	0028      	movs	r0, r5
    1494:	bd70      	pop	{r4, r5, r6, pc}

00001496 <hal_flash_align>:
{
    1496:	b510      	push	{r4, lr}
    hf = hal_bsp_flash_dev(flash_id);
    1498:	f7ff fefa 	bl	1290 <hal_bsp_flash_dev>
        return 1;
    149c:	2301      	movs	r3, #1
    if (!hf) {
    149e:	2800      	cmp	r0, #0
    14a0:	d001      	beq.n	14a6 <hal_flash_align+0x10>
    return hf->hf_align;
    14a2:	6903      	ldr	r3, [r0, #16]
    14a4:	b2db      	uxtb	r3, r3
}
    14a6:	0018      	movs	r0, r3
    14a8:	bd10      	pop	{r4, pc}

000014aa <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    14aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    14ac:	000d      	movs	r5, r1
    14ae:	9201      	str	r2, [sp, #4]
    14b0:	001e      	movs	r6, r3
    const struct hal_flash *hf;

    hf = hal_bsp_flash_dev(id);
    14b2:	f7ff feed 	bl	1290 <hal_bsp_flash_dev>
    14b6:	1e04      	subs	r4, r0, #0
    if (!hf) {
    14b8:	d012      	beq.n	14e0 <hal_flash_read+0x36>
        return -1;
    }
    if (hal_flash_check_addr(hf, address) ||
    14ba:	0029      	movs	r1, r5
    14bc:	f7ff ffcb 	bl	1456 <hal_flash_check_addr>
    14c0:	2800      	cmp	r0, #0
    14c2:	d10d      	bne.n	14e0 <hal_flash_read+0x36>
      hal_flash_check_addr(hf, address + num_bytes)) {
    14c4:	19a9      	adds	r1, r5, r6
    14c6:	0020      	movs	r0, r4
    14c8:	f7ff ffc5 	bl	1456 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    14cc:	2800      	cmp	r0, #0
    14ce:	d107      	bne.n	14e0 <hal_flash_read+0x36>
        return -1;
    }
    return hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    14d0:	6823      	ldr	r3, [r4, #0]
    14d2:	9a01      	ldr	r2, [sp, #4]
    14d4:	681f      	ldr	r7, [r3, #0]
    14d6:	0029      	movs	r1, r5
    14d8:	0033      	movs	r3, r6
    14da:	0020      	movs	r0, r4
    14dc:	47b8      	blx	r7
}
    14de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return -1;
    14e0:	2001      	movs	r0, #1
    14e2:	4240      	negs	r0, r0
    14e4:	e7fb      	b.n	14de <hal_flash_read+0x34>

000014e6 <hal_flash_write>:

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    14e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    14e8:	000d      	movs	r5, r1
    14ea:	9201      	str	r2, [sp, #4]
    14ec:	001e      	movs	r6, r3
    const struct hal_flash *hf;

    hf = hal_bsp_flash_dev(id);
    14ee:	f7ff fecf 	bl	1290 <hal_bsp_flash_dev>
    14f2:	1e04      	subs	r4, r0, #0
    if (!hf) {
    14f4:	d012      	beq.n	151c <hal_flash_write+0x36>
        return -1;
    }
    if (hal_flash_check_addr(hf, address) ||
    14f6:	0029      	movs	r1, r5
    14f8:	f7ff ffad 	bl	1456 <hal_flash_check_addr>
    14fc:	2800      	cmp	r0, #0
    14fe:	d10d      	bne.n	151c <hal_flash_write+0x36>
      hal_flash_check_addr(hf, address + num_bytes)) {
    1500:	19a9      	adds	r1, r5, r6
    1502:	0020      	movs	r0, r4
    1504:	f7ff ffa7 	bl	1456 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    1508:	2800      	cmp	r0, #0
    150a:	d107      	bne.n	151c <hal_flash_write+0x36>
        return -1;
    }
    return hf->hf_itf->hff_write(hf, address, src, num_bytes);
    150c:	6823      	ldr	r3, [r4, #0]
    150e:	9a01      	ldr	r2, [sp, #4]
    1510:	685f      	ldr	r7, [r3, #4]
    1512:	0029      	movs	r1, r5
    1514:	0033      	movs	r3, r6
    1516:	0020      	movs	r0, r4
    1518:	47b8      	blx	r7
}
    151a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return -1;
    151c:	2001      	movs	r0, #1
    151e:	4240      	negs	r0, r0
    1520:	e7fb      	b.n	151a <hal_flash_write+0x34>

00001522 <hal_flash_erase>:
    return hf->hf_itf->hff_erase_sector(hf, sector_address);
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    1522:	b5f0      	push	{r4, r5, r6, r7, lr}
    1524:	b085      	sub	sp, #20
    1526:	000e      	movs	r6, r1
    1528:	0015      	movs	r5, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    152a:	f7ff feb1 	bl	1290 <hal_bsp_flash_dev>
    152e:	1e04      	subs	r4, r0, #0
    if (!hf) {
    1530:	d104      	bne.n	153c <hal_flash_erase+0x1a>
        return -1;
    1532:	2501      	movs	r5, #1
    1534:	426d      	negs	r5, r5
                return -1;
            }
        }
    }
    return 0;
}
    1536:	0028      	movs	r0, r5
    1538:	b005      	add	sp, #20
    153a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hal_flash_check_addr(hf, address) ||
    153c:	0031      	movs	r1, r6
    153e:	f7ff ff8a 	bl	1456 <hal_flash_check_addr>
    1542:	2800      	cmp	r0, #0
    1544:	d1f5      	bne.n	1532 <hal_flash_erase+0x10>
      hal_flash_check_addr(hf, address + num_bytes)) {
    1546:	1973      	adds	r3, r6, r5
    1548:	0019      	movs	r1, r3
    154a:	0020      	movs	r0, r4
    154c:	9301      	str	r3, [sp, #4]
    154e:	f7ff ff82 	bl	1456 <hal_flash_check_addr>
    1552:	1e05      	subs	r5, r0, #0
    if (hal_flash_check_addr(hf, address) ||
    1554:	d1ed      	bne.n	1532 <hal_flash_erase+0x10>
    if (end <= address) {
    1556:	9b01      	ldr	r3, [sp, #4]
    1558:	42b3      	cmp	r3, r6
    155a:	d9ea      	bls.n	1532 <hal_flash_erase+0x10>
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    155c:	9000      	str	r0, [sp, #0]
    155e:	68e3      	ldr	r3, [r4, #12]
    1560:	9a00      	ldr	r2, [sp, #0]
    1562:	4293      	cmp	r3, r2
    1564:	dde7      	ble.n	1536 <hal_flash_erase+0x14>
        rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    1566:	6823      	ldr	r3, [r4, #0]
    1568:	aa02      	add	r2, sp, #8
    156a:	68db      	ldr	r3, [r3, #12]
    156c:	9900      	ldr	r1, [sp, #0]
    156e:	001f      	movs	r7, r3
    1570:	0020      	movs	r0, r4
    1572:	ab03      	add	r3, sp, #12
    1574:	47b8      	blx	r7
        assert(rc == 0);
    1576:	2800      	cmp	r0, #0
    1578:	d005      	beq.n	1586 <hal_flash_erase+0x64>
    157a:	2300      	movs	r3, #0
    157c:	001a      	movs	r2, r3
    157e:	0019      	movs	r1, r3
    1580:	0018      	movs	r0, r3
    1582:	f001 fc1b 	bl	2dbc <__assert_func>
        end_area = start + size;
    1586:	9902      	ldr	r1, [sp, #8]
    1588:	9b03      	ldr	r3, [sp, #12]
    158a:	18cb      	adds	r3, r1, r3
        if (address < end_area && end > start) {
    158c:	429e      	cmp	r6, r3
    158e:	d303      	bcc.n	1598 <hal_flash_erase+0x76>
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    1590:	9b00      	ldr	r3, [sp, #0]
    1592:	3301      	adds	r3, #1
    1594:	9300      	str	r3, [sp, #0]
    1596:	e7e2      	b.n	155e <hal_flash_erase+0x3c>
        if (address < end_area && end > start) {
    1598:	9b01      	ldr	r3, [sp, #4]
    159a:	428b      	cmp	r3, r1
    159c:	d9f8      	bls.n	1590 <hal_flash_erase+0x6e>
            if (hf->hf_itf->hff_erase_sector(hf, start)) {
    159e:	6823      	ldr	r3, [r4, #0]
    15a0:	0020      	movs	r0, r4
    15a2:	689b      	ldr	r3, [r3, #8]
    15a4:	4798      	blx	r3
    15a6:	2800      	cmp	r0, #0
    15a8:	d0f2      	beq.n	1590 <hal_flash_erase+0x6e>
    15aa:	e7c2      	b.n	1532 <hal_flash_erase+0x10>

000015ac <samd21_flash_init>:
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    15ac:	2200      	movs	r2, #0
    return 0;
}

static int
samd21_flash_init(const struct hal_flash *dev)
{
    15ae:	b530      	push	{r4, r5, lr}
    15b0:	b087      	sub	sp, #28
    15b2:	a801      	add	r0, sp, #4
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    15b4:	4b11      	ldr	r3, [pc, #68]	; (15fc <samd21_flash_init+0x50>)
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    15b6:	7002      	strb	r2, [r0, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    15b8:	685b      	ldr	r3, [r3, #4]
	config->disable_cache     = false;
    15ba:	70c2      	strb	r2, [r0, #3]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    15bc:	06db      	lsls	r3, r3, #27
    15be:	0f1b      	lsrs	r3, r3, #28
    15c0:	7083      	strb	r3, [r0, #2]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    15c2:	7102      	strb	r2, [r0, #4]
    int rc;
    struct nvm_config cfg;
    struct nvm_parameters params;
    nvm_get_config_defaults(&cfg);

    cfg.manual_page_write = false;
    15c4:	7042      	strb	r2, [r0, #1]
    rc = nvm_set_config(&cfg);
    15c6:	f000 fc49 	bl	1e5c <nvm_set_config>
    15ca:	1e04      	subs	r4, r0, #0
    if(rc != STATUS_OK) {
    15cc:	d112      	bne.n	15f4 <samd21_flash_init+0x48>
        return -1;
    }

    nvm_get_parameters(&params);
    15ce:	ad03      	add	r5, sp, #12
    15d0:	0028      	movs	r0, r5
    15d2:	f000 fd7f 	bl	20d4 <nvm_get_parameters>

    /* the samd21 flash doesn't use sector terminology. They use Row and
     * page.  A row contains 4 pages. Each pages is a fixed size.  You can
     * only erase based on row. Here I will map the rows to sectors and
     * deal with pages inside this driver.   */
    samd21_flash_dev.hf_itf = &samd21_flash_funcs;
    15d6:	4b0a      	ldr	r3, [pc, #40]	; (1600 <samd21_flash_init+0x54>)
    15d8:	4a0a      	ldr	r2, [pc, #40]	; (1604 <samd21_flash_init+0x58>)
    samd21_flash_dev.hf_base_addr = SAMD21_FLASH_START_ADDR;
    15da:	605c      	str	r4, [r3, #4]
    samd21_flash_dev.hf_itf = &samd21_flash_funcs;
    15dc:	601a      	str	r2, [r3, #0]
    samd21_flash_dev.hf_size = params.nvm_number_of_pages * params.page_size;
    15de:	886a      	ldrh	r2, [r5, #2]
    15e0:	7829      	ldrb	r1, [r5, #0]
    samd21_flash_dev.hf_sector_cnt =
            params.nvm_number_of_pages/SAMD21_FLASH_PAGES_PER_SECTOR;
    samd21_flash_dev.hf_align = 1;

    return 0;
    15e2:	0020      	movs	r0, r4
    samd21_flash_dev.hf_size = params.nvm_number_of_pages * params.page_size;
    15e4:	4351      	muls	r1, r2
            params.nvm_number_of_pages/SAMD21_FLASH_PAGES_PER_SECTOR;
    15e6:	0912      	lsrs	r2, r2, #4
    15e8:	60da      	str	r2, [r3, #12]
    samd21_flash_dev.hf_align = 1;
    15ea:	2201      	movs	r2, #1
    samd21_flash_dev.hf_size = params.nvm_number_of_pages * params.page_size;
    15ec:	6099      	str	r1, [r3, #8]
    samd21_flash_dev.hf_align = 1;
    15ee:	611a      	str	r2, [r3, #16]
}
    15f0:	b007      	add	sp, #28
    15f2:	bd30      	pop	{r4, r5, pc}
        return -1;
    15f4:	2001      	movs	r0, #1
    15f6:	4240      	negs	r0, r0
    15f8:	e7fa      	b.n	15f0 <samd21_flash_init+0x44>
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	41004000 	.word	0x41004000
    1600:	200000b8 	.word	0x200000b8
    1604:	000039f4 	.word	0x000039f4

00001608 <samd21_flash_sector_info>:
{
    1608:	b5f0      	push	{r4, r5, r6, r7, lr}
    160a:	b085      	sub	sp, #20
    nvm_get_parameters(&params);
    160c:	ad01      	add	r5, sp, #4
    160e:	0028      	movs	r0, r5
{
    1610:	0016      	movs	r6, r2
    1612:	001f      	movs	r7, r3
    1614:	000c      	movs	r4, r1
    nvm_get_parameters(&params);
    1616:	f000 fd5d 	bl	20d4 <nvm_get_parameters>
    sector_size = params.page_size*SAMD21_FLASH_PAGES_PER_SECTOR;
    161a:	782b      	ldrb	r3, [r5, #0]
    sector_cnt = params.nvm_number_of_pages/SAMD21_FLASH_PAGES_PER_SECTOR;
    161c:	886a      	ldrh	r2, [r5, #2]
    sector_size = params.page_size*SAMD21_FLASH_PAGES_PER_SECTOR;
    161e:	011b      	lsls	r3, r3, #4
    if((idx >= sector_cnt) || (idx < 0)){
    1620:	0912      	lsrs	r2, r2, #4
    1622:	4294      	cmp	r4, r2
    1624:	d205      	bcs.n	1632 <samd21_flash_sector_info+0x2a>
    return 0;
    1626:	2000      	movs	r0, #0
    *addr = idx * sector_size + SAMD21_FLASH_START_ADDR;
    1628:	435c      	muls	r4, r3
    *sz = sector_size;
    162a:	603b      	str	r3, [r7, #0]
    *addr = idx * sector_size + SAMD21_FLASH_START_ADDR;
    162c:	6034      	str	r4, [r6, #0]
}
    162e:	b005      	add	sp, #20
    1630:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    1632:	2001      	movs	r0, #1
    1634:	4240      	negs	r0, r0
    1636:	e7fa      	b.n	162e <samd21_flash_sector_info+0x26>

00001638 <samd21_flash_erase_sector>:
{
    1638:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    nvm_get_parameters(&params);
    163a:	ad01      	add	r5, sp, #4
    163c:	0028      	movs	r0, r5
{
    163e:	000e      	movs	r6, r1
    nvm_get_parameters(&params);
    1640:	2400      	movs	r4, #0
    1642:	f000 fd47 	bl	20d4 <nvm_get_parameters>
                i*SAMD21_FLASH_PAGES_PER_ROW*params.page_size;
    1646:	7828      	ldrb	r0, [r5, #0]
    1648:	4360      	muls	r0, r4
        uint32_t row_address = sector_address +
    164a:	1980      	adds	r0, r0, r6
        rc = nvm_erase_row(row_address);
    164c:	f000 fd18 	bl	2080 <nvm_erase_row>
        if(rc != STATUS_OK) {
    1650:	2800      	cmp	r0, #0
    1652:	d104      	bne.n	165e <samd21_flash_erase_sector+0x26>
    1654:	3404      	adds	r4, #4
    for(i = 0; i < SAMD21_FLASH_ROWS_PER_SECTOR; i++) {
    1656:	2c10      	cmp	r4, #16
    1658:	d1f5      	bne.n	1646 <samd21_flash_erase_sector+0xe>
}
    165a:	b004      	add	sp, #16
    165c:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
    165e:	2001      	movs	r0, #1
    1660:	4240      	negs	r0, r0
    1662:	e7fa      	b.n	165a <samd21_flash_erase_sector+0x22>

00001664 <samd21_flash_write>:
{
    1664:	b5f0      	push	{r4, r5, r6, r7, lr}
    1666:	b099      	sub	sp, #100	; 0x64
    nvm_get_parameters(&params);
    1668:	af05      	add	r7, sp, #20
    166a:	0038      	movs	r0, r7
{
    166c:	001c      	movs	r4, r3
    166e:	000e      	movs	r6, r1
    1670:	9202      	str	r2, [sp, #8]
    nvm_get_parameters(&params);
    1672:	f000 fd2f 	bl	20d4 <nvm_get_parameters>
    assert(params.page_size <= sizeof(page_buffer));
    1676:	783b      	ldrb	r3, [r7, #0]
    1678:	2b40      	cmp	r3, #64	; 0x40
    167a:	d92e      	bls.n	16da <samd21_flash_write+0x76>
    167c:	2300      	movs	r3, #0
    167e:	001a      	movs	r2, r3
    1680:	0019      	movs	r1, r3
    1682:	0018      	movs	r0, r3
    1684:	f001 fb9a 	bl	2dbc <__assert_func>
        base_address = address & ~(params.page_size - 1);
    1688:	783a      	ldrb	r2, [r7, #0]
    168a:	4253      	negs	r3, r2
    168c:	4033      	ands	r3, r6
    168e:	9301      	str	r3, [sp, #4]
        offset = address - base_address;
    1690:	1af3      	subs	r3, r6, r3
    1692:	9303      	str	r3, [sp, #12]
        write_len = params.page_size - offset;
    1694:	1ad5      	subs	r5, r2, r3
        if(write_len > len) {
    1696:	42a5      	cmp	r5, r4
    1698:	d900      	bls.n	169c <samd21_flash_write+0x38>
            write_len = len;
    169a:	0025      	movs	r5, r4
        if(nvm_read_buffer(base_address, page_buffer, params.page_size)
    169c:	b292      	uxth	r2, r2
    169e:	a908      	add	r1, sp, #32
    16a0:	9801      	ldr	r0, [sp, #4]
    16a2:	f000 fcb9 	bl	2018 <nvm_read_buffer>
    16a6:	2800      	cmp	r0, #0
    16a8:	d003      	beq.n	16b2 <samd21_flash_write+0x4e>
            return -1;
    16aa:	2001      	movs	r0, #1
    16ac:	4240      	negs	r0, r0
}
    16ae:	b019      	add	sp, #100	; 0x64
    16b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16b2:	aa08      	add	r2, sp, #32
    16b4:	4694      	mov	ip, r2
    16b6:	9b03      	ldr	r3, [sp, #12]
        len -= write_len;
    16b8:	1b64      	subs	r4, r4, r5
        address += write_len;
    16ba:	1976      	adds	r6, r6, r5
    16bc:	4463      	add	r3, ip
    16be:	9a02      	ldr	r2, [sp, #8]
    16c0:	1812      	adds	r2, r2, r0
    16c2:	9203      	str	r2, [sp, #12]
        while(write_len--) {
    16c4:	4285      	cmp	r5, r0
    16c6:	d10c      	bne.n	16e2 <samd21_flash_write+0x7e>
        if(nvm_write_buffer(base_address,page_buffer, params.page_size)
    16c8:	783a      	ldrb	r2, [r7, #0]
    16ca:	a908      	add	r1, sp, #32
    16cc:	9801      	ldr	r0, [sp, #4]
    16ce:	f000 fc57 	bl	1f80 <nvm_write_buffer>
    16d2:	9b03      	ldr	r3, [sp, #12]
    16d4:	9302      	str	r3, [sp, #8]
    16d6:	2800      	cmp	r0, #0
    16d8:	d1e7      	bne.n	16aa <samd21_flash_write+0x46>
    while(len) {
    16da:	2c00      	cmp	r4, #0
    16dc:	d1d4      	bne.n	1688 <samd21_flash_write+0x24>
    return 0;
    16de:	0020      	movs	r0, r4
    16e0:	e7e5      	b.n	16ae <samd21_flash_write+0x4a>
            if (page_buffer[offset] != 0xff) {
    16e2:	5c1a      	ldrb	r2, [r3, r0]
    16e4:	2aff      	cmp	r2, #255	; 0xff
    16e6:	d1e0      	bne.n	16aa <samd21_flash_write+0x46>
            page_buffer[offset++] = *psrc++;
    16e8:	9a02      	ldr	r2, [sp, #8]
    16ea:	5c12      	ldrb	r2, [r2, r0]
    16ec:	541a      	strb	r2, [r3, r0]
    16ee:	3001      	adds	r0, #1
    16f0:	e7e5      	b.n	16be <samd21_flash_write+0x5a>

000016f2 <samd21_flash_read>:
{
    16f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    16f4:	b097      	sub	sp, #92	; 0x5c
    nvm_get_parameters(&params);
    16f6:	af03      	add	r7, sp, #12
    16f8:	0038      	movs	r0, r7
{
    16fa:	001c      	movs	r4, r3
    16fc:	000e      	movs	r6, r1
    16fe:	9200      	str	r2, [sp, #0]
    nvm_get_parameters(&params);
    1700:	f000 fce8 	bl	20d4 <nvm_get_parameters>
    assert(params.page_size <= sizeof(page_buffer));
    1704:	783b      	ldrb	r3, [r7, #0]
    1706:	2b40      	cmp	r3, #64	; 0x40
    1708:	d91f      	bls.n	174a <samd21_flash_read+0x58>
    170a:	2300      	movs	r3, #0
    170c:	001a      	movs	r2, r3
    170e:	0019      	movs	r1, r3
    1710:	0018      	movs	r0, r3
    1712:	f001 fb53 	bl	2dbc <__assert_func>
        base_address = address & ~(params.page_size - 1);
    1716:	783a      	ldrb	r2, [r7, #0]
    1718:	4250      	negs	r0, r2
    171a:	4030      	ands	r0, r6
        offset = address - base_address;
    171c:	1a33      	subs	r3, r6, r0
    171e:	9301      	str	r3, [sp, #4]
        read_len = params.page_size - offset;
    1720:	1ad5      	subs	r5, r2, r3
        if(read_len > num_bytes) {
    1722:	42a5      	cmp	r5, r4
    1724:	d900      	bls.n	1728 <samd21_flash_read+0x36>
            read_len = num_bytes;
    1726:	0025      	movs	r5, r4
        if(nvm_read_buffer(base_address, page_buffer, params.page_size)
    1728:	b292      	uxth	r2, r2
    172a:	a906      	add	r1, sp, #24
    172c:	f000 fc74 	bl	2018 <nvm_read_buffer>
    1730:	2800      	cmp	r0, #0
    1732:	d114      	bne.n	175e <samd21_flash_read+0x6c>
             *pdst++ = page_buffer[offset++];
    1734:	aa06      	add	r2, sp, #24
    1736:	4694      	mov	ip, r2
    1738:	9b01      	ldr	r3, [sp, #4]
        num_bytes -= read_len;
    173a:	1b64      	subs	r4, r4, r5
        address += read_len;
    173c:	1976      	adds	r6, r6, r5
             *pdst++ = page_buffer[offset++];
    173e:	4463      	add	r3, ip
        while(read_len--) {
    1740:	4285      	cmp	r5, r0
    1742:	d107      	bne.n	1754 <samd21_flash_read+0x62>
    1744:	9b00      	ldr	r3, [sp, #0]
    1746:	195b      	adds	r3, r3, r5
    1748:	9300      	str	r3, [sp, #0]
    while(num_bytes) {
    174a:	2c00      	cmp	r4, #0
    174c:	d1e3      	bne.n	1716 <samd21_flash_read+0x24>
    return 0;
    174e:	0020      	movs	r0, r4
}
    1750:	b017      	add	sp, #92	; 0x5c
    1752:	bdf0      	pop	{r4, r5, r6, r7, pc}
             *pdst++ = page_buffer[offset++];
    1754:	5c1a      	ldrb	r2, [r3, r0]
    1756:	9900      	ldr	r1, [sp, #0]
    1758:	540a      	strb	r2, [r1, r0]
    175a:	3001      	adds	r0, #1
    175c:	e7f0      	b.n	1740 <samd21_flash_read+0x4e>
            return -1;
    175e:	2001      	movs	r0, #1
    1760:	4240      	negs	r0, r0
    1762:	e7f5      	b.n	1750 <samd21_flash_read+0x5e>

00001764 <hal_system_reset>:
}

int
hal_debugger_connected(void)
{
    return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1764:	4b06      	ldr	r3, [pc, #24]	; (1780 <hal_system_reset+0x1c>)
    1766:	789b      	ldrb	r3, [r3, #2]
        if (hal_debugger_connected()) {
    1768:	079b      	lsls	r3, r3, #30
    176a:	d500      	bpl.n	176e <hal_system_reset+0xa>
            __asm__("bkpt");
    176c:	be00      	bkpt	0x0000
  __ASM volatile ("dsb 0xF":::"memory");
    176e:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    1772:	4b04      	ldr	r3, [pc, #16]	; (1784 <hal_system_reset+0x20>)
    1774:	4a04      	ldr	r2, [pc, #16]	; (1788 <hal_system_reset+0x24>)
    1776:	60da      	str	r2, [r3, #12]
    1778:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
    177c:	46c0      	nop			; (mov r8, r8)
    177e:	e7fd      	b.n	177c <hal_system_reset+0x18>
    1780:	41002000 	.word	0x41002000
    1784:	e000ed00 	.word	0xe000ed00
    1788:	05fa0004 	.word	0x05fa0004

0000178c <hal_debugger_connected>:
    return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    178c:	4b02      	ldr	r3, [pc, #8]	; (1798 <hal_debugger_connected+0xc>)
    178e:	7898      	ldrb	r0, [r3, #2]
    1790:	2302      	movs	r3, #2
    1792:	4018      	ands	r0, r3
}
    1794:	4770      	bx	lr
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	41002000 	.word	0x41002000

0000179c <hal_system_start>:
 *
 * @param hdr                   The header for the image to boot.
 */
void
hal_system_start(void *img_start)
{
    179c:	b580      	push	{r7, lr}
    uint32_t base0entry;
    uint32_t jump_addr;
    jump_fn *fn;

    /* First word contains initial MSP value. */
    __set_MSP(*(uint32_t *)img_start);
    179e:	6803      	ldr	r3, [r0, #0]
{
    17a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    17a2:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
    17a6:	f383 8809 	msr	PSP, r3
    base0entry = *(uint32_t *)(img_start + 4);
    jump_addr = base0entry;
    fn = (jump_fn *)jump_addr;

    /* Jump to image. */
    fn();
    17aa:	6843      	ldr	r3, [r0, #4]
    17ac:	4798      	blx	r3
}
    17ae:	46bd      	mov	sp, r7
    17b0:	bd80      	pop	{r7, pc}
	...

000017b4 <samd21_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
samd21_timer_set_ocmp(struct samd21_hal_timer *bsptimer, uint32_t expiry)
{
    17b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int32_t delta_t;

    hwtimer = bsptimer->tc_mod.hw;

    /* Disable ocmp interrupt and set new value */
    hwtimer->COUNT16.INTENCLR.reg = TC_INTENCLR_MC0;
    17b6:	2710      	movs	r7, #16

    temp = expiry & 0xffff0000;
    17b8:	0c0b      	lsrs	r3, r1, #16
    17ba:	40bb      	lsls	r3, r7
    hwtimer = bsptimer->tc_mod.hw;
    17bc:	6986      	ldr	r6, [r0, #24]
    delta_t = (int32_t)(temp - bsptimer->tmr_cntr);
    17be:	6842      	ldr	r2, [r0, #4]
{
    17c0:	0005      	movs	r5, r0
    hwtimer->COUNT16.INTENCLR.reg = TC_INTENCLR_MC0;
    17c2:	7337      	strb	r7, [r6, #12]
    delta_t = (int32_t)(temp - bsptimer->tmr_cntr);
    17c4:	1a9b      	subs	r3, r3, r2
    if (delta_t < 0) {
    17c6:	d507      	bpl.n	17d8 <samd21_timer_set_ocmp+0x24>
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    17c8:	231f      	movs	r3, #31
    17ca:	786a      	ldrb	r2, [r5, #1]
    17cc:	401a      	ands	r2, r3
    17ce:	3b1e      	subs	r3, #30
    17d0:	4093      	lsls	r3, r2
    17d2:	4a0b      	ldr	r2, [pc, #44]	; (1800 <samd21_timer_set_ocmp+0x4c>)
    17d4:	6053      	str	r3, [r2, #4]
    }
    return;

set_ocmp_late:
    NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
}
    17d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    } else if (delta_t == 0) {
    17d8:	2b00      	cmp	r3, #0
    17da:	d1fc      	bne.n	17d6 <samd21_timer_set_ocmp+0x22>
        tc_set_compare_value(&bsptimer->tc_mod, TC_COMPARE_CAPTURE_CHANNEL_0,
    17dc:	0004      	movs	r4, r0
    17de:	3418      	adds	r4, #24
    17e0:	b28a      	uxth	r2, r1
    17e2:	0020      	movs	r0, r4
    17e4:	0019      	movs	r1, r3
    17e6:	9201      	str	r2, [sp, #4]
    17e8:	f001 f921 	bl	2a2e <tc_set_compare_value>
        hwtimer->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
    17ec:	73b7      	strb	r7, [r6, #14]
        if (tc_get_count_value(&bsptimer->tc_mod) >= expiry16) {
    17ee:	0020      	movs	r0, r4
        hwtimer->COUNT16.INTENSET.reg = TC_INTENSET_MC0;
    17f0:	7377      	strb	r7, [r6, #13]
        if (tc_get_count_value(&bsptimer->tc_mod) >= expiry16) {
    17f2:	f001 f907 	bl	2a04 <tc_get_count_value>
    17f6:	9b01      	ldr	r3, [sp, #4]
    17f8:	4298      	cmp	r0, r3
    17fa:	d2e5      	bcs.n	17c8 <samd21_timer_set_ocmp+0x14>
    17fc:	e7eb      	b.n	17d6 <samd21_timer_set_ocmp+0x22>
    17fe:	46c0      	nop			; (mov r8, r8)
    1800:	e000e1fc 	.word	0xe000e1fc

00001804 <hal_timer_read_bsptimer>:
    hwtimer->COUNT16.INTENCLR.reg = TC_INTENCLR_MC0;
}

static uint32_t
hal_timer_read_bsptimer(struct samd21_hal_timer *bsptimer)
{
    1804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1806:	0005      	movs	r5, r0
    Tc *hwtimer;

    hwtimer = bsptimer->tc_mod.hw;
    cpu_irq_enter_critical();
    tcntr = bsptimer->tmr_cntr;
    low = tc_get_count_value(&bsptimer->tc_mod);
    1808:	002f      	movs	r7, r5
    hwtimer = bsptimer->tc_mod.hw;
    180a:	6983      	ldr	r3, [r0, #24]
    low = tc_get_count_value(&bsptimer->tc_mod);
    180c:	3718      	adds	r7, #24
    hwtimer = bsptimer->tc_mod.hw;
    180e:	9301      	str	r3, [sp, #4]
    cpu_irq_enter_critical();
    1810:	f7fe fdd2 	bl	3b8 <cpu_irq_enter_critical>
    low = tc_get_count_value(&bsptimer->tc_mod);
    1814:	0038      	movs	r0, r7
    tcntr = bsptimer->tmr_cntr;
    1816:	686e      	ldr	r6, [r5, #4]
    if (hwtimer->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) {
    1818:	2401      	movs	r4, #1
    low = tc_get_count_value(&bsptimer->tc_mod);
    181a:	f001 f8f3 	bl	2a04 <tc_get_count_value>
    if (hwtimer->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) {
    181e:	9b01      	ldr	r3, [sp, #4]
    low = tc_get_count_value(&bsptimer->tc_mod);
    1820:	b280      	uxth	r0, r0
    if (hwtimer->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) {
    1822:	7b9b      	ldrb	r3, [r3, #14]
    1824:	4223      	tst	r3, r4
    1826:	d00f      	beq.n	1848 <hal_timer_read_bsptimer+0x44>
        tcntr += 65536;
    1828:	2380      	movs	r3, #128	; 0x80
    182a:	025b      	lsls	r3, r3, #9
    182c:	18f6      	adds	r6, r6, r3
        bsptimer->tmr_cntr = tcntr;
    182e:	606e      	str	r6, [r5, #4]
        low = tc_get_count_value(&bsptimer->tc_mod);
    1830:	0038      	movs	r0, r7
    1832:	f001 f8e7 	bl	2a04 <tc_get_count_value>
    1836:	221f      	movs	r2, #31
        hwtimer->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1838:	9b01      	ldr	r3, [sp, #4]
        low = tc_get_count_value(&bsptimer->tc_mod);
    183a:	b280      	uxth	r0, r0
        hwtimer->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    183c:	739c      	strb	r4, [r3, #14]
    183e:	786b      	ldrb	r3, [r5, #1]
    1840:	4013      	ands	r3, r2
    1842:	409c      	lsls	r4, r3
    1844:	4b03      	ldr	r3, [pc, #12]	; (1854 <hal_timer_read_bsptimer+0x50>)
    1846:	605c      	str	r4, [r3, #4]
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    }
    tcntr |= low;
    1848:	4306      	orrs	r6, r0
    cpu_irq_leave_critical();
    184a:	f7fe fdcf 	bl	3ec <cpu_irq_leave_critical>

    return tcntr;
}
    184e:	0030      	movs	r0, r6
    1850:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1852:	46c0      	nop			; (mov r8, r8)
    1854:	e000e1fc 	.word	0xe000e1fc

00001858 <samd21_timer0_irq_handler>:
    uint8_t ovf_int;
    Tc *hwtimer;

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tc_mod.hw;
    compare = hwtimer->COUNT16.INTFLAG.reg & TC_INTFLAG_MC0;
    1858:	2310      	movs	r3, #16
#endif

#if MYNEWT_VAL(TIMER_0)
void
samd21_timer0_irq_handler(void)
{
    185a:	b570      	push	{r4, r5, r6, lr}
    hwtimer = bsptimer->tc_mod.hw;
    185c:	4c1d      	ldr	r4, [pc, #116]	; (18d4 <samd21_timer0_irq_handler+0x7c>)
    185e:	69a6      	ldr	r6, [r4, #24]
    compare = hwtimer->COUNT16.INTFLAG.reg & TC_INTFLAG_MC0;
    1860:	7bb2      	ldrb	r2, [r6, #14]
    if (compare) {
    1862:	421a      	tst	r2, r3
    1864:	d000      	beq.n	1868 <samd21_timer0_irq_handler+0x10>
        hwtimer->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
    1866:	73b3      	strb	r3, [r6, #14]
    ovf_int = hwtimer->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF;
    1868:	2301      	movs	r3, #1
    186a:	7bb2      	ldrb	r2, [r6, #14]
    if (ovf_int) {
    186c:	421a      	tst	r2, r3
    186e:	d005      	beq.n	187c <samd21_timer0_irq_handler+0x24>
        bsptimer->tmr_cntr += 65536;
    1870:	2280      	movs	r2, #128	; 0x80
        hwtimer->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1872:	73b3      	strb	r3, [r6, #14]
        bsptimer->tmr_cntr += 65536;
    1874:	6863      	ldr	r3, [r4, #4]
    1876:	0252      	lsls	r2, r2, #9
    1878:	189b      	adds	r3, r3, r2
    187a:	6063      	str	r3, [r4, #4]
    ++bsptimer->timer_isrs;
    187c:	68a3      	ldr	r3, [r4, #8]
    187e:	3301      	adds	r3, #1
    1880:	60a3      	str	r3, [r4, #8]
    cpu_irq_enter_critical();
    1882:	f7fe fd99 	bl	3b8 <cpu_irq_enter_critical>
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
    1886:	6925      	ldr	r5, [r4, #16]
    1888:	2d00      	cmp	r5, #0
    188a:	d005      	beq.n	1898 <samd21_timer0_irq_handler+0x40>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    188c:	0020      	movs	r0, r4
    188e:	f7ff ffb9 	bl	1804 <hal_timer_read_bsptimer>
        if ((int32_t)(tcntr - timer->expiry) >= 0) {
    1892:	68eb      	ldr	r3, [r5, #12]
    1894:	1ac0      	subs	r0, r0, r3
    1896:	d50a      	bpl.n	18ae <samd21_timer0_irq_handler+0x56>
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
    1898:	6923      	ldr	r3, [r4, #16]
    if (timer) {
    189a:	2b00      	cmp	r3, #0
    189c:	d016      	beq.n	18cc <samd21_timer0_irq_handler+0x74>
        samd21_timer_set_ocmp(bsptimer, timer->expiry);
    189e:	68d9      	ldr	r1, [r3, #12]
    18a0:	0020      	movs	r0, r4
    18a2:	f7ff ff87 	bl	17b4 <samd21_timer_set_ocmp>
    cpu_irq_leave_critical();
    18a6:	f7fe fda1 	bl	3ec <cpu_irq_leave_critical>
    compare = hwtimer->COUNT16.INTFLAG.reg;
    18aa:	7bb3      	ldrb	r3, [r6, #14]
    hal_timer_irq_handler(&samd21_hal_timer0);
}
    18ac:	bd70      	pop	{r4, r5, r6, pc}
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    18ae:	692b      	ldr	r3, [r5, #16]
    18b0:	696a      	ldr	r2, [r5, #20]
    18b2:	2b00      	cmp	r3, #0
    18b4:	d008      	beq.n	18c8 <samd21_timer0_irq_handler+0x70>
    18b6:	615a      	str	r2, [r3, #20]
    18b8:	696a      	ldr	r2, [r5, #20]
    18ba:	6013      	str	r3, [r2, #0]
            timer->link.tqe_prev = NULL;
    18bc:	2300      	movs	r3, #0
            timer->cb_func(timer->cb_arg);
    18be:	68a8      	ldr	r0, [r5, #8]
            timer->link.tqe_prev = NULL;
    18c0:	616b      	str	r3, [r5, #20]
            timer->cb_func(timer->cb_arg);
    18c2:	686b      	ldr	r3, [r5, #4]
    18c4:	4798      	blx	r3
    18c6:	e7de      	b.n	1886 <samd21_timer0_irq_handler+0x2e>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    18c8:	6162      	str	r2, [r4, #20]
    18ca:	e7f5      	b.n	18b8 <samd21_timer0_irq_handler+0x60>
    hwtimer->COUNT16.INTENCLR.reg = TC_INTENCLR_MC0;
    18cc:	2210      	movs	r2, #16
        samd21_timer_disable_ocmp(bsptimer->tc_mod.hw);
    18ce:	69a3      	ldr	r3, [r4, #24]
    hwtimer->COUNT16.INTENCLR.reg = TC_INTENCLR_MC0;
    18d0:	731a      	strb	r2, [r3, #12]
    18d2:	e7e8      	b.n	18a6 <samd21_timer0_irq_handler+0x4e>
    18d4:	20001398 	.word	0x20001398

000018d8 <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *cfg)
{
    18d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18da:	0004      	movs	r4, r0
    18dc:	b085      	sub	sp, #20
    18de:	000f      	movs	r7, r1
    struct samd21_timer_cfg *tmr_cfg;
    hal_timer_irq_handler_t irq_isr;
    struct system_gclk_gen_config gcfg;

    /* Get timer. Make sure not enabled */
    SAMD21_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    18e0:	2802      	cmp	r0, #2
    18e2:	dc5d      	bgt.n	19a0 <hal_timer_init+0xc8>
    18e4:	4b31      	ldr	r3, [pc, #196]	; (19ac <hal_timer_init+0xd4>)
    18e6:	0082      	lsls	r2, r0, #2
    18e8:	58d3      	ldr	r3, [r2, r3]
    18ea:	2b00      	cmp	r3, #0
    18ec:	d058      	beq.n	19a0 <hal_timer_init+0xc8>
    if (bsptimer->tmr_enabled) {
    18ee:	781b      	ldrb	r3, [r3, #0]
    18f0:	2b00      	cmp	r3, #0
    18f2:	d155      	bne.n	19a0 <hal_timer_init+0xc8>
        goto err;
    }
    tmr_cfg = (struct samd21_timer_cfg *)cfg;

    rc = 0;
    switch (timer_num) {
    18f4:	2800      	cmp	r0, #0
    18f6:	d155      	bne.n	19a4 <hal_timer_init+0xcc>
    if (rc) {
        goto err;
    }

    /* set up gclk generator to source this timer */
    gcfg.division_factor = 1;
    18f8:	2601      	movs	r6, #1
    gcfg.high_when_disabled = false;
    gcfg.output_enable = false;
    gcfg.run_in_standby = true;
    gcfg.source_clock = tmr_cfg->src_clock;
    18fa:	783b      	ldrb	r3, [r7, #0]
    gcfg.division_factor = 1;
    18fc:	a901      	add	r1, sp, #4
    18fe:	604e      	str	r6, [r1, #4]
    gcfg.run_in_standby = true;
    1900:	720e      	strb	r6, [r1, #8]
    gcfg.source_clock = tmr_cfg->src_clock;
    1902:	700b      	strb	r3, [r1, #0]
    gcfg.high_when_disabled = false;
    1904:	7048      	strb	r0, [r1, #1]
    gcfg.output_enable = false;
    1906:	7248      	strb	r0, [r1, #9]
    system_gclk_gen_set_config(tmr_cfg->clkgen, &gcfg);
    1908:	7a38      	ldrb	r0, [r7, #8]
    190a:	f7fe fc4f 	bl	1ac <system_gclk_gen_set_config>

    irq_num = tmr_cfg->irq_num;
    190e:	6878      	ldr	r0, [r7, #4]
    bsptimer->tmr_irq_num = irq_num;
    1910:	4d27      	ldr	r5, [pc, #156]	; (19b0 <hal_timer_init+0xd8>)
    irq_num = tmr_cfg->irq_num;
    1912:	b2c2      	uxtb	r2, r0
    bsptimer->tmr_irq_num = irq_num;
    1914:	706a      	strb	r2, [r5, #1]
    bsptimer->tmr_srcclk = tmr_cfg->src_clock;
    1916:	783b      	ldrb	r3, [r7, #0]
    bsptimer->tmr_clkgen = tmr_cfg->clkgen;
    bsptimer->tc_mod.hw = tmr_cfg->hwtimer;
    bsptimer->tmr_initialized = 1;

    NVIC_DisableIRQ(irq_num);
    1918:	b240      	sxtb	r0, r0
    bsptimer->tmr_srcclk = tmr_cfg->src_clock;
    191a:	70ab      	strb	r3, [r5, #2]
    bsptimer->tmr_clkgen = tmr_cfg->clkgen;
    191c:	7a39      	ldrb	r1, [r7, #8]
    191e:	19ab      	adds	r3, r5, r6
    1920:	77d9      	strb	r1, [r3, #31]
    bsptimer->tc_mod.hw = tmr_cfg->hwtimer;
    1922:	68fb      	ldr	r3, [r7, #12]
    bsptimer->tmr_initialized = 1;
    1924:	70ee      	strb	r6, [r5, #3]
    bsptimer->tc_mod.hw = tmr_cfg->hwtimer;
    1926:	61ab      	str	r3, [r5, #24]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1928:	231f      	movs	r3, #31
    192a:	4013      	ands	r3, r2
    192c:	409e      	lsls	r6, r3
    192e:	4b21      	ldr	r3, [pc, #132]	; (19b4 <hal_timer_init+0xdc>)
    1930:	67de      	str	r6, [r3, #124]	; 0x7c
  if ((int32_t)(IRQn) < 0)
    1932:	2800      	cmp	r0, #0
    1934:	da21      	bge.n	197a <hal_timer_init+0xa2>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1936:	2603      	movs	r6, #3
    1938:	230f      	movs	r3, #15
    193a:	4013      	ands	r3, r2
    193c:	4032      	ands	r2, r6
    193e:	40b2      	lsls	r2, r6
    1940:	36fc      	adds	r6, #252	; 0xfc
    1942:	4096      	lsls	r6, r2
    1944:	3b08      	subs	r3, #8
    1946:	491c      	ldr	r1, [pc, #112]	; (19b8 <hal_timer_init+0xe0>)
    1948:	089b      	lsrs	r3, r3, #2
    194a:	009b      	lsls	r3, r3, #2
    194c:	185b      	adds	r3, r3, r1
    194e:	69d9      	ldr	r1, [r3, #28]
    1950:	43b1      	bics	r1, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    1952:	26c0      	movs	r6, #192	; 0xc0
    1954:	4096      	lsls	r6, r2
    1956:	0032      	movs	r2, r6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1958:	430a      	orrs	r2, r1
    195a:	61da      	str	r2, [r3, #28]
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);
    195c:	4917      	ldr	r1, [pc, #92]	; (19bc <hal_timer_init+0xe4>)
    195e:	f7ff fcf3 	bl	1348 <NVIC_SetVector>
    1962:	69ab      	ldr	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1964:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1966:	b252      	sxtb	r2, r2
    1968:	2a00      	cmp	r2, #0
    196a:	dbfb      	blt.n	1964 <hal_timer_init+0x8c>
		/* Wait for sync */
	}

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    196c:	2102      	movs	r1, #2
    196e:	881a      	ldrh	r2, [r3, #0]
    1970:	438a      	bics	r2, r1
    1972:	801a      	strh	r2, [r3, #0]

    return 0;

err:
    return rc;
}
    1974:	0020      	movs	r0, r4
    1976:	b005      	add	sp, #20
    1978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    197a:	2703      	movs	r7, #3
    197c:	403a      	ands	r2, r7
    197e:	40ba      	lsls	r2, r7
    1980:	490f      	ldr	r1, [pc, #60]	; (19c0 <hal_timer_init+0xe8>)
    1982:	0883      	lsrs	r3, r0, #2
    1984:	009b      	lsls	r3, r3, #2
    1986:	185b      	adds	r3, r3, r1
    1988:	21c0      	movs	r1, #192	; 0xc0
    198a:	37fc      	adds	r7, #252	; 0xfc
    198c:	4097      	lsls	r7, r2
    198e:	0089      	lsls	r1, r1, #2
    1990:	585e      	ldr	r6, [r3, r1]
    1992:	43be      	bics	r6, r7
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    1994:	27c0      	movs	r7, #192	; 0xc0
    1996:	4097      	lsls	r7, r2
    1998:	003a      	movs	r2, r7
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    199a:	4332      	orrs	r2, r6
    199c:	505a      	str	r2, [r3, r1]
    199e:	e7dd      	b.n	195c <hal_timer_init+0x84>
    SAMD21_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    19a0:	2416      	movs	r4, #22
    19a2:	e7e7      	b.n	1974 <hal_timer_init+0x9c>
        rc = -1;
    19a4:	2401      	movs	r4, #1
    19a6:	4264      	negs	r4, r4
    19a8:	e7e4      	b.n	1974 <hal_timer_init+0x9c>
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	00003a20 	.word	0x00003a20
    19b0:	20001398 	.word	0x20001398
    19b4:	e000e104 	.word	0xe000e104
    19b8:	e000ed00 	.word	0xe000ed00
    19bc:	00001859 	.word	0x00001859
    19c0:	e000e100 	.word	0xe000e100

000019c4 <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
    19c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19c6:	b091      	sub	sp, #68	; 0x44
    struct samd21_hal_timer *bsptimer;
    enum status_code tc_rc;
    struct tc_config cfg;

    /* Get timer. Make sure not enabled */
    SAMD21_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    19c8:	2802      	cmp	r0, #2
    19ca:	dd03      	ble.n	19d4 <hal_timer_config+0x10>
    19cc:	2316      	movs	r3, #22

    return 0;

err:
    return rc;
}
    19ce:	0018      	movs	r0, r3
    19d0:	b011      	add	sp, #68	; 0x44
    19d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SAMD21_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    19d4:	4b3d      	ldr	r3, [pc, #244]	; (1acc <hal_timer_config+0x108>)
    19d6:	0080      	lsls	r0, r0, #2
    19d8:	58c6      	ldr	r6, [r0, r3]
    19da:	2e00      	cmp	r6, #0
    19dc:	d0f6      	beq.n	19cc <hal_timer_config+0x8>
    if (bsptimer->tmr_enabled || (bsptimer->tmr_initialized == 0) ||
    19de:	7834      	ldrb	r4, [r6, #0]
    19e0:	2c00      	cmp	r4, #0
    19e2:	d1f3      	bne.n	19cc <hal_timer_config+0x8>
    19e4:	78f3      	ldrb	r3, [r6, #3]
    19e6:	2b00      	cmp	r3, #0
    19e8:	d0f0      	beq.n	19cc <hal_timer_config+0x8>
    19ea:	2900      	cmp	r1, #0
    19ec:	d0ee      	beq.n	19cc <hal_timer_config+0x8>
	config->clock_source               = GCLK_GENERATOR_0;
    19ee:	ad03      	add	r5, sp, #12
    19f0:	702c      	strb	r4, [r5, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    19f2:	70ac      	strb	r4, [r5, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    19f4:	80ac      	strh	r4, [r5, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    19f6:	71ac      	strb	r4, [r5, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    19f8:	812c      	strh	r4, [r5, #8]
	config->run_in_standby             = false;
    19fa:	706c      	strb	r4, [r5, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    19fc:	72ac      	strb	r4, [r5, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    19fe:	72ec      	strb	r4, [r5, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1a00:	732c      	strb	r4, [r5, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1a02:	73ac      	strb	r4, [r5, #14]
	config->oneshot                    = false;
    1a04:	736c      	strb	r4, [r5, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1a06:	742c      	strb	r4, [r5, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1a08:	616c      	str	r4, [r5, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1a0a:	61ac      	str	r4, [r5, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1a0c:	772c      	strb	r4, [r5, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1a0e:	940b      	str	r4, [sp, #44]	; 0x2c
    1a10:	940c      	str	r4, [sp, #48]	; 0x30
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1a12:	940d      	str	r4, [sp, #52]	; 0x34
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1a14:	85ac      	strh	r4, [r5, #44]	; 0x2c
    1a16:	78b3      	ldrb	r3, [r6, #2]
    1a18:	3b03      	subs	r3, #3
    1a1a:	b2db      	uxtb	r3, r3
    1a1c:	2b05      	cmp	r3, #5
    1a1e:	d852      	bhi.n	1ac6 <hal_timer_config+0x102>
    1a20:	4a2b      	ldr	r2, [pc, #172]	; (1ad0 <hal_timer_config+0x10c>)
    1a22:	009b      	lsls	r3, r3, #2
    1a24:	589f      	ldr	r7, [r3, r2]
err:
    1a26:	0023      	movs	r3, r4
    if (rc || (freq_hz > max_frequency) || (div == 0) || (div > 1024)) {
    1a28:	428f      	cmp	r7, r1
    1a2a:	d3d0      	bcc.n	19ce <hal_timer_config+0xa>
    div = max_frequency / freq_hz;
    1a2c:	0038      	movs	r0, r7
    1a2e:	f001 fd61 	bl	34f4 <__udivsi3>
    if (rc || (freq_hz > max_frequency) || (div == 0) || (div > 1024)) {
    1a32:	4a28      	ldr	r2, [pc, #160]	; (1ad4 <hal_timer_config+0x110>)
    1a34:	1e41      	subs	r1, r0, #1
err:
    1a36:	0023      	movs	r3, r4
    if (rc || (freq_hz > max_frequency) || (div == 0) || (div > 1024)) {
    1a38:	4291      	cmp	r1, r2
    1a3a:	d8c8      	bhi.n	19ce <hal_timer_config+0xa>
    if (div == 1) {
    1a3c:	2801      	cmp	r0, #1
    1a3e:	d011      	beq.n	1a64 <hal_timer_config+0xa0>
        prescaler_reg = 1;
    1a40:	3301      	adds	r3, #1
        prescaler = 1;
    1a42:	001c      	movs	r4, r3
            if (div <= (1 << prescaler)) {
    1a44:	2101      	movs	r1, #1
    1a46:	40a1      	lsls	r1, r4
    1a48:	9101      	str	r1, [sp, #4]
    1a4a:	4281      	cmp	r1, r0
    1a4c:	d330      	bcc.n	1ab0 <hal_timer_config+0xec>
                min_delta = div - (1 << (prescaler - 1));
    1a4e:	2101      	movs	r1, #1
    1a50:	1e62      	subs	r2, r4, #1
    1a52:	4091      	lsls	r1, r2
    1a54:	4694      	mov	ip, r2
    1a56:	1a42      	subs	r2, r0, r1
                max_delta = (1 << prescaler) - div;
    1a58:	9901      	ldr	r1, [sp, #4]
    1a5a:	1a08      	subs	r0, r1, r0
                if (min_delta < max_delta) {
    1a5c:	4282      	cmp	r2, r0
    1a5e:	d201      	bcs.n	1a64 <hal_timer_config+0xa0>
                    prescaler -= 1;
    1a60:	4662      	mov	r2, ip
    1a62:	b2d4      	uxtb	r4, r2
    cfg.clock_prescaler = prescaler_reg << TC_CTRLA_PRESCALER_Pos;
    1a64:	021b      	lsls	r3, r3, #8
    1a66:	80ab      	strh	r3, [r5, #4]
    cfg.clock_source = bsptimer->tmr_clkgen;
    1a68:	1c73      	adds	r3, r6, #1
    1a6a:	7fd8      	ldrb	r0, [r3, #31]
    1a6c:	7028      	strb	r0, [r5, #0]
    system_gclk_gen_enable(bsptimer->tmr_clkgen);
    1a6e:	f7fe fbeb 	bl	248 <system_gclk_gen_enable>
    tc_rc = tc_init(&bsptimer->tc_mod, bsptimer->tc_mod.hw, &cfg);
    1a72:	0030      	movs	r0, r6
    1a74:	002a      	movs	r2, r5
    1a76:	69b1      	ldr	r1, [r6, #24]
    1a78:	3018      	adds	r0, #24
    1a7a:	f000 fec1 	bl	2800 <tc_init>
    if (tc_rc == STATUS_OK) {
    1a7e:	2800      	cmp	r0, #0
    1a80:	d1a4      	bne.n	19cc <hal_timer_config+0x8>
        bsptimer->tc_mod.hw->COUNT16.INTENSET.reg = TC_INTFLAG_OVF;
    1a82:	2201      	movs	r2, #1
    1a84:	69b3      	ldr	r3, [r6, #24]
    1a86:	735a      	strb	r2, [r3, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a88:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    1a8a:	b252      	sxtb	r2, r2
    1a8c:	2a00      	cmp	r2, #0
    1a8e:	dbfb      	blt.n	1a88 <hal_timer_config+0xc4>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1a90:	2202      	movs	r2, #2
    1a92:	8819      	ldrh	r1, [r3, #0]
    bsptimer->tmr_freq = max_frequency / (1 << prescaler);
    1a94:	40e7      	lsrs	r7, r4
    1a96:	430a      	orrs	r2, r1
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1a98:	211f      	movs	r1, #31
    1a9a:	801a      	strh	r2, [r3, #0]
    bsptimer->tmr_enabled = 1;
    1a9c:	2301      	movs	r3, #1
    1a9e:	7872      	ldrb	r2, [r6, #1]
    1aa0:	7033      	strb	r3, [r6, #0]
    1aa2:	400a      	ands	r2, r1
    1aa4:	4093      	lsls	r3, r2
    1aa6:	4a0c      	ldr	r2, [pc, #48]	; (1ad8 <hal_timer_config+0x114>)
    bsptimer->tmr_freq = max_frequency / (1 << prescaler);
    1aa8:	60f7      	str	r7, [r6, #12]
    1aaa:	6013      	str	r3, [r2, #0]
    return 0;
    1aac:	2300      	movs	r3, #0
    1aae:	e78e      	b.n	19ce <hal_timer_config+0xa>
            if (prescaler < 4) {
    1ab0:	2c03      	cmp	r4, #3
    1ab2:	d806      	bhi.n	1ac2 <hal_timer_config+0xfe>
                ++prescaler;
    1ab4:	3401      	adds	r4, #1
            ++prescaler_reg;
    1ab6:	3301      	adds	r3, #1
                prescaler += 2;
    1ab8:	b2e4      	uxtb	r4, r4
            ++prescaler_reg;
    1aba:	b29b      	uxth	r3, r3
        while (prescaler < 11) {
    1abc:	2c0a      	cmp	r4, #10
    1abe:	d9c1      	bls.n	1a44 <hal_timer_config+0x80>
    1ac0:	e7d0      	b.n	1a64 <hal_timer_config+0xa0>
                prescaler += 2;
    1ac2:	3402      	adds	r4, #2
    1ac4:	e7f7      	b.n	1ab6 <hal_timer_config+0xf2>
    switch (bsptimer->tmr_srcclk) {
    1ac6:	2301      	movs	r3, #1
    1ac8:	425b      	negs	r3, r3
    1aca:	e780      	b.n	19ce <hal_timer_config+0xa>
    1acc:	00003a20 	.word	0x00003a20
    1ad0:	00003a08 	.word	0x00003a08
    1ad4:	000003ff 	.word	0x000003ff
    1ad8:	e000e100 	.word	0xe000e100

00001adc <fill_tx_buf>:
    void *u_func_arg;
    const struct samd21_uart_config *u_cfg;
};
static struct hal_uart uarts[UART_CNT];

static int fill_tx_buf(struct hal_uart *u) {
    1adc:	b570      	push	{r4, r5, r6, lr}
    1ade:	0005      	movs	r5, r0
    int i;

    for(i = 0; i < TX_BUFFER_SIZE; i++) {
    1ae0:	2400      	movs	r4, #0
        int val;
        val = u->u_tx_func(u->u_func_arg);
    1ae2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1ae4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    1ae6:	4798      	blx	r3
        if(val < 0) {
    1ae8:	2800      	cmp	r0, #0
    1aea:	db05      	blt.n	1af8 <fill_tx_buf+0x1c>
            break;
        }
        u->txdata[i] = val;
    1aec:	0023      	movs	r3, r4
    for(i = 0; i < TX_BUFFER_SIZE; i++) {
    1aee:	3401      	adds	r4, #1
        u->txdata[i] = val;
    1af0:	3338      	adds	r3, #56	; 0x38
    1af2:	54e8      	strb	r0, [r5, r3]
    for(i = 0; i < TX_BUFFER_SIZE; i++) {
    1af4:	2c08      	cmp	r4, #8
    1af6:	d1f4      	bne.n	1ae2 <fill_tx_buf+0x6>
    }
    return i;
}
    1af8:	0020      	movs	r0, r4
    1afa:	bd70      	pop	{r4, r5, r6, pc}

00001afc <usart_callback_rx>:

static void
usart_callback_rx(struct usart_module *const module) {
    struct hal_uart *u = (struct hal_uart*) module;

    if(!u->u_open) {
    1afc:	0003      	movs	r3, r0
usart_callback_rx(struct usart_module *const module) {
    1afe:	b510      	push	{r4, lr}
    if(!u->u_open) {
    1b00:	3334      	adds	r3, #52	; 0x34
    1b02:	781b      	ldrb	r3, [r3, #0]
usart_callback_rx(struct usart_module *const module) {
    1b04:	0004      	movs	r4, r0
    if(!u->u_open) {
    1b06:	2b00      	cmp	r3, #0
    1b08:	d00b      	beq.n	1b22 <usart_callback_rx+0x26>
        return;
    }

    if(u->u_rx_func) {
    1b0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d003      	beq.n	1b18 <usart_callback_rx+0x1c>
        u->u_rx_func(u->u_func_arg, (uint8_t) u->rxdata);
    1b10:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    1b12:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    1b14:	b2c9      	uxtb	r1, r1
    1b16:	4798      	blx	r3
    }
    usart_read_job(&u->instance, (uint16_t*) &u->rxdata);
    1b18:	0021      	movs	r1, r4
    1b1a:	0020      	movs	r0, r4
    1b1c:	3136      	adds	r1, #54	; 0x36
    1b1e:	f000 fd38 	bl	2592 <usart_read_job>
}
    1b22:	bd10      	pop	{r4, pc}

00001b24 <usart_callback_txdone>:
    if(!u->u_open) {
    1b24:	0003      	movs	r3, r0
usart_callback_txdone(struct usart_module *const module) {
    1b26:	b510      	push	{r4, lr}
    if(!u->u_open) {
    1b28:	3334      	adds	r3, #52	; 0x34
    1b2a:	781b      	ldrb	r3, [r3, #0]
usart_callback_txdone(struct usart_module *const module) {
    1b2c:	0004      	movs	r4, r0
    if(!u->u_open) {
    1b2e:	2b00      	cmp	r3, #0
    1b30:	d00d      	beq.n	1b4e <usart_callback_txdone+0x2a>
    sz = fill_tx_buf(u);
    1b32:	f7ff ffd3 	bl	1adc <fill_tx_buf>
    1b36:	0023      	movs	r3, r4
    1b38:	3335      	adds	r3, #53	; 0x35
    if(sz > 0) {
    1b3a:	2800      	cmp	r0, #0
    1b3c:	dd08      	ble.n	1b50 <usart_callback_txdone+0x2c>
        u->tx_on=1;
    1b3e:	2201      	movs	r2, #1
        usart_write_buffer_job(&u->instance, u->txdata, sz);
    1b40:	0021      	movs	r1, r4
        u->tx_on=1;
    1b42:	701a      	strb	r2, [r3, #0]
        usart_write_buffer_job(&u->instance, u->txdata, sz);
    1b44:	3138      	adds	r1, #56	; 0x38
    1b46:	b282      	uxth	r2, r0
    1b48:	0020      	movs	r0, r4
    1b4a:	f000 fd27 	bl	259c <usart_write_buffer_job>
}
    1b4e:	bd10      	pop	{r4, pc}
        u->tx_on = 0;
    1b50:	2200      	movs	r2, #0
    1b52:	701a      	strb	r2, [r3, #0]
        if(u->u_tx_done) {
    1b54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1b56:	4293      	cmp	r3, r2
    1b58:	d0f9      	beq.n	1b4e <usart_callback_txdone+0x2a>
            u->u_tx_done(u->u_func_arg);
    1b5a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    1b5c:	4798      	blx	r3
    1b5e:	e7f6      	b.n	1b4e <usart_callback_txdone+0x2a>

00001b60 <hal_uart_init_cbs>:

int
hal_uart_init_cbs(int port, hal_uart_tx_char tx_func, hal_uart_tx_done tx_done,
  hal_uart_rx_char rx_func, void *arg)
{
    1b60:	b510      	push	{r4, lr}
    struct hal_uart *u;

    u = &uarts[port];
    if (port >= UART_CNT || u->u_open) {
    1b62:	2805      	cmp	r0, #5
    1b64:	dc0e      	bgt.n	1b84 <hal_uart_init_cbs+0x24>
    1b66:	2454      	movs	r4, #84	; 0x54
    1b68:	4360      	muls	r0, r4
    1b6a:	4c08      	ldr	r4, [pc, #32]	; (1b8c <hal_uart_init_cbs+0x2c>)
    1b6c:	1824      	adds	r4, r4, r0
    1b6e:	0020      	movs	r0, r4
    1b70:	3034      	adds	r0, #52	; 0x34
    1b72:	7800      	ldrb	r0, [r0, #0]
    1b74:	2800      	cmp	r0, #0
    1b76:	d105      	bne.n	1b84 <hal_uart_init_cbs+0x24>
        return -1;
    }
    u->u_rx_func = rx_func;
    1b78:	6423      	str	r3, [r4, #64]	; 0x40
    u->u_tx_func = tx_func;
    u->u_tx_done = tx_done;
    u->u_func_arg = arg;
    1b7a:	9b02      	ldr	r3, [sp, #8]
    u->u_tx_func = tx_func;
    1b7c:	6461      	str	r1, [r4, #68]	; 0x44
    u->u_tx_done = tx_done;
    1b7e:	64a2      	str	r2, [r4, #72]	; 0x48
    u->u_func_arg = arg;
    1b80:	64e3      	str	r3, [r4, #76]	; 0x4c
    return 0;
}
    1b82:	bd10      	pop	{r4, pc}
        return -1;
    1b84:	2001      	movs	r0, #1
    1b86:	4240      	negs	r0, r0
    1b88:	e7fb      	b.n	1b82 <hal_uart_init_cbs+0x22>
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	200010f4 	.word	0x200010f4

00001b90 <hal_uart_start_rx>:

void
hal_uart_start_rx(int port)
{
    1b90:	b510      	push	{r4, lr}
    struct hal_uart *u;

    u = &uarts[port];
    if (port >= UART_CNT || !u->u_open) {
    1b92:	2805      	cmp	r0, #5
    1b94:	dc0c      	bgt.n	1bb0 <hal_uart_start_rx+0x20>
    1b96:	2354      	movs	r3, #84	; 0x54
    1b98:	4343      	muls	r3, r0
    1b9a:	4906      	ldr	r1, [pc, #24]	; (1bb4 <hal_uart_start_rx+0x24>)
    1b9c:	18c8      	adds	r0, r1, r3
    1b9e:	0002      	movs	r2, r0
    1ba0:	3234      	adds	r2, #52	; 0x34
    1ba2:	7812      	ldrb	r2, [r2, #0]
    1ba4:	2a00      	cmp	r2, #0
    1ba6:	d003      	beq.n	1bb0 <hal_uart_start_rx+0x20>
        return;
    }
    usart_read_job(&u->instance, (uint16_t*) &u->rxdata);
    1ba8:	3336      	adds	r3, #54	; 0x36
    1baa:	1859      	adds	r1, r3, r1
    1bac:	f000 fcf1 	bl	2592 <usart_read_job>
}
    1bb0:	bd10      	pop	{r4, pc}
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	200010f4 	.word	0x200010f4

00001bb8 <hal_uart_start_tx>:

void
hal_uart_start_tx(int port)
{
    1bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct hal_uart *u;
    u = &uarts[port];
    if (port >= UART_CNT || !u->u_open) {
    1bba:	2805      	cmp	r0, #5
    1bbc:	dc1e      	bgt.n	1bfc <hal_uart_start_tx+0x44>
    1bbe:	2454      	movs	r4, #84	; 0x54
    1bc0:	4344      	muls	r4, r0
    1bc2:	4e0f      	ldr	r6, [pc, #60]	; (1c00 <hal_uart_start_tx+0x48>)
    1bc4:	1935      	adds	r5, r6, r4
    1bc6:	002b      	movs	r3, r5
    1bc8:	3334      	adds	r3, #52	; 0x34
    1bca:	781b      	ldrb	r3, [r3, #0]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d015      	beq.n	1bfc <hal_uart_start_tx+0x44>
        return;
    }

    if(u->tx_on) {
    1bd0:	002f      	movs	r7, r5
    1bd2:	3735      	adds	r7, #53	; 0x35
    1bd4:	783b      	ldrb	r3, [r7, #0]
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	d110      	bne.n	1bfc <hal_uart_start_tx+0x44>
        /* we are already transmitting */
        return;
    }

    if(u->u_tx_func) {
    1bda:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d00d      	beq.n	1bfc <hal_uart_start_tx+0x44>
        int sz;
        sz = fill_tx_buf(u);
    1be0:	0028      	movs	r0, r5
    1be2:	f7ff ff7b 	bl	1adc <fill_tx_buf>
        if(sz > 0) {
    1be6:	2800      	cmp	r0, #0
    1be8:	dd08      	ble.n	1bfc <hal_uart_start_tx+0x44>
            u->tx_on=1;
            usart_write_buffer_job(&u->instance, u->txdata, sz);
    1bea:	0021      	movs	r1, r4
            u->tx_on=1;
    1bec:	2301      	movs	r3, #1
            usart_write_buffer_job(&u->instance, u->txdata, sz);
    1bee:	3138      	adds	r1, #56	; 0x38
    1bf0:	b282      	uxth	r2, r0
            u->tx_on=1;
    1bf2:	703b      	strb	r3, [r7, #0]
            usart_write_buffer_job(&u->instance, u->txdata, sz);
    1bf4:	1989      	adds	r1, r1, r6
    1bf6:	0028      	movs	r0, r5
    1bf8:	f000 fcd0 	bl	259c <usart_write_buffer_job>
        }
    }
}
    1bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bfe:	46c0      	nop			; (mov r8, r8)
    1c00:	200010f4 	.word	0x200010f4

00001c04 <hal_uart_blocking_tx>:

void
hal_uart_blocking_tx(int port, uint8_t data)
{
    1c04:	0003      	movs	r3, r0
    struct hal_uart *u;
    u = &uarts[port];

    if(!u->u_open) {
    1c06:	2054      	movs	r0, #84	; 0x54
    1c08:	4358      	muls	r0, r3
    1c0a:	4b0a      	ldr	r3, [pc, #40]	; (1c34 <hal_uart_blocking_tx+0x30>)
{
    1c0c:	b570      	push	{r4, r5, r6, lr}
    if(!u->u_open) {
    1c0e:	1818      	adds	r0, r3, r0
    1c10:	0003      	movs	r3, r0
    1c12:	3334      	adds	r3, #52	; 0x34
    1c14:	781b      	ldrb	r3, [r3, #0]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d00b      	beq.n	1c32 <hal_uart_blocking_tx+0x2e>
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    1c1a:	0004      	movs	r4, r0
    1c1c:	2501      	movs	r5, #1
    1c1e:	3431      	adds	r4, #49	; 0x31
    1c20:	7823      	ldrb	r3, [r4, #0]
        return;
    }

    usart_disable_callback(&u->instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    usart_write_wait(&u->instance, data);
    1c22:	b289      	uxth	r1, r1
    1c24:	43ab      	bics	r3, r5
    1c26:	7023      	strb	r3, [r4, #0]
    1c28:	f000 fc52 	bl	24d0 <usart_write_wait>
	module->callback_enable_mask |= (1 << callback_type);
    1c2c:	7823      	ldrb	r3, [r4, #0]
    1c2e:	431d      	orrs	r5, r3
    1c30:	7025      	strb	r5, [r4, #0]
    usart_enable_callback(&u->instance, USART_CALLBACK_BUFFER_TRANSMITTED);
}
    1c32:	bd70      	pop	{r4, r5, r6, pc}
    1c34:	200010f4 	.word	0x200010f4

00001c38 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
    1c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c3a:	b095      	sub	sp, #84	; 0x54
    1c3c:	9202      	str	r2, [sp, #8]
    1c3e:	aa1a      	add	r2, sp, #104	; 0x68
    1c40:	7816      	ldrb	r6, [r2, #0]
    1c42:	aa1b      	add	r2, sp, #108	; 0x6c
    1c44:	7812      	ldrb	r2, [r2, #0]
    1c46:	0005      	movs	r5, r0
    1c48:	9203      	str	r2, [sp, #12]
    struct usart_config config_usart;
    const struct samd21_uart_config *samd21_cfg;
    SercomUsart *su;
    int i;

    if (uarts[port].u_open) {
    1c4a:	2254      	movs	r2, #84	; 0x54
    1c4c:	4342      	muls	r2, r0
    1c4e:	4861      	ldr	r0, [pc, #388]	; (1dd4 <hal_uart_config+0x19c>)
{
    1c50:	9101      	str	r1, [sp, #4]
    if (uarts[port].u_open) {
    1c52:	1880      	adds	r0, r0, r2
    1c54:	0002      	movs	r2, r0
    1c56:	3234      	adds	r2, #52	; 0x34
    1c58:	7812      	ldrb	r2, [r2, #0]
{
    1c5a:	9300      	str	r3, [sp, #0]
    if (uarts[port].u_open) {
    1c5c:	2a00      	cmp	r2, #0
    1c5e:	d003      	beq.n	1c68 <hal_uart_config+0x30>
            break;
        case 9:
            config_usart.character_size = USART_CHARACTER_SIZE_9BIT;
            break;
        default:
            return -1;
    1c60:	2001      	movs	r0, #1
    1c62:	4240      	negs	r0, r0
    uarts[port].u_open = 1;

    hal_uart_start_rx(port);

    return 0;
}
    1c64:	b015      	add	sp, #84	; 0x54
    1c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    samd21_cfg = uarts[port].u_cfg;
    1c68:	6d04      	ldr	r4, [r0, #80]	; 0x50
    if (!samd21_cfg) {
    1c6a:	2c00      	cmp	r4, #0
    1c6c:	d0f8      	beq.n	1c60 <hal_uart_config+0x28>
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1c6e:	2080      	movs	r0, #128	; 0x80
    1c70:	05c0      	lsls	r0, r0, #23
    1c72:	9004      	str	r0, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
	config->parity           = USART_PARITY_NONE;
    1c74:	20ff      	movs	r0, #255	; 0xff
    1c76:	af04      	add	r7, sp, #16
    1c78:	8138      	strh	r0, [r7, #8]
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1c7a:	2001      	movs	r0, #1
	config->stopbits         = USART_STOPBITS_1;
    1c7c:	72ba      	strb	r2, [r7, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1c7e:	72fa      	strb	r2, [r7, #11]
	config->receiver_enable  = true;
    1c80:	3705      	adds	r7, #5
    1c82:	77f8      	strb	r0, [r7, #31]
	config->transmitter_enable = true;
    1c84:	af04      	add	r7, sp, #16
    1c86:	3706      	adds	r7, #6
    1c88:	77f8      	strb	r0, [r7, #31]
	config->clock_polarity_inverted = false;
    1c8a:	af04      	add	r7, sp, #16
    1c8c:	3707      	adds	r7, #7
    1c8e:	77fa      	strb	r2, [r7, #31]
	config->use_external_clock = false;
    1c90:	af06      	add	r7, sp, #24
    1c92:	77fa      	strb	r2, [r7, #31]
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1c94:	2788      	movs	r7, #136	; 0x88
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
    1c96:	2113      	movs	r1, #19
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1c98:	037f      	lsls	r7, r7, #13
    1c9a:	9707      	str	r7, [sp, #28]
	config->run_in_standby   = false;
    1c9c:	af0f      	add	r7, sp, #60	; 0x3c
    1c9e:	703a      	strb	r2, [r7, #0]
	config->receive_pulse_length                    = 19;
    1ca0:	468c      	mov	ip, r1
	config->generator_source = GCLK_GENERATOR_0;
    1ca2:	272d      	movs	r7, #45	; 0x2d
    1ca4:	ab04      	add	r3, sp, #16
	config->receive_pulse_length                    = 19;
    1ca6:	0019      	movs	r1, r3
	config->generator_source = GCLK_GENERATOR_0;
    1ca8:	18ff      	adds	r7, r7, r3
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1caa:	821a      	strh	r2, [r3, #16]
	config->lin_slave_enable      = false;
    1cac:	76da      	strb	r2, [r3, #27]
	config->immediate_buffer_overflow_notification  = false;
    1cae:	761a      	strb	r2, [r3, #24]
	config->start_frame_detection_enable            = false;
    1cb0:	771a      	strb	r2, [r3, #28]
	config->encoding_format_enable                  = false;
    1cb2:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    1cb4:	4663      	mov	r3, ip
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1cb6:	774a      	strb	r2, [r1, #29]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1cb8:	9205      	str	r2, [sp, #20]
	config->ext_clock_freq   = 0;
    1cba:	920e      	str	r2, [sp, #56]	; 0x38
	config->generator_source = GCLK_GENERATOR_0;
    1cbc:	703a      	strb	r2, [r7, #0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1cbe:	9210      	str	r2, [sp, #64]	; 0x40
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1cc0:	9211      	str	r2, [sp, #68]	; 0x44
	config->pinmux_pad2      = PINMUX_DEFAULT;
    1cc2:	9212      	str	r2, [sp, #72]	; 0x48
	config->pinmux_pad3      = PINMUX_DEFAULT;
    1cc4:	9213      	str	r2, [sp, #76]	; 0x4c
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1cc6:	9209      	str	r2, [sp, #36]	; 0x24
    switch(databits) {
    1cc8:	9a02      	ldr	r2, [sp, #8]
	config->receive_pulse_length                    = 19;
    1cca:	768b      	strb	r3, [r1, #26]
    config_usart.baudrate    = baudrate;
    1ccc:	9b01      	ldr	r3, [sp, #4]
    switch(databits) {
    1cce:	3a05      	subs	r2, #5
    config_usart.baudrate    = baudrate;
    1cd0:	930c      	str	r3, [sp, #48]	; 0x30
    1cd2:	0001      	movs	r1, r0
    switch(databits) {
    1cd4:	2a04      	cmp	r2, #4
    1cd6:	d8c3      	bhi.n	1c60 <hal_uart_config+0x28>
    1cd8:	0010      	movs	r0, r2
    1cda:	f001 fc01 	bl	34e0 <__gnu_thumb1_case_uqi>
    1cde:	0e03      	.short	0x0e03
    1ce0:	0610      	.short	0x0610
    1ce2:	12          	.byte	0x12
    1ce3:	00          	.byte	0x00
            config_usart.character_size = USART_CHARACTER_SIZE_5BIT;
    1ce4:	2205      	movs	r2, #5
            config_usart.character_size = USART_CHARACTER_SIZE_6BIT;
    1ce6:	ab04      	add	r3, sp, #16
    1ce8:	72da      	strb	r2, [r3, #11]
    switch(parity) {
    1cea:	2e01      	cmp	r6, #1
    1cec:	d00c      	beq.n	1d08 <hal_uart_config+0xd0>
    1cee:	2e00      	cmp	r6, #0
    1cf0:	d00e      	beq.n	1d10 <hal_uart_config+0xd8>
    1cf2:	2e02      	cmp	r6, #2
    1cf4:	d1b4      	bne.n	1c60 <hal_uart_config+0x28>
            config_usart.parity = USART_PARITY_EVEN;
    1cf6:	2200      	movs	r2, #0
    1cf8:	e008      	b.n	1d0c <hal_uart_config+0xd4>
            config_usart.character_size = USART_CHARACTER_SIZE_6BIT;
    1cfa:	2206      	movs	r2, #6
    1cfc:	e7f3      	b.n	1ce6 <hal_uart_config+0xae>
            config_usart.character_size = USART_CHARACTER_SIZE_7BIT;
    1cfe:	2207      	movs	r2, #7
    1d00:	e7f1      	b.n	1ce6 <hal_uart_config+0xae>
            config_usart.character_size = USART_CHARACTER_SIZE_9BIT;
    1d02:	ab04      	add	r3, sp, #16
    1d04:	72d9      	strb	r1, [r3, #11]
            break;
    1d06:	e7f0      	b.n	1cea <hal_uart_config+0xb2>
            config_usart.parity = USART_PARITY_ODD;
    1d08:	2280      	movs	r2, #128	; 0x80
    1d0a:	0192      	lsls	r2, r2, #6
            config_usart.parity = USART_PARITY_EVEN;
    1d0c:	ab04      	add	r3, sp, #16
    1d0e:	811a      	strh	r2, [r3, #8]
    switch(stopbits) {
    1d10:	9b00      	ldr	r3, [sp, #0]
    1d12:	2b01      	cmp	r3, #1
    1d14:	d004      	beq.n	1d20 <hal_uart_config+0xe8>
    1d16:	2b02      	cmp	r3, #2
    1d18:	d1a2      	bne.n	1c60 <hal_uart_config+0x28>
            config_usart.stopbits = USART_STOPBITS_2;
    1d1a:	333e      	adds	r3, #62	; 0x3e
    1d1c:	aa04      	add	r2, sp, #16
    1d1e:	7293      	strb	r3, [r2, #10]
    switch(flow_ctl) {
    1d20:	9b03      	ldr	r3, [sp, #12]
    1d22:	2b01      	cmp	r3, #1
    1d24:	d89c      	bhi.n	1c60 <hal_uart_config+0x28>
    config_usart.mux_setting       = samd21_cfg->suc_mux_setting;
    1d26:	6863      	ldr	r3, [r4, #4]
    config_usart.sample_rate       = samd21_cfg->suc_sample_rate;
    1d28:	aa04      	add	r2, sp, #16
    config_usart.mux_setting       = samd21_cfg->suc_mux_setting;
    1d2a:	9307      	str	r3, [sp, #28]
    config_usart.generator_source  = samd21_cfg->suc_generator_source;
    1d2c:	7a23      	ldrb	r3, [r4, #8]
    su = &samd21_cfg->suc_sercom->USART;
    1d2e:	6821      	ldr	r1, [r4, #0]
    config_usart.generator_source  = samd21_cfg->suc_generator_source;
    1d30:	703b      	strb	r3, [r7, #0]
    config_usart.sample_adjustment = samd21_cfg->suc_sample_adjustment;
    1d32:	68e3      	ldr	r3, [r4, #12]
    1d34:	9309      	str	r3, [sp, #36]	; 0x24
    config_usart.sample_rate       = samd21_cfg->suc_sample_rate;
    1d36:	8963      	ldrh	r3, [r4, #10]
    1d38:	8213      	strh	r3, [r2, #16]
    su->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1d3a:	2202      	movs	r2, #2
    config_usart.pinmux_pad0       = samd21_cfg->suc_pad0;
    1d3c:	6923      	ldr	r3, [r4, #16]
    1d3e:	9310      	str	r3, [sp, #64]	; 0x40
    config_usart.pinmux_pad1       = samd21_cfg->suc_pad1;
    1d40:	6963      	ldr	r3, [r4, #20]
    1d42:	9311      	str	r3, [sp, #68]	; 0x44
    config_usart.pinmux_pad2       = samd21_cfg->suc_pad2;
    1d44:	69a3      	ldr	r3, [r4, #24]
    1d46:	9312      	str	r3, [sp, #72]	; 0x48
    config_usart.pinmux_pad3       = samd21_cfg->suc_pad3;
    1d48:	69e3      	ldr	r3, [r4, #28]
    1d4a:	9313      	str	r3, [sp, #76]	; 0x4c
    su->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1d4c:	680b      	ldr	r3, [r1, #0]
    1d4e:	4393      	bics	r3, r2
    1d50:	600b      	str	r3, [r1, #0]
    su->CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    1d52:	2301      	movs	r3, #1
    1d54:	680a      	ldr	r2, [r1, #0]
    1d56:	431a      	orrs	r2, r3
    1d58:	600a      	str	r2, [r1, #0]
    1d5a:	2264      	movs	r2, #100	; 0x64
        if ((su->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) == 0) {
    1d5c:	6808      	ldr	r0, [r1, #0]
    1d5e:	4218      	tst	r0, r3
    1d60:	d002      	beq.n	1d68 <hal_uart_config+0x130>
    1d62:	3a01      	subs	r2, #1
    for (i = 0; i < 100; i++) {
    1d64:	2a00      	cmp	r2, #0
    1d66:	d1f9      	bne.n	1d5c <hal_uart_config+0x124>
    struct usart_module *pinst = &uarts[port].instance;
    1d68:	2654      	movs	r6, #84	; 0x54
    1d6a:	436e      	muls	r6, r5
    1d6c:	4c19      	ldr	r4, [pc, #100]	; (1dd4 <hal_uart_config+0x19c>)
    if (usart_init(pinst, samd21_cfg->suc_sercom, &config_usart) != STATUS_OK) {
    1d6e:	aa04      	add	r2, sp, #16
    struct usart_module *pinst = &uarts[port].instance;
    1d70:	1937      	adds	r7, r6, r4
    if (usart_init(pinst, samd21_cfg->suc_sercom, &config_usart) != STATUS_OK) {
    1d72:	0038      	movs	r0, r7
    1d74:	f000 fa66 	bl	2244 <usart_init>
    1d78:	1e02      	subs	r2, r0, #0
    1d7a:	d000      	beq.n	1d7e <hal_uart_config+0x146>
    1d7c:	e770      	b.n	1c60 <hal_uart_config+0x28>
    usart_register_callback(pinst, usart_callback_txdone,
    1d7e:	0038      	movs	r0, r7
    1d80:	4915      	ldr	r1, [pc, #84]	; (1dd8 <hal_uart_config+0x1a0>)
    1d82:	f000 fbfa 	bl	257a <usart_register_callback>
    usart_register_callback(pinst, usart_callback_rx,
    1d86:	0038      	movs	r0, r7
    1d88:	2201      	movs	r2, #1
    1d8a:	4914      	ldr	r1, [pc, #80]	; (1ddc <hal_uart_config+0x1a4>)
    1d8c:	f000 fbf5 	bl	257a <usart_register_callback>
    1d90:	2303      	movs	r3, #3
    1d92:	3731      	adds	r7, #49	; 0x31
    1d94:	783a      	ldrb	r2, [r7, #0]
    1d96:	4313      	orrs	r3, r2
    1d98:	703b      	strb	r3, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d9a:	5937      	ldr	r7, [r6, r4]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1d9c:	0038      	movs	r0, r7
    1d9e:	f000 f9f9 	bl	2194 <_sercom_get_interrupt_vector>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1da2:	231f      	movs	r3, #31
    1da4:	4018      	ands	r0, r3
    1da6:	3b1e      	subs	r3, #30
    1da8:	4083      	lsls	r3, r0
    1daa:	4a0d      	ldr	r2, [pc, #52]	; (1de0 <hal_uart_config+0x1a8>)
    1dac:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1dae:	5933      	ldr	r3, [r6, r4]
	return (usart_hw->SYNCBUSY.reg);
    1db0:	69de      	ldr	r6, [r3, #28]
	while (usart_is_syncing(module)) {
    1db2:	2e00      	cmp	r6, #0
    1db4:	d1fc      	bne.n	1db0 <hal_uart_config+0x178>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1db6:	2302      	movs	r3, #2
    1db8:	683a      	ldr	r2, [r7, #0]
    hal_uart_start_rx(port);
    1dba:	0028      	movs	r0, r5
    1dbc:	4313      	orrs	r3, r2
    1dbe:	603b      	str	r3, [r7, #0]
    uarts[port].u_open = 1;
    1dc0:	2354      	movs	r3, #84	; 0x54
    1dc2:	436b      	muls	r3, r5
    1dc4:	18e4      	adds	r4, r4, r3
    1dc6:	2301      	movs	r3, #1
    1dc8:	3434      	adds	r4, #52	; 0x34
    1dca:	7023      	strb	r3, [r4, #0]
    hal_uart_start_rx(port);
    1dcc:	f7ff fee0 	bl	1b90 <hal_uart_start_rx>
    return 0;
    1dd0:	0030      	movs	r0, r6
    1dd2:	e747      	b.n	1c64 <hal_uart_config+0x2c>
    1dd4:	200010f4 	.word	0x200010f4
    1dd8:	00001b25 	.word	0x00001b25
    1ddc:	00001afd 	.word	0x00001afd
    1de0:	e000e100 	.word	0xe000e100

00001de4 <hal_uart_close>:

int
hal_uart_close(int port)
{
    1de4:	b570      	push	{r4, r5, r6, lr}
	module->callback_enable_mask &= ~(1 << callback_type);
    1de6:	2454      	movs	r4, #84	; 0x54
    1de8:	2103      	movs	r1, #3
    1dea:	4344      	muls	r4, r0
    1dec:	4d0c      	ldr	r5, [pc, #48]	; (1e20 <hal_uart_close+0x3c>)
    1dee:	192b      	adds	r3, r5, r4
    1df0:	3331      	adds	r3, #49	; 0x31
    1df2:	781a      	ldrb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1df4:	5966      	ldr	r6, [r4, r5]
    1df6:	438a      	bics	r2, r1
    1df8:	701a      	strb	r2, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1dfa:	0030      	movs	r0, r6
    1dfc:	f000 f9ca 	bl	2194 <_sercom_get_interrupt_vector>
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e00:	231f      	movs	r3, #31
    1e02:	4018      	ands	r0, r3
    1e04:	3b1e      	subs	r3, #30
    1e06:	4083      	lsls	r3, r0
    1e08:	4a06      	ldr	r2, [pc, #24]	; (1e24 <hal_uart_close+0x40>)
    1e0a:	67d3      	str	r3, [r2, #124]	; 0x7c
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e0c:	5963      	ldr	r3, [r4, r5]
	return (usart_hw->SYNCBUSY.reg);
    1e0e:	69d8      	ldr	r0, [r3, #28]
	while (usart_is_syncing(module)) {
    1e10:	2800      	cmp	r0, #0
    1e12:	d1fc      	bne.n	1e0e <hal_uart_close+0x2a>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1e14:	2202      	movs	r2, #2
    1e16:	6833      	ldr	r3, [r6, #0]
    1e18:	4393      	bics	r3, r2
    1e1a:	6033      	str	r3, [r6, #0]
    usart_disable_callback(pinst, USART_CALLBACK_BUFFER_TRANSMITTED);
    usart_disable_callback(pinst, USART_CALLBACK_BUFFER_RECEIVED);
    usart_disable(pinst);

    return 0;
}
    1e1c:	bd70      	pop	{r4, r5, r6, pc}
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	200010f4 	.word	0x200010f4
    1e24:	e000e104 	.word	0xe000e104

00001e28 <hal_uart_init>:
int
hal_uart_init(int port, void *arg)
{
    struct hal_uart *u;

    if (port >= UART_CNT) {
    1e28:	2805      	cmp	r0, #5
    1e2a:	dc06      	bgt.n	1e3a <hal_uart_init+0x12>
        return -1;
    }
    u = &uarts[port];
    u->u_cfg = (const struct samd21_uart_config *)arg;
    1e2c:	2354      	movs	r3, #84	; 0x54
    1e2e:	4343      	muls	r3, r0
    1e30:	4803      	ldr	r0, [pc, #12]	; (1e40 <hal_uart_init+0x18>)
    1e32:	18c0      	adds	r0, r0, r3
    1e34:	6501      	str	r1, [r0, #80]	; 0x50

    return 0;
    1e36:	2000      	movs	r0, #0
}
    1e38:	4770      	bx	lr
        return -1;
    1e3a:	2001      	movs	r0, #1
    1e3c:	4240      	negs	r0, r0
    1e3e:	e7fb      	b.n	1e38 <hal_uart_init+0x10>
    1e40:	200010f4 	.word	0x200010f4

00001e44 <hal_watchdog_tickle>:
    wdt_set_config(&g_wdt_config);
}

void
hal_watchdog_tickle(void)
{
    1e44:	b510      	push	{r4, lr}
    wdt_reset_count();
    1e46:	f000 fe17 	bl	2a78 <wdt_reset_count>
}
    1e4a:	bd10      	pop	{r4, pc}

00001e4c <nvm_is_ready>:
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    1e4c:	4b02      	ldr	r3, [pc, #8]	; (1e58 <nvm_is_ready+0xc>)
    1e4e:	7d18      	ldrb	r0, [r3, #20]
    1e50:	2301      	movs	r3, #1
    1e52:	4018      	ands	r0, r3
}
    1e54:	4770      	bx	lr
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	41004000 	.word	0x41004000

00001e5c <nvm_set_config>:
			PM->APBBMASK.reg |= mask;
    1e5c:	2304      	movs	r3, #4
    1e5e:	4a1c      	ldr	r2, [pc, #112]	; (1ed0 <nvm_set_config+0x74>)
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    1e60:	b570      	push	{r4, r5, r6, lr}
    1e62:	69d1      	ldr	r1, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    1e64:	4c1b      	ldr	r4, [pc, #108]	; (1ed4 <nvm_set_config+0x78>)
    1e66:	430b      	orrs	r3, r1
    1e68:	61d3      	str	r3, [r2, #28]
    1e6a:	2320      	movs	r3, #32
    1e6c:	8b22      	ldrh	r2, [r4, #24]
    1e6e:	33ff      	adds	r3, #255	; 0xff
    1e70:	4313      	orrs	r3, r2
    1e72:	8323      	strh	r3, [r4, #24]
{
    1e74:	0005      	movs	r5, r0

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1e76:	f7ff ffe9 	bl	1e4c <nvm_is_ready>
    1e7a:	0003      	movs	r3, r0
		return STATUS_BUSY;
    1e7c:	2005      	movs	r0, #5
	if (!nvm_is_ready()) {
    1e7e:	2b00      	cmp	r3, #0
    1e80:	d024      	beq.n	1ecc <nvm_set_config+0x70>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1e82:	20c0      	movs	r0, #192	; 0xc0
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1e84:	786a      	ldrb	r2, [r5, #1]
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1e86:	78eb      	ldrb	r3, [r5, #3]
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1e88:	01d1      	lsls	r1, r2, #7
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1e8a:	049b      	lsls	r3, r3, #18
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1e8c:	430b      	orrs	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1e8e:	7829      	ldrb	r1, [r5, #0]
    1e90:	0080      	lsls	r0, r0, #2
    1e92:	0209      	lsls	r1, r1, #8
    1e94:	4001      	ands	r1, r0
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1e96:	201e      	movs	r0, #30
    1e98:	430b      	orrs	r3, r1
    1e9a:	78a9      	ldrb	r1, [r5, #2]
    1e9c:	0049      	lsls	r1, r1, #1
    1e9e:	4001      	ands	r1, r0
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    1ea0:	20c0      	movs	r0, #192	; 0xc0
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1ea2:	430b      	orrs	r3, r1
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    1ea4:	7929      	ldrb	r1, [r5, #4]
    1ea6:	0280      	lsls	r0, r0, #10
    1ea8:	0409      	lsls	r1, r1, #16
    1eaa:	4001      	ands	r1, r0
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    1eac:	2008      	movs	r0, #8
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1eae:	430b      	orrs	r3, r1
	nvm_module->CTRLB.reg =
    1eb0:	6063      	str	r3, [r4, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    1eb2:	68a3      	ldr	r3, [r4, #8]
    1eb4:	4908      	ldr	r1, [pc, #32]	; (1ed8 <nvm_set_config+0x7c>)
    1eb6:	035b      	lsls	r3, r3, #13
    1eb8:	0f5b      	lsrs	r3, r3, #29
    1eba:	4098      	lsls	r0, r3
    1ebc:	8008      	strh	r0, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    1ebe:	68a3      	ldr	r3, [r4, #8]
	_nvm_dev.manual_page_write = config->manual_page_write;
    1ec0:	710a      	strb	r2, [r1, #4]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    1ec2:	804b      	strh	r3, [r1, #2]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1ec4:	8b20      	ldrh	r0, [r4, #24]
    1ec6:	05c0      	lsls	r0, r0, #23
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
    1ec8:	0fc0      	lsrs	r0, r0, #31
    1eca:	0100      	lsls	r0, r0, #4
}
    1ecc:	bd70      	pop	{r4, r5, r6, pc}
    1ece:	46c0      	nop			; (mov r8, r8)
    1ed0:	40000400 	.word	0x40000400
    1ed4:	41004000 	.word	0x41004000
    1ed8:	200012ec 	.word	0x200012ec

00001edc <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    1edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    1ede:	4a25      	ldr	r2, [pc, #148]	; (1f74 <nvm_execute_command+0x98>)
{
    1ee0:	9101      	str	r1, [sp, #4]
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    1ee2:	8853      	ldrh	r3, [r2, #2]
    1ee4:	8811      	ldrh	r1, [r2, #0]
    1ee6:	9a01      	ldr	r2, [sp, #4]
    1ee8:	434b      	muls	r3, r1
{
    1eea:	0004      	movs	r4, r0
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    1eec:	4293      	cmp	r3, r2
    1eee:	d207      	bcs.n	1f00 <nvm_execute_command+0x24>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    1ef0:	2280      	movs	r2, #128	; 0x80
    1ef2:	9b01      	ldr	r3, [sp, #4]
    1ef4:	4920      	ldr	r1, [pc, #128]	; (1f78 <nvm_execute_command+0x9c>)
    1ef6:	0192      	lsls	r2, r2, #6
    1ef8:	185b      	adds	r3, r3, r1
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    1efa:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    1efc:	4293      	cmp	r3, r2
    1efe:	d811      	bhi.n	1f24 <nvm_execute_command+0x48>
	ctrlb_bak = nvm_module->CTRLB.reg;
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    1f00:	2380      	movs	r3, #128	; 0x80
	ctrlb_bak = nvm_module->CTRLB.reg;
    1f02:	4d1e      	ldr	r5, [pc, #120]	; (1f7c <nvm_execute_command+0xa0>)
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    1f04:	02db      	lsls	r3, r3, #11
	ctrlb_bak = nvm_module->CTRLB.reg;
    1f06:	686f      	ldr	r7, [r5, #4]
    1f08:	002e      	movs	r6, r5
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    1f0a:	433b      	orrs	r3, r7
    1f0c:	606b      	str	r3, [r5, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    1f0e:	2320      	movs	r3, #32
    1f10:	8b2a      	ldrh	r2, [r5, #24]
    1f12:	33ff      	adds	r3, #255	; 0xff
    1f14:	4313      	orrs	r3, r2
    1f16:	832b      	strh	r3, [r5, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1f18:	f7ff ff98 	bl	1e4c <nvm_is_ready>
    1f1c:	2800      	cmp	r0, #0
    1f1e:	d102      	bne.n	1f26 <nvm_execute_command+0x4a>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    1f20:	606f      	str	r7, [r5, #4]
		return STATUS_BUSY;
    1f22:	3005      	adds	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    1f24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	switch (command) {
    1f26:	2c06      	cmp	r4, #6
    1f28:	d814      	bhi.n	1f54 <nvm_execute_command+0x78>
    1f2a:	2c05      	cmp	r4, #5
    1f2c:	d21b      	bcs.n	1f66 <nvm_execute_command+0x8a>
    1f2e:	2c02      	cmp	r4, #2
    1f30:	d001      	beq.n	1f36 <nvm_execute_command+0x5a>
    1f32:	2c04      	cmp	r4, #4
    1f34:	d114      	bne.n	1f60 <nvm_execute_command+0x84>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    1f36:	9b01      	ldr	r3, [sp, #4]
    1f38:	089b      	lsrs	r3, r3, #2
    1f3a:	005b      	lsls	r3, r3, #1
    1f3c:	61f3      	str	r3, [r6, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    1f3e:	23a5      	movs	r3, #165	; 0xa5
    1f40:	021b      	lsls	r3, r3, #8
    1f42:	431c      	orrs	r4, r3
    1f44:	8034      	strh	r4, [r6, #0]
	while (!nvm_is_ready()) {
    1f46:	f7ff ff81 	bl	1e4c <nvm_is_ready>
    1f4a:	2800      	cmp	r0, #0
    1f4c:	d0fb      	beq.n	1f46 <nvm_execute_command+0x6a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    1f4e:	6077      	str	r7, [r6, #4]
	return STATUS_OK;
    1f50:	2000      	movs	r0, #0
    1f52:	e7e7      	b.n	1f24 <nvm_execute_command+0x48>
	switch (command) {
    1f54:	2c40      	cmp	r4, #64	; 0x40
    1f56:	d303      	bcc.n	1f60 <nvm_execute_command+0x84>
    1f58:	2c41      	cmp	r4, #65	; 0x41
    1f5a:	d9ec      	bls.n	1f36 <nvm_execute_command+0x5a>
    1f5c:	2c45      	cmp	r4, #69	; 0x45
    1f5e:	d9ee      	bls.n	1f3e <nvm_execute_command+0x62>
			nvm_module->CTRLB.reg = ctrlb_bak;
    1f60:	6077      	str	r7, [r6, #4]
			return STATUS_ERR_INVALID_ARG;
    1f62:	2017      	movs	r0, #23
    1f64:	e7de      	b.n	1f24 <nvm_execute_command+0x48>
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1f66:	8b2b      	ldrh	r3, [r5, #24]
    1f68:	05db      	lsls	r3, r3, #23
    1f6a:	d5e4      	bpl.n	1f36 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    1f6c:	606f      	str	r7, [r5, #4]
				return STATUS_ERR_IO;
    1f6e:	2010      	movs	r0, #16
    1f70:	e7d8      	b.n	1f24 <nvm_execute_command+0x48>
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	200012ec 	.word	0x200012ec
    1f78:	ff7fc000 	.word	0xff7fc000
    1f7c:	41004000 	.word	0x41004000

00001f80 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    1f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1f82:	4f22      	ldr	r7, [pc, #136]	; (200c <nvm_write_buffer+0x8c>)
{
    1f84:	9101      	str	r1, [sp, #4]
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1f86:	883b      	ldrh	r3, [r7, #0]
    1f88:	8879      	ldrh	r1, [r7, #2]
{
    1f8a:	0016      	movs	r6, r2
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1f8c:	4359      	muls	r1, r3
{
    1f8e:	0005      	movs	r5, r0
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    1f90:	2218      	movs	r2, #24
	if (destination_address >
    1f92:	4281      	cmp	r1, r0
    1f94:	d327      	bcc.n	1fe6 <nvm_write_buffer+0x66>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    1f96:	1e59      	subs	r1, r3, #1
    1f98:	4208      	tst	r0, r1
    1f9a:	d124      	bne.n	1fe6 <nvm_write_buffer+0x66>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
    1f9c:	3a01      	subs	r2, #1
	if (length > _nvm_dev.page_size) {
    1f9e:	42b3      	cmp	r3, r6
    1fa0:	d321      	bcc.n	1fe6 <nvm_write_buffer+0x66>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1fa2:	f7ff ff53 	bl	1e4c <nvm_is_ready>
		return STATUS_BUSY;
    1fa6:	2205      	movs	r2, #5
	if (!nvm_is_ready()) {
    1fa8:	2800      	cmp	r0, #0
    1faa:	d01c      	beq.n	1fe6 <nvm_write_buffer+0x66>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    1fac:	4c18      	ldr	r4, [pc, #96]	; (2010 <nvm_write_buffer+0x90>)
    1fae:	4b19      	ldr	r3, [pc, #100]	; (2014 <nvm_write_buffer+0x94>)
    1fb0:	8023      	strh	r3, [r4, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    1fb2:	f7ff ff4b 	bl	1e4c <nvm_is_ready>
    1fb6:	2800      	cmp	r0, #0
    1fb8:	d0fb      	beq.n	1fb2 <nvm_write_buffer+0x32>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    1fba:	2320      	movs	r3, #32
    1fbc:	8b22      	ldrh	r2, [r4, #24]
    1fbe:	33ff      	adds	r3, #255	; 0xff
    1fc0:	4313      	orrs	r3, r2
    1fc2:	8323      	strh	r3, [r4, #24]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    1fc4:	2300      	movs	r3, #0
	uint32_t nvm_address = destination_address / 2;
    1fc6:	086a      	lsrs	r2, r5, #1
    1fc8:	0052      	lsls	r2, r2, #1
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    1fca:	1e70      	subs	r0, r6, #1
	for (uint16_t i = 0; i < length; i += 2) {
    1fcc:	429e      	cmp	r6, r3
    1fce:	d80c      	bhi.n	1fea <nvm_write_buffer+0x6a>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    1fd0:	2200      	movs	r2, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    1fd2:	793b      	ldrb	r3, [r7, #4]
    1fd4:	4293      	cmp	r3, r2
    1fd6:	d106      	bne.n	1fe6 <nvm_write_buffer+0x66>
    1fd8:	2e3f      	cmp	r6, #63	; 0x3f
    1fda:	d804      	bhi.n	1fe6 <nvm_write_buffer+0x66>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    1fdc:	0029      	movs	r1, r5
    1fde:	2004      	movs	r0, #4
    1fe0:	f7ff ff7c 	bl	1edc <nvm_execute_command>
    1fe4:	0002      	movs	r2, r0
}
    1fe6:	0010      	movs	r0, r2
    1fe8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		data = buffer[i];
    1fea:	9901      	ldr	r1, [sp, #4]
    1fec:	5cc9      	ldrb	r1, [r1, r3]
		if (i < (length - 1)) {
    1fee:	4283      	cmp	r3, r0
    1ff0:	db05      	blt.n	1ffe <nvm_write_buffer+0x7e>
		data = buffer[i];
    1ff2:	b289      	uxth	r1, r1
	for (uint16_t i = 0; i < length; i += 2) {
    1ff4:	3302      	adds	r3, #2
		NVM_MEMORY[nvm_address++] = data;
    1ff6:	8011      	strh	r1, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    1ff8:	b29b      	uxth	r3, r3
    1ffa:	3202      	adds	r2, #2
    1ffc:	e7e6      	b.n	1fcc <nvm_write_buffer+0x4c>
			data |= (buffer[i + 1] << 8);
    1ffe:	9c01      	ldr	r4, [sp, #4]
    2000:	18e4      	adds	r4, r4, r3
    2002:	7864      	ldrb	r4, [r4, #1]
    2004:	0224      	lsls	r4, r4, #8
    2006:	4321      	orrs	r1, r4
    2008:	e7f4      	b.n	1ff4 <nvm_write_buffer+0x74>
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	200012ec 	.word	0x200012ec
    2010:	41004000 	.word	0x41004000
    2014:	ffffa544 	.word	0xffffa544

00002018 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    2018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    201a:	4b17      	ldr	r3, [pc, #92]	; (2078 <nvm_read_buffer+0x60>)
{
    201c:	000f      	movs	r7, r1
    201e:	0016      	movs	r6, r2
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2020:	8859      	ldrh	r1, [r3, #2]
    2022:	881a      	ldrh	r2, [r3, #0]
{
    2024:	0005      	movs	r5, r0
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2026:	4351      	muls	r1, r2
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    2028:	2318      	movs	r3, #24
	if (source_address >
    202a:	4281      	cmp	r1, r0
    202c:	d316      	bcc.n	205c <nvm_read_buffer+0x44>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    202e:	1e54      	subs	r4, r2, #1
    2030:	4004      	ands	r4, r0
    2032:	d113      	bne.n	205c <nvm_read_buffer+0x44>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
    2034:	3b01      	subs	r3, #1
	if (length > _nvm_dev.page_size) {
    2036:	42b2      	cmp	r2, r6
    2038:	d310      	bcc.n	205c <nvm_read_buffer+0x44>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    203a:	f7ff ff07 	bl	1e4c <nvm_is_ready>
		return STATUS_BUSY;
    203e:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    2040:	2800      	cmp	r0, #0
    2042:	d00b      	beq.n	205c <nvm_read_buffer+0x44>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    2044:	2320      	movs	r3, #32
    2046:	4a0d      	ldr	r2, [pc, #52]	; (207c <nvm_read_buffer+0x64>)
    2048:	33ff      	adds	r3, #255	; 0xff
    204a:	8b11      	ldrh	r1, [r2, #24]

	uint32_t page_address = source_address / 2;
    204c:	086d      	lsrs	r5, r5, #1
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    204e:	430b      	orrs	r3, r1
    2050:	8313      	strh	r3, [r2, #24]
    2052:	006d      	lsls	r5, r5, #1
		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    2054:	1e71      	subs	r1, r6, #1
	for (uint16_t i = 0; i < length; i += 2) {
    2056:	42a6      	cmp	r6, r4
    2058:	d802      	bhi.n	2060 <nvm_read_buffer+0x48>
    205a:	2300      	movs	r3, #0
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    205c:	0018      	movs	r0, r3
    205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint16_t data = NVM_MEMORY[page_address++];
    2060:	882b      	ldrh	r3, [r5, #0]
    2062:	b29b      	uxth	r3, r3
		buffer[i] = (data & 0xFF);
    2064:	553b      	strb	r3, [r7, r4]
		if (i < (length - 1)) {
    2066:	428c      	cmp	r4, r1
    2068:	da02      	bge.n	2070 <nvm_read_buffer+0x58>
			buffer[i + 1] = (data >> 8);
    206a:	193a      	adds	r2, r7, r4
    206c:	0a1b      	lsrs	r3, r3, #8
    206e:	7053      	strb	r3, [r2, #1]
	for (uint16_t i = 0; i < length; i += 2) {
    2070:	3402      	adds	r4, #2
    2072:	b2a4      	uxth	r4, r4
    2074:	3502      	adds	r5, #2
    2076:	e7ee      	b.n	2056 <nvm_read_buffer+0x3e>
    2078:	200012ec 	.word	0x200012ec
    207c:	41004000 	.word	0x41004000

00002080 <nvm_erase_row>:
 *                                 acceptable range of the NVM memory region or
 *                                 not aligned to the start of a row
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    2080:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2082:	4a11      	ldr	r2, [pc, #68]	; (20c8 <nvm_erase_row+0x48>)
{
    2084:	0004      	movs	r4, r0
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2086:	8813      	ldrh	r3, [r2, #0]
    2088:	8851      	ldrh	r1, [r2, #2]
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    208a:	2218      	movs	r2, #24
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    208c:	4359      	muls	r1, r3
	if (row_address >
    208e:	4281      	cmp	r1, r0
    2090:	d318      	bcc.n	20c4 <nvm_erase_row+0x44>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    2092:	009b      	lsls	r3, r3, #2
    2094:	3b01      	subs	r3, #1
    2096:	4218      	tst	r0, r3
    2098:	d114      	bne.n	20c4 <nvm_erase_row+0x44>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    209a:	f7ff fed7 	bl	1e4c <nvm_is_ready>
		return STATUS_BUSY;
    209e:	2205      	movs	r2, #5
	if (!nvm_is_ready()) {
    20a0:	2800      	cmp	r0, #0
    20a2:	d00f      	beq.n	20c4 <nvm_erase_row+0x44>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    20a4:	2220      	movs	r2, #32
    20a6:	4b09      	ldr	r3, [pc, #36]	; (20cc <nvm_erase_row+0x4c>)
    20a8:	32ff      	adds	r2, #255	; 0xff
    20aa:	8b19      	ldrh	r1, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    20ac:	08a4      	lsrs	r4, r4, #2
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    20ae:	430a      	orrs	r2, r1
    20b0:	831a      	strh	r2, [r3, #24]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    20b2:	4a07      	ldr	r2, [pc, #28]	; (20d0 <nvm_erase_row+0x50>)
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    20b4:	0064      	lsls	r4, r4, #1
    20b6:	61dc      	str	r4, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    20b8:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    20ba:	f7ff fec7 	bl	1e4c <nvm_is_ready>
    20be:	2800      	cmp	r0, #0
    20c0:	d0fb      	beq.n	20ba <nvm_erase_row+0x3a>
    20c2:	2200      	movs	r2, #0
	}

	return STATUS_OK;
}
    20c4:	0010      	movs	r0, r2
    20c6:	bd10      	pop	{r4, pc}
    20c8:	200012ec 	.word	0x200012ec
    20cc:	41004000 	.word	0x41004000
    20d0:	ffffa502 	.word	0xffffa502

000020d4 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    20d4:	2220      	movs	r2, #32
{
    20d6:	b510      	push	{r4, lr}
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    20d8:	4b13      	ldr	r3, [pc, #76]	; (2128 <nvm_get_parameters+0x54>)
    20da:	32ff      	adds	r2, #255	; 0xff
    20dc:	8b19      	ldrh	r1, [r3, #24]
	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    20de:	2407      	movs	r4, #7
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    20e0:	430a      	orrs	r2, r1
    20e2:	831a      	strh	r2, [r3, #24]
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    20e4:	2208      	movs	r2, #8
	uint32_t param_reg = nvm_module->PARAM.reg;
    20e6:	689b      	ldr	r3, [r3, #8]
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    20e8:	0c19      	lsrs	r1, r3, #16
    20ea:	4021      	ands	r1, r4
    20ec:	408a      	lsls	r2, r1
	parameters->page_size =
    20ee:	7002      	strb	r2, [r0, #0]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    20f0:	4a0e      	ldr	r2, [pc, #56]	; (212c <nvm_get_parameters+0x58>)
	parameters->nvm_number_of_pages =
    20f2:	8043      	strh	r3, [r0, #2]
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    20f4:	8813      	ldrh	r3, [r2, #0]
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
    20f6:	091b      	lsrs	r3, r3, #4
	uint16_t eeprom_fuse_value =
    20f8:	4023      	ands	r3, r4

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    20fa:	42a3      	cmp	r3, r4
    20fc:	d109      	bne.n	2112 <nvm_get_parameters+0x3e>
		parameters->eeprom_number_of_pages = 0;
    20fe:	2300      	movs	r3, #0
	}
	else {
		parameters->eeprom_number_of_pages =
    2100:	6043      	str	r3, [r0, #4]
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
    2102:	2307      	movs	r3, #7
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    2104:	8812      	ldrh	r2, [r2, #0]
	uint16_t boot_fuse_value =
    2106:	401a      	ands	r2, r3
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    2108:	429a      	cmp	r2, r3
    210a:	d107      	bne.n	211c <nvm_get_parameters+0x48>
		parameters->bootloader_number_of_pages = 0;
    210c:	2300      	movs	r3, #0
    210e:	6083      	str	r3, [r0, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
    2110:	bd10      	pop	{r4, pc}
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    2112:	2106      	movs	r1, #6
    2114:	1ac9      	subs	r1, r1, r3
    2116:	2304      	movs	r3, #4
    2118:	408b      	lsls	r3, r1
    211a:	e7f1      	b.n	2100 <nvm_get_parameters+0x2c>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    211c:	1a9b      	subs	r3, r3, r2
    211e:	2204      	movs	r2, #4
    2120:	409a      	lsls	r2, r3
		parameters->bootloader_number_of_pages =
    2122:	6082      	str	r2, [r0, #8]
}
    2124:	e7f4      	b.n	2110 <nvm_get_parameters+0x3c>
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	41004000 	.word	0x41004000
    212c:	00804000 	.word	0x00804000

00002130 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2130:	4770      	bx	lr
	...

00002134 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2134:	b510      	push	{r4, lr}
    2136:	4b02      	ldr	r3, [pc, #8]	; (2140 <SERCOM0_Handler+0xc>)
    2138:	2000      	movs	r0, #0
    213a:	681b      	ldr	r3, [r3, #0]
    213c:	4798      	blx	r3
    213e:	bd10      	pop	{r4, pc}
    2140:	200012f4 	.word	0x200012f4

00002144 <SERCOM1_Handler>:
    2144:	b510      	push	{r4, lr}
    2146:	4b02      	ldr	r3, [pc, #8]	; (2150 <SERCOM1_Handler+0xc>)
    2148:	2001      	movs	r0, #1
    214a:	685b      	ldr	r3, [r3, #4]
    214c:	4798      	blx	r3
    214e:	bd10      	pop	{r4, pc}
    2150:	200012f4 	.word	0x200012f4

00002154 <SERCOM2_Handler>:
    2154:	b510      	push	{r4, lr}
    2156:	4b02      	ldr	r3, [pc, #8]	; (2160 <SERCOM2_Handler+0xc>)
    2158:	2002      	movs	r0, #2
    215a:	689b      	ldr	r3, [r3, #8]
    215c:	4798      	blx	r3
    215e:	bd10      	pop	{r4, pc}
    2160:	200012f4 	.word	0x200012f4

00002164 <SERCOM3_Handler>:
    2164:	b510      	push	{r4, lr}
    2166:	4b02      	ldr	r3, [pc, #8]	; (2170 <SERCOM3_Handler+0xc>)
    2168:	2003      	movs	r0, #3
    216a:	68db      	ldr	r3, [r3, #12]
    216c:	4798      	blx	r3
    216e:	bd10      	pop	{r4, pc}
    2170:	200012f4 	.word	0x200012f4

00002174 <SERCOM4_Handler>:
    2174:	b510      	push	{r4, lr}
    2176:	4b02      	ldr	r3, [pc, #8]	; (2180 <SERCOM4_Handler+0xc>)
    2178:	2004      	movs	r0, #4
    217a:	691b      	ldr	r3, [r3, #16]
    217c:	4798      	blx	r3
    217e:	bd10      	pop	{r4, pc}
    2180:	200012f4 	.word	0x200012f4

00002184 <SERCOM5_Handler>:
    2184:	b510      	push	{r4, lr}
    2186:	4b02      	ldr	r3, [pc, #8]	; (2190 <SERCOM5_Handler+0xc>)
    2188:	2005      	movs	r0, #5
    218a:	695b      	ldr	r3, [r3, #20]
    218c:	4798      	blx	r3
    218e:	bd10      	pop	{r4, pc}
    2190:	200012f4 	.word	0x200012f4

00002194 <_sercom_get_interrupt_vector>:
{
    2194:	b507      	push	{r0, r1, r2, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2196:	466a      	mov	r2, sp
    2198:	4b04      	ldr	r3, [pc, #16]	; (21ac <_sercom_get_interrupt_vector+0x18>)
    219a:	9300      	str	r3, [sp, #0]
    219c:	4b04      	ldr	r3, [pc, #16]	; (21b0 <_sercom_get_interrupt_vector+0x1c>)
    219e:	8093      	strh	r3, [r2, #4]
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    21a0:	f000 fdf4 	bl	2d8c <_sercom_get_sercom_inst_index>
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    21a4:	466b      	mov	r3, sp
    21a6:	5618      	ldrsb	r0, [r3, r0]
}
    21a8:	bd0e      	pop	{r1, r2, r3, pc}
    21aa:	46c0      	nop			; (mov r8, r8)
    21ac:	0c0b0a09 	.word	0x0c0b0a09
    21b0:	00000e0d 	.word	0x00000e0d

000021b4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    21b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    21b6:	4c16      	ldr	r4, [pc, #88]	; (2210 <_sercom_set_handler+0x5c>)
    21b8:	4a16      	ldr	r2, [pc, #88]	; (2214 <_sercom_set_handler+0x60>)
    21ba:	7823      	ldrb	r3, [r4, #0]
    21bc:	2b00      	cmp	r3, #0
    21be:	d109      	bne.n	21d4 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    21c0:	001e      	movs	r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    21c2:	4f15      	ldr	r7, [pc, #84]	; (2218 <_sercom_set_handler+0x64>)
			_sercom_instances[i] = NULL;
    21c4:	4d15      	ldr	r5, [pc, #84]	; (221c <_sercom_set_handler+0x68>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    21c6:	50d7      	str	r7, [r2, r3]
			_sercom_instances[i] = NULL;
    21c8:	50ee      	str	r6, [r5, r3]
    21ca:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    21cc:	2b18      	cmp	r3, #24
    21ce:	d1fa      	bne.n	21c6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    21d0:	3b17      	subs	r3, #23
    21d2:	7023      	strb	r3, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;  
    21d4:	0083      	lsls	r3, r0, #2
    21d6:	50d1      	str	r1, [r2, r3]
        /* install the interrupt handler in the proper spot in the 
         * vector table. */
        
        /* specific to SAMD21G since we are trying to add interrupts here to
         * the ram based NVIC controller */
        switch(instance) {
    21d8:	2805      	cmp	r0, #5
    21da:	d808      	bhi.n	21ee <_sercom_set_handler+0x3a>
    21dc:	f001 f980 	bl	34e0 <__gnu_thumb1_case_uqi>
    21e0:	0e0b0803 	.word	0x0e0b0803
    21e4:	1411      	.short	0x1411
                case 0:
                    NVIC_SetVector(SYSTEM_INTERRUPT_MODULE_SERCOM0, 
    21e6:	2009      	movs	r0, #9
    21e8:	490d      	ldr	r1, [pc, #52]	; (2220 <_sercom_set_handler+0x6c>)
                case 4:
                    NVIC_SetVector(SYSTEM_INTERRUPT_MODULE_SERCOM4, 
                            (uint32_t) SERCOM4_Handler);
                    break;
                case 5:
                    NVIC_SetVector(SYSTEM_INTERRUPT_MODULE_SERCOM5, 
    21ea:	f7ff f8ad 	bl	1348 <NVIC_SetVector>
                            (uint32_t) SERCOM5_Handler);
                    break;                                        
        }
}
    21ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    NVIC_SetVector(SYSTEM_INTERRUPT_MODULE_SERCOM1, 
    21f0:	490c      	ldr	r1, [pc, #48]	; (2224 <_sercom_set_handler+0x70>)
    21f2:	200a      	movs	r0, #10
    21f4:	e7f9      	b.n	21ea <_sercom_set_handler+0x36>
                    NVIC_SetVector(SYSTEM_INTERRUPT_MODULE_SERCOM2, 
    21f6:	490c      	ldr	r1, [pc, #48]	; (2228 <_sercom_set_handler+0x74>)
    21f8:	200b      	movs	r0, #11
    21fa:	e7f6      	b.n	21ea <_sercom_set_handler+0x36>
                    NVIC_SetVector(SYSTEM_INTERRUPT_MODULE_SERCOM3, 
    21fc:	490b      	ldr	r1, [pc, #44]	; (222c <_sercom_set_handler+0x78>)
    21fe:	200c      	movs	r0, #12
    2200:	e7f3      	b.n	21ea <_sercom_set_handler+0x36>
                    NVIC_SetVector(SYSTEM_INTERRUPT_MODULE_SERCOM4, 
    2202:	490b      	ldr	r1, [pc, #44]	; (2230 <_sercom_set_handler+0x7c>)
    2204:	200d      	movs	r0, #13
    2206:	e7f0      	b.n	21ea <_sercom_set_handler+0x36>
                    NVIC_SetVector(SYSTEM_INTERRUPT_MODULE_SERCOM5, 
    2208:	490a      	ldr	r1, [pc, #40]	; (2234 <_sercom_set_handler+0x80>)
    220a:	200e      	movs	r0, #14
    220c:	e7ed      	b.n	21ea <_sercom_set_handler+0x36>
    220e:	46c0      	nop			; (mov r8, r8)
    2210:	200012f2 	.word	0x200012f2
    2214:	200012f4 	.word	0x200012f4
    2218:	00002131 	.word	0x00002131
    221c:	200013bc 	.word	0x200013bc
    2220:	00002135 	.word	0x00002135
    2224:	00002145 	.word	0x00002145
    2228:	00002155 	.word	0x00002155
    222c:	00002165 	.word	0x00002165
    2230:	00002175 	.word	0x00002175
    2234:	00002185 	.word	0x00002185

00002238 <_usart_wait_for_sync>:
	SercomUsart *const usart_hw = &(module->hw->USART);
    2238:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    223a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    223c:	2b00      	cmp	r3, #0
    223e:	d1fc      	bne.n	223a <_usart_wait_for_sync+0x2>
}
    2240:	4770      	bx	lr
	...

00002244 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2244:	b5f0      	push	{r4, r5, r6, r7, lr}
    2246:	0007      	movs	r7, r0
    2248:	b08f      	sub	sp, #60	; 0x3c
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    224a:	6039      	str	r1, [r7, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    224c:	0008      	movs	r0, r1
{
    224e:	9105      	str	r1, [sp, #20]
    2250:	0015      	movs	r5, r2
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2252:	2601      	movs	r6, #1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2254:	f000 fd9a 	bl	2d8c <_sercom_get_sercom_inst_index>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2258:	9b05      	ldr	r3, [sp, #20]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    225a:	4684      	mov	ip, r0
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    225c:	681b      	ldr	r3, [r3, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    225e:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2260:	4233      	tst	r3, r6
    2262:	d000      	beq.n	2266 <usart_init+0x22>
    2264:	e0f7      	b.n	2456 <usart_init+0x212>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2266:	9b05      	ldr	r3, [sp, #20]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    2268:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    226a:	681c      	ldr	r4, [r3, #0]
    226c:	2302      	movs	r3, #2
    226e:	401c      	ands	r4, r3
    2270:	d000      	beq.n	2274 <usart_init+0x30>
    2272:	e0f0      	b.n	2456 <usart_init+0x212>
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2274:	4663      	mov	r3, ip
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2276:	0030      	movs	r0, r6
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2278:	3302      	adds	r3, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    227a:	4098      	lsls	r0, r3
    227c:	0003      	movs	r3, r0
			PM->APBCMASK.reg |= mask;
    227e:	4a90      	ldr	r2, [pc, #576]	; (24c0 <usart_init+0x27c>)
    2280:	6a11      	ldr	r1, [r2, #32]
    2282:	430b      	orrs	r3, r1
    2284:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    2286:	002b      	movs	r3, r5
    2288:	332d      	adds	r3, #45	; 0x2d
    228a:	9304      	str	r3, [sp, #16]
    228c:	781b      	ldrb	r3, [r3, #0]
    228e:	a908      	add	r1, sp, #32
    2290:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2292:	4663      	mov	r3, ip
    2294:	3314      	adds	r3, #20
    2296:	b2db      	uxtb	r3, r3
    2298:	0018      	movs	r0, r3
    229a:	9303      	str	r3, [sp, #12]
    229c:	f7fe f864 	bl	368 <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
    22a0:	9803      	ldr	r0, [sp, #12]
    22a2:	f7fe f825 	bl	2f0 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
    22a6:	9b04      	ldr	r3, [sp, #16]
    22a8:	0021      	movs	r1, r4
    22aa:	7818      	ldrb	r0, [r3, #0]
    22ac:	f000 fca2 	bl	2bf4 <sercom_set_gclk_generator>

	/* Set character size */
	module->character_size = config->character_size;
    22b0:	7aeb      	ldrb	r3, [r5, #11]
    22b2:	717b      	strb	r3, [r7, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    22b4:	1d6b      	adds	r3, r5, #5
    22b6:	7fdb      	ldrb	r3, [r3, #31]
    22b8:	71bb      	strb	r3, [r7, #6]
	module->transmitter_enabled = config->transmitter_enable;
    22ba:	1dab      	adds	r3, r5, #6
    22bc:	7fdb      	ldrb	r3, [r3, #31]
    22be:	71fb      	strb	r3, [r7, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    22c0:	7eeb      	ldrb	r3, [r5, #27]
    22c2:	723b      	strb	r3, [r7, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    22c4:	7f2b      	ldrb	r3, [r5, #28]
    22c6:	727b      	strb	r3, [r7, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    22c8:	683b      	ldr	r3, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    22ca:	0018      	movs	r0, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    22cc:	9304      	str	r3, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    22ce:	f000 fd5d 	bl	2d8c <_sercom_get_sercom_inst_index>
	uint16_t baud  = 0;
    22d2:	ab0a      	add	r3, sp, #40	; 0x28
    22d4:	801c      	strh	r4, [r3, #0]
	switch (config->sample_rate) {
    22d6:	2380      	movs	r3, #128	; 0x80
    22d8:	8a2a      	ldrh	r2, [r5, #16]
    22da:	01db      	lsls	r3, r3, #7
    22dc:	429a      	cmp	r2, r3
    22de:	d100      	bne.n	22e2 <usart_init+0x9e>
    22e0:	e0cb      	b.n	247a <usart_init+0x236>
    22e2:	d900      	bls.n	22e6 <usart_init+0xa2>
    22e4:	e0b9      	b.n	245a <usart_init+0x216>
    22e6:	2380      	movs	r3, #128	; 0x80
    22e8:	019b      	lsls	r3, r3, #6
    22ea:	429a      	cmp	r2, r3
    22ec:	d100      	bne.n	22f0 <usart_init+0xac>
    22ee:	e0bf      	b.n	2470 <usart_init+0x22c>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    22f0:	2310      	movs	r3, #16
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    22f2:	2600      	movs	r6, #0
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    22f4:	9303      	str	r3, [sp, #12]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    22f6:	1deb      	adds	r3, r5, #7
    22f8:	7fdc      	ldrb	r4, [r3, #31]
    22fa:	68e9      	ldr	r1, [r5, #12]
    22fc:	0763      	lsls	r3, r4, #29
    22fe:	682c      	ldr	r4, [r5, #0]
    2300:	9306      	str	r3, [sp, #24]
    2302:	430c      	orrs	r4, r1
    2304:	6969      	ldr	r1, [r5, #20]
	transfer_mode = (uint32_t)config->transfer_mode;
    2306:	686b      	ldr	r3, [r5, #4]
    2308:	430c      	orrs	r4, r1
    230a:	431c      	orrs	r4, r3
    230c:	4314      	orrs	r4, r2
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    230e:	7e2a      	ldrb	r2, [r5, #24]
    2310:	0212      	lsls	r2, r2, #8
    2312:	4314      	orrs	r4, r2
    2314:	002a      	movs	r2, r5
    2316:	9407      	str	r4, [sp, #28]
    2318:	3208      	adds	r2, #8
	switch (transfer_mode)
    231a:	2b00      	cmp	r3, #0
    231c:	d100      	bne.n	2320 <usart_init+0xdc>
    231e:	e0b0      	b.n	2482 <usart_init+0x23e>
    2320:	2180      	movs	r1, #128	; 0x80
    2322:	0549      	lsls	r1, r1, #21
    2324:	428b      	cmp	r3, r1
    2326:	d10f      	bne.n	2348 <usart_init+0x104>
			if (!config->use_external_clock) {
    2328:	7fd3      	ldrb	r3, [r2, #31]
    232a:	2b00      	cmp	r3, #0
    232c:	d10c      	bne.n	2348 <usart_init+0x104>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    232e:	3014      	adds	r0, #20
    2330:	b2c0      	uxtb	r0, r0
    2332:	6a2c      	ldr	r4, [r5, #32]
    2334:	f7fe f824 	bl	380 <system_gclk_chan_get_hz>
    2338:	aa0a      	add	r2, sp, #40	; 0x28
    233a:	0001      	movs	r1, r0
    233c:	0020      	movs	r0, r4
    233e:	f000 fba5 	bl	2a8c <_sercom_get_sync_baud_val>
	if (status_code != STATUS_OK) {
    2342:	2800      	cmp	r0, #0
    2344:	d000      	beq.n	2348 <usart_init+0x104>
    2346:	e086      	b.n	2456 <usart_init+0x212>
	if(config->encoding_format_enable) {
    2348:	7e6b      	ldrb	r3, [r5, #25]
    234a:	2b00      	cmp	r3, #0
    234c:	d002      	beq.n	2354 <usart_init+0x110>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    234e:	7eab      	ldrb	r3, [r5, #26]
    2350:	9a04      	ldr	r2, [sp, #16]
    2352:	7393      	strb	r3, [r2, #14]
	_usart_wait_for_sync(module);
    2354:	0038      	movs	r0, r7
    2356:	f7ff ff6f 	bl	2238 <_usart_wait_for_sync>
	usart_hw->BAUD.reg = baud;
    235a:	ab06      	add	r3, sp, #24
    235c:	8a1b      	ldrh	r3, [r3, #16]
    235e:	9a04      	ldr	r2, [sp, #16]
	ctrla |= transfer_mode;
    2360:	9c06      	ldr	r4, [sp, #24]
	usart_hw->BAUD.reg = baud;
    2362:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2364:	9b07      	ldr	r3, [sp, #28]
    2366:	431c      	orrs	r4, r3
	if (config->use_external_clock == false) {
    2368:	002b      	movs	r3, r5
    236a:	3308      	adds	r3, #8
    236c:	7fdb      	ldrb	r3, [r3, #31]
    236e:	2b00      	cmp	r3, #0
    2370:	d101      	bne.n	2376 <usart_init+0x132>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2372:	3304      	adds	r3, #4
    2374:	431c      	orrs	r4, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2376:	7e6e      	ldrb	r6, [r5, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2378:	7f2b      	ldrb	r3, [r5, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    237a:	02b6      	lsls	r6, r6, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    237c:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    237e:	431e      	orrs	r6, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2380:	7f6b      	ldrb	r3, [r5, #29]
    2382:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2384:	431e      	orrs	r6, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2386:	1d6b      	adds	r3, r5, #5
    2388:	7fdb      	ldrb	r3, [r3, #31]
    238a:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    238c:	431e      	orrs	r6, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    238e:	1dab      	adds	r3, r5, #6
    2390:	7fdb      	ldrb	r3, [r3, #31]
    2392:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2394:	431e      	orrs	r6, r3
	ctrlb |= (uint32_t)config->character_size;
    2396:	7aeb      	ldrb	r3, [r5, #11]
    2398:	431e      	orrs	r6, r3
	if (config->parity != USART_PARITY_NONE) {
    239a:	892b      	ldrh	r3, [r5, #8]
    239c:	2bff      	cmp	r3, #255	; 0xff
    239e:	d100      	bne.n	23a2 <usart_init+0x15e>
    23a0:	e086      	b.n	24b0 <usart_init+0x26c>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    23a2:	2280      	movs	r2, #128	; 0x80
    23a4:	0452      	lsls	r2, r2, #17
    23a6:	4314      	orrs	r4, r2
		ctrlb |= config->parity;
    23a8:	431e      	orrs	r6, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    23aa:	002b      	movs	r3, r5
    23ac:	332c      	adds	r3, #44	; 0x2c
    23ae:	781b      	ldrb	r3, [r3, #0]
    23b0:	2b00      	cmp	r3, #0
    23b2:	d103      	bne.n	23bc <usart_init+0x178>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    23b4:	4b43      	ldr	r3, [pc, #268]	; (24c4 <usart_init+0x280>)
    23b6:	789b      	ldrb	r3, [r3, #2]
    23b8:	079b      	lsls	r3, r3, #30
    23ba:	d501      	bpl.n	23c0 <usart_init+0x17c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    23bc:	2380      	movs	r3, #128	; 0x80
    23be:	431c      	orrs	r4, r3
	_usart_wait_for_sync(module);
    23c0:	0038      	movs	r0, r7
    23c2:	f7ff ff39 	bl	2238 <_usart_wait_for_sync>
	usart_hw->CTRLB.reg = ctrlb;
    23c6:	9b04      	ldr	r3, [sp, #16]
	_usart_wait_for_sync(module);
    23c8:	0038      	movs	r0, r7
	usart_hw->CTRLB.reg = ctrlb;
    23ca:	605e      	str	r6, [r3, #4]
	_usart_wait_for_sync(module);
    23cc:	f7ff ff34 	bl	2238 <_usart_wait_for_sync>
	usart_hw->CTRLA.reg = ctrla;
    23d0:	9b04      	ldr	r3, [sp, #16]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    23d2:	2600      	movs	r6, #0
    23d4:	601c      	str	r4, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    23d6:	2380      	movs	r3, #128	; 0x80
    23d8:	ac09      	add	r4, sp, #36	; 0x24
    23da:	7023      	strb	r3, [r4, #0]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    23dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    23de:	7066      	strb	r6, [r4, #1]
    23e0:	930a      	str	r3, [sp, #40]	; 0x28
    23e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    23e4:	70e6      	strb	r6, [r4, #3]
    23e6:	930b      	str	r3, [sp, #44]	; 0x2c
    23e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    23ea:	70a6      	strb	r6, [r4, #2]
	uint32_t pad_pinmuxes[] = {
    23ec:	930c      	str	r3, [sp, #48]	; 0x30
    23ee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    23f0:	9303      	str	r3, [sp, #12]
    23f2:	930d      	str	r3, [sp, #52]	; 0x34
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    23f4:	2010      	movs	r0, #16
    23f6:	aa06      	add	r2, sp, #24
    23f8:	00b3      	lsls	r3, r6, #2
    23fa:	1812      	adds	r2, r2, r0
    23fc:	58d0      	ldr	r0, [r2, r3]
    23fe:	b2f1      	uxtb	r1, r6

		if (current_pinmux == PINMUX_DEFAULT) {
    2400:	2800      	cmp	r0, #0
    2402:	d102      	bne.n	240a <usart_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2404:	9805      	ldr	r0, [sp, #20]
    2406:	f000 fc13 	bl	2c30 <_sercom_get_default_pad>
		}

		if (current_pinmux != PINMUX_UNUSED) {
    240a:	1c43      	adds	r3, r0, #1
    240c:	d005      	beq.n	241a <usart_init+0x1d6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    240e:	7020      	strb	r0, [r4, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2410:	0c00      	lsrs	r0, r0, #16
    2412:	b2c0      	uxtb	r0, r0
    2414:	0021      	movs	r1, r4
    2416:	f000 f9c7 	bl	27a8 <system_pinmux_pin_set_config>
    241a:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    241c:	2e04      	cmp	r6, #4
    241e:	d1e9      	bne.n	23f4 <usart_init+0x1b0>
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->callback_reg_mask          = 0x00;
	module->callback_enable_mask       = 0x00;
	module->rx_status                  = STATUS_OK;
    2420:	003b      	movs	r3, r7
		module->callback[i]            = NULL;
    2422:	2400      	movs	r4, #0
	module->rx_status                  = STATUS_OK;
    2424:	3332      	adds	r3, #50	; 0x32
	module->remaining_tx_buffer_length = 0x0000;
    2426:	85fc      	strh	r4, [r7, #46]	; 0x2e
		module->callback[i]            = NULL;
    2428:	60fc      	str	r4, [r7, #12]
    242a:	613c      	str	r4, [r7, #16]
    242c:	617c      	str	r4, [r7, #20]
    242e:	61bc      	str	r4, [r7, #24]
    2430:	61fc      	str	r4, [r7, #28]
    2432:	623c      	str	r4, [r7, #32]
	module->tx_buffer_ptr              = NULL;
    2434:	62bc      	str	r4, [r7, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2436:	627c      	str	r4, [r7, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
    2438:	85bc      	strh	r4, [r7, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    243a:	863c      	strh	r4, [r7, #48]	; 0x30
	module->tx_status                  = STATUS_OK;

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    243c:	6838      	ldr	r0, [r7, #0]
	module->rx_status                  = STATUS_OK;
    243e:	701c      	strb	r4, [r3, #0]
	module->tx_status                  = STATUS_OK;
    2440:	705c      	strb	r4, [r3, #1]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2442:	f000 fca3 	bl	2d8c <_sercom_get_sercom_inst_index>
    2446:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2448:	491f      	ldr	r1, [pc, #124]	; (24c8 <usart_init+0x284>)
    244a:	f7ff feb3 	bl	21b4 <_sercom_set_handler>
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
    244e:	0020      	movs	r0, r4
	_sercom_instances[instance_index] = module;
    2450:	4b1e      	ldr	r3, [pc, #120]	; (24cc <usart_init+0x288>)
    2452:	00ad      	lsls	r5, r5, #2
    2454:	50ef      	str	r7, [r5, r3]
}
    2456:	b00f      	add	sp, #60	; 0x3c
    2458:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (config->sample_rate) {
    245a:	23c0      	movs	r3, #192	; 0xc0
    245c:	01db      	lsls	r3, r3, #7
    245e:	429a      	cmp	r2, r3
    2460:	d009      	beq.n	2476 <usart_init+0x232>
    2462:	2380      	movs	r3, #128	; 0x80
    2464:	021b      	lsls	r3, r3, #8
    2466:	429a      	cmp	r2, r3
    2468:	d000      	beq.n	246c <usart_init+0x228>
    246a:	e741      	b.n	22f0 <usart_init+0xac>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    246c:	2303      	movs	r3, #3
    246e:	e740      	b.n	22f2 <usart_init+0xae>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2470:	2310      	movs	r3, #16
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2472:	9303      	str	r3, [sp, #12]
    2474:	e73f      	b.n	22f6 <usart_init+0xb2>
    2476:	2308      	movs	r3, #8
    2478:	e7fb      	b.n	2472 <usart_init+0x22e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    247a:	2308      	movs	r3, #8
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    247c:	0026      	movs	r6, r4
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    247e:	9303      	str	r3, [sp, #12]
    2480:	e739      	b.n	22f6 <usart_init+0xb2>
			if (config->use_external_clock) {
    2482:	7fd3      	ldrb	r3, [r2, #31]
    2484:	6a2c      	ldr	r4, [r5, #32]
    2486:	2b00      	cmp	r3, #0
    2488:	d008      	beq.n	249c <usart_init+0x258>
				status_code =
    248a:	9b03      	ldr	r3, [sp, #12]
    248c:	aa0a      	add	r2, sp, #40	; 0x28
    248e:	9300      	str	r3, [sp, #0]
    2490:	0033      	movs	r3, r6
    2492:	6aa9      	ldr	r1, [r5, #40]	; 0x28
				status_code =
    2494:	0020      	movs	r0, r4
    2496:	f000 fb0d 	bl	2ab4 <_sercom_get_async_baud_val>
    249a:	e752      	b.n	2342 <usart_init+0xfe>
						_sercom_get_async_baud_val(config->baudrate,
    249c:	3014      	adds	r0, #20
    249e:	b2c0      	uxtb	r0, r0
    24a0:	f7fd ff6e 	bl	380 <system_gclk_chan_get_hz>
				status_code =
    24a4:	9b03      	ldr	r3, [sp, #12]
						_sercom_get_async_baud_val(config->baudrate,
    24a6:	0001      	movs	r1, r0
				status_code =
    24a8:	9300      	str	r3, [sp, #0]
    24aa:	aa0a      	add	r2, sp, #40	; 0x28
    24ac:	0033      	movs	r3, r6
    24ae:	e7f1      	b.n	2494 <usart_init+0x250>
		if(config->lin_slave_enable) {
    24b0:	7eeb      	ldrb	r3, [r5, #27]
    24b2:	2b00      	cmp	r3, #0
    24b4:	d100      	bne.n	24b8 <usart_init+0x274>
    24b6:	e778      	b.n	23aa <usart_init+0x166>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    24b8:	2380      	movs	r3, #128	; 0x80
    24ba:	04db      	lsls	r3, r3, #19
    24bc:	431c      	orrs	r4, r3
    24be:	e774      	b.n	23aa <usart_init+0x166>
    24c0:	40000400 	.word	0x40000400
    24c4:	41002000 	.word	0x41002000
    24c8:	000025b9 	.word	0x000025b9
    24cc:	200013bc 	.word	0x200013bc

000024d0 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    24d0:	b570      	push	{r4, r5, r6, lr}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    24d2:	79c2      	ldrb	r2, [r0, #7]
{
    24d4:	000d      	movs	r5, r1
		return STATUS_ERR_DENIED;
    24d6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    24d8:	2a00      	cmp	r2, #0
    24da:	d00c      	beq.n	24f6 <usart_write_wait+0x26>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    24dc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
		return STATUS_BUSY;
    24de:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    24e0:	2a00      	cmp	r2, #0
    24e2:	d108      	bne.n	24f6 <usart_write_wait+0x26>
	SercomUsart *const usart_hw = &(module->hw->USART);
    24e4:	6804      	ldr	r4, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    24e6:	f7ff fea7 	bl	2238 <_usart_wait_for_sync>

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    24ea:	2302      	movs	r3, #2
	usart_hw->DATA.reg = tx_data;
    24ec:	8525      	strh	r5, [r4, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    24ee:	7e22      	ldrb	r2, [r4, #24]
    24f0:	421a      	tst	r2, r3
    24f2:	d0fc      	beq.n	24ee <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    24f4:	2300      	movs	r3, #0
}
    24f6:	0018      	movs	r0, r3
    24f8:	bd70      	pop	{r4, r5, r6, pc}

000024fa <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    24fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    24fc:	0005      	movs	r5, r0
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    24fe:	6803      	ldr	r3, [r0, #0]
{
    2500:	000e      	movs	r6, r1
    2502:	0017      	movs	r7, r2
	SercomUsart *const usart_hw = &(module->hw->USART);
    2504:	9301      	str	r3, [sp, #4]
	cpu_irq_enter_critical();
    2506:	f7fd ff57 	bl	3b8 <cpu_irq_enter_critical>

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    250a:	8dec      	ldrh	r4, [r5, #46]	; 0x2e
    250c:	b2a4      	uxth	r4, r4
    250e:	2c00      	cmp	r4, #0
    2510:	d003      	beq.n	251a <_usart_write_buffer+0x20>
	cpu_irq_leave_critical();
    2512:	f7fd ff6b 	bl	3ec <cpu_irq_leave_critical>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2516:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    251a:	85ef      	strh	r7, [r5, #46]	; 0x2e
    251c:	f7fd ff66 	bl	3ec <cpu_irq_leave_critical>
	module->tx_status                  = STATUS_BUSY;
    2520:	2305      	movs	r3, #5
	module->tx_buffer_ptr              = tx_data;
    2522:	62ae      	str	r6, [r5, #40]	; 0x28
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2524:	9a01      	ldr	r2, [sp, #4]
	module->tx_status                  = STATUS_BUSY;
    2526:	3533      	adds	r5, #51	; 0x33
    2528:	702b      	strb	r3, [r5, #0]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    252a:	3b04      	subs	r3, #4
    252c:	7593      	strb	r3, [r2, #22]
	return STATUS_OK;
    252e:	0020      	movs	r0, r4
    2530:	e7f2      	b.n	2518 <_usart_write_buffer+0x1e>

00002532 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2534:	0004      	movs	r4, r0
    2536:	000e      	movs	r6, r1
    2538:	0017      	movs	r7, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    253a:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    253c:	f7fd ff3c 	bl	3b8 <cpu_irq_enter_critical>

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2540:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2542:	2b00      	cmp	r3, #0
    2544:	d003      	beq.n	254e <_usart_read_buffer+0x1c>
	cpu_irq_leave_critical();
    2546:	f7fd ff51 	bl	3ec <cpu_irq_leave_critical>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    254a:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    254c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    254e:	85a7      	strh	r7, [r4, #44]	; 0x2c
    2550:	f7fd ff4c 	bl	3ec <cpu_irq_leave_critical>
	module->rx_status                  = STATUS_BUSY;
    2554:	0023      	movs	r3, r4
    2556:	2205      	movs	r2, #5
    2558:	3332      	adds	r3, #50	; 0x32
	module->rx_buffer_ptr              = rx_data;
    255a:	6266      	str	r6, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    255c:	701a      	strb	r2, [r3, #0]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    255e:	2304      	movs	r3, #4
    2560:	75ab      	strb	r3, [r5, #22]
	if(module->lin_slave_enabled) {
    2562:	7a23      	ldrb	r3, [r4, #8]
    2564:	2b00      	cmp	r3, #0
    2566:	d001      	beq.n	256c <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2568:	2320      	movs	r3, #32
    256a:	75ab      	strb	r3, [r5, #22]
	return STATUS_OK;
    256c:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    256e:	7a63      	ldrb	r3, [r4, #9]
    2570:	4283      	cmp	r3, r0
    2572:	d0eb      	beq.n	254c <_usart_read_buffer+0x1a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2574:	2308      	movs	r3, #8
    2576:	75ab      	strb	r3, [r5, #22]
    2578:	e7e8      	b.n	254c <_usart_read_buffer+0x1a>

0000257a <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    257a:	1c93      	adds	r3, r2, #2
    257c:	009b      	lsls	r3, r3, #2
    257e:	18c3      	adds	r3, r0, r3
    2580:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2582:	2301      	movs	r3, #1
    2584:	4093      	lsls	r3, r2
    2586:	001a      	movs	r2, r3
    2588:	3030      	adds	r0, #48	; 0x30
    258a:	7803      	ldrb	r3, [r0, #0]
    258c:	4313      	orrs	r3, r2
    258e:	7003      	strb	r3, [r0, #0]
}
    2590:	4770      	bx	lr

00002592 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    2592:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    2594:	2201      	movs	r2, #1
    2596:	f7ff ffcc 	bl	2532 <_usart_read_buffer>
}
    259a:	bd10      	pop	{r4, pc}

0000259c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    259c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    259e:	2317      	movs	r3, #23
	if (length == 0) {
    25a0:	2a00      	cmp	r2, #0
    25a2:	d006      	beq.n	25b2 <usart_write_buffer_job+0x16>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    25a4:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    25a6:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    25a8:	2c00      	cmp	r4, #0
    25aa:	d002      	beq.n	25b2 <usart_write_buffer_job+0x16>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    25ac:	f7ff ffa5 	bl	24fa <_usart_write_buffer>
    25b0:	0003      	movs	r3, r0
}
    25b2:	0018      	movs	r0, r3
    25b4:	bd10      	pop	{r4, pc}
	...

000025b8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    25b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    25ba:	4b59      	ldr	r3, [pc, #356]	; (2720 <_usart_interrupt_handler+0x168>)
    25bc:	0080      	lsls	r0, r0, #2
    25be:	58c4      	ldr	r4, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    25c0:	6825      	ldr	r5, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    25c2:	69eb      	ldr	r3, [r5, #28]
	while (usart_is_syncing(module)) {
    25c4:	2b00      	cmp	r3, #0
    25c6:	d1fc      	bne.n	25c2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    25c8:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    25ca:	7daf      	ldrb	r7, [r5, #22]
    25cc:	401f      	ands	r7, r3
	callback_status = module->callback_reg_mask &
    25ce:	0023      	movs	r3, r4
    25d0:	3330      	adds	r3, #48	; 0x30
    25d2:	781a      	ldrb	r2, [r3, #0]
    25d4:	785e      	ldrb	r6, [r3, #1]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    25d6:	2301      	movs	r3, #1
	callback_status = module->callback_reg_mask &
    25d8:	4016      	ands	r6, r2
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    25da:	421f      	tst	r7, r3
    25dc:	d01a      	beq.n	2614 <_usart_interrupt_handler+0x5c>
		if (module->remaining_tx_buffer_length) {
    25de:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    25e0:	2a00      	cmp	r2, #0
    25e2:	d100      	bne.n	25e6 <_usart_interrupt_handler+0x2e>
    25e4:	e075      	b.n	26d2 <_usart_interrupt_handler+0x11a>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    25e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    25e8:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    25ea:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
    25ec:	62a1      	str	r1, [r4, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    25ee:	7961      	ldrb	r1, [r4, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    25f0:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    25f2:	2901      	cmp	r1, #1
    25f4:	d100      	bne.n	25f8 <_usart_interrupt_handler+0x40>
    25f6:	e066      	b.n	26c6 <_usart_interrupt_handler+0x10e>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    25f8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    25fa:	05db      	lsls	r3, r3, #23
    25fc:	0ddb      	lsrs	r3, r3, #23
    25fe:	852b      	strh	r3, [r5, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2600:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    2602:	3b01      	subs	r3, #1
    2604:	b29b      	uxth	r3, r3
    2606:	85e3      	strh	r3, [r4, #46]	; 0x2e
    2608:	2b00      	cmp	r3, #0
    260a:	d103      	bne.n	2614 <_usart_interrupt_handler+0x5c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    260c:	3301      	adds	r3, #1
    260e:	752b      	strb	r3, [r5, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2610:	3301      	adds	r3, #1
    2612:	75ab      	strb	r3, [r5, #22]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2614:	2302      	movs	r3, #2
    2616:	421f      	tst	r7, r3
    2618:	d009      	beq.n	262e <_usart_interrupt_handler+0x76>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    261a:	752b      	strb	r3, [r5, #20]
		module->tx_status = STATUS_OK;
    261c:	0023      	movs	r3, r4
    261e:	2200      	movs	r2, #0
    2620:	3333      	adds	r3, #51	; 0x33
    2622:	701a      	strb	r2, [r3, #0]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2624:	07f3      	lsls	r3, r6, #31
    2626:	d502      	bpl.n	262e <_usart_interrupt_handler+0x76>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2628:	0020      	movs	r0, r4
    262a:	68e3      	ldr	r3, [r4, #12]
    262c:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    262e:	2304      	movs	r3, #4
    2630:	421f      	tst	r7, r3
    2632:	d029      	beq.n	2688 <_usart_interrupt_handler+0xd0>

		if (module->remaining_rx_buffer_length) {
    2634:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    2636:	2a00      	cmp	r2, #0
    2638:	d100      	bne.n	263c <_usart_interrupt_handler+0x84>
    263a:	e06f      	b.n	271c <_usart_interrupt_handler+0x164>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    263c:	8b6b      	ldrh	r3, [r5, #26]
    263e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2640:	071a      	lsls	r2, r3, #28
    2642:	d448      	bmi.n	26d6 <_usart_interrupt_handler+0x11e>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2644:	223f      	movs	r2, #63	; 0x3f
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2646:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2648:	d047      	beq.n	26da <_usart_interrupt_handler+0x122>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    264a:	2202      	movs	r2, #2
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    264c:	211a      	movs	r1, #26
				if (error_code & SERCOM_USART_STATUS_FERR) {
    264e:	4213      	tst	r3, r2
    2650:	d10f      	bne.n	2672 <_usart_interrupt_handler+0xba>
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2652:	2204      	movs	r2, #4
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    2654:	211e      	movs	r1, #30
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2656:	4213      	tst	r3, r2
    2658:	d10b      	bne.n	2672 <_usart_interrupt_handler+0xba>
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    265a:	2201      	movs	r2, #1
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    265c:	2113      	movs	r1, #19
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    265e:	4213      	tst	r3, r2
    2660:	d107      	bne.n	2672 <_usart_interrupt_handler+0xba>
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2662:	2210      	movs	r2, #16
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    2664:	2142      	movs	r1, #66	; 0x42
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2666:	4213      	tst	r3, r2
    2668:	d103      	bne.n	2672 <_usart_interrupt_handler+0xba>
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    266a:	2220      	movs	r2, #32
    266c:	4213      	tst	r3, r2
    266e:	d006      	beq.n	267e <_usart_interrupt_handler+0xc6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2670:	2141      	movs	r1, #65	; 0x41
    2672:	0023      	movs	r3, r4
    2674:	3332      	adds	r3, #50	; 0x32
    2676:	7019      	strb	r1, [r3, #0]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    2678:	8b6b      	ldrh	r3, [r5, #26]
    267a:	431a      	orrs	r2, r3
    267c:	836a      	strh	r2, [r5, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    267e:	0773      	lsls	r3, r6, #29
    2680:	d502      	bpl.n	2688 <_usart_interrupt_handler+0xd0>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2682:	0020      	movs	r0, r4
    2684:	6963      	ldr	r3, [r4, #20]
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2686:	4798      	blx	r3
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2688:	2310      	movs	r3, #16
    268a:	421f      	tst	r7, r3
    268c:	d006      	beq.n	269c <_usart_interrupt_handler+0xe4>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    268e:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2690:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2692:	421e      	tst	r6, r3
    2694:	d002      	beq.n	269c <_usart_interrupt_handler+0xe4>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2696:	0020      	movs	r0, r4
    2698:	69e3      	ldr	r3, [r4, #28]
    269a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    269c:	2320      	movs	r3, #32
    269e:	421f      	tst	r7, r3
    26a0:	d006      	beq.n	26b0 <_usart_interrupt_handler+0xf8>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    26a2:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    26a4:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    26a6:	0733      	lsls	r3, r6, #28
    26a8:	d502      	bpl.n	26b0 <_usart_interrupt_handler+0xf8>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    26aa:	0020      	movs	r0, r4
    26ac:	69a3      	ldr	r3, [r4, #24]
    26ae:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    26b0:	2308      	movs	r3, #8
    26b2:	421f      	tst	r7, r3
    26b4:	d006      	beq.n	26c4 <_usart_interrupt_handler+0x10c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    26b6:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    26b8:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    26ba:	06b3      	lsls	r3, r6, #26
    26bc:	d502      	bpl.n	26c4 <_usart_interrupt_handler+0x10c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    26be:	6a23      	ldr	r3, [r4, #32]
    26c0:	0020      	movs	r0, r4
    26c2:	4798      	blx	r3
		}
	}
#endif
}
    26c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    26c6:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
    26c8:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    26ca:	0209      	lsls	r1, r1, #8
    26cc:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    26ce:	62a2      	str	r2, [r4, #40]	; 0x28
    26d0:	e793      	b.n	25fa <_usart_interrupt_handler+0x42>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    26d2:	752b      	strb	r3, [r5, #20]
    26d4:	e79e      	b.n	2614 <_usart_interrupt_handler+0x5c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    26d6:	2237      	movs	r2, #55	; 0x37
    26d8:	e7b5      	b.n	2646 <_usart_interrupt_handler+0x8e>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    26da:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
    26dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    26de:	05db      	lsls	r3, r3, #23
    26e0:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
    26e2:	b2da      	uxtb	r2, r3
    26e4:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
    26e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    26e8:	1c51      	adds	r1, r2, #1
    26ea:	6261      	str	r1, [r4, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    26ec:	7961      	ldrb	r1, [r4, #5]
    26ee:	2901      	cmp	r1, #1
    26f0:	d104      	bne.n	26fc <_usart_interrupt_handler+0x144>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    26f2:	0a1b      	lsrs	r3, r3, #8
    26f4:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    26f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    26f8:	3301      	adds	r3, #1
    26fa:	6263      	str	r3, [r4, #36]	; 0x24
				if(--(module->remaining_rx_buffer_length) == 0) {
    26fc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    26fe:	3b01      	subs	r3, #1
    2700:	b29b      	uxth	r3, r3
    2702:	85a3      	strh	r3, [r4, #44]	; 0x2c
    2704:	2b00      	cmp	r3, #0
    2706:	d1bf      	bne.n	2688 <_usart_interrupt_handler+0xd0>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2708:	2204      	movs	r2, #4
    270a:	752a      	strb	r2, [r5, #20]
					module->rx_status = STATUS_OK;
    270c:	0022      	movs	r2, r4
    270e:	3232      	adds	r2, #50	; 0x32
    2710:	7013      	strb	r3, [r2, #0]
					if (callback_status
    2712:	07b3      	lsls	r3, r6, #30
    2714:	d5b8      	bpl.n	2688 <_usart_interrupt_handler+0xd0>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2716:	0020      	movs	r0, r4
    2718:	6923      	ldr	r3, [r4, #16]
    271a:	e7b4      	b.n	2686 <_usart_interrupt_handler+0xce>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    271c:	752b      	strb	r3, [r5, #20]
    271e:	e7b3      	b.n	2688 <_usart_interrupt_handler+0xd0>
    2720:	200013bc 	.word	0x200013bc

00002724 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2724:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2726:	78d5      	ldrb	r5, [r2, #3]
    2728:	2d00      	cmp	r5, #0
    272a:	d135      	bne.n	2798 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    272c:	7814      	ldrb	r4, [r2, #0]
	uint32_t pin_cfg = 0;
    272e:	002b      	movs	r3, r5
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2730:	2c80      	cmp	r4, #128	; 0x80
    2732:	d003      	beq.n	273c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2734:	2380      	movs	r3, #128	; 0x80
    2736:	0624      	lsls	r4, r4, #24
    2738:	025b      	lsls	r3, r3, #9
    273a:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    273c:	7854      	ldrb	r4, [r2, #1]
    273e:	2602      	movs	r6, #2
    2740:	0027      	movs	r7, r4
    2742:	43b7      	bics	r7, r6
    2744:	d106      	bne.n	2754 <_system_pinmux_config+0x30>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2746:	7896      	ldrb	r6, [r2, #2]
    2748:	2e00      	cmp	r6, #0
    274a:	d122      	bne.n	2792 <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    274c:	2680      	movs	r6, #128	; 0x80
    274e:	02b6      	lsls	r6, r6, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2750:	4333      	orrs	r3, r6
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2752:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2754:	3c01      	subs	r4, #1
    2756:	2c01      	cmp	r4, #1
    2758:	d801      	bhi.n	275e <_system_pinmux_config+0x3a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    275a:	4c12      	ldr	r4, [pc, #72]	; (27a4 <_system_pinmux_config+0x80>)
    275c:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    275e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2760:	b28e      	uxth	r6, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2762:	05e4      	lsls	r4, r4, #23
    2764:	4334      	orrs	r4, r6
    2766:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2768:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    276a:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    276c:	0c0e      	lsrs	r6, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    276e:	0624      	lsls	r4, r4, #24
    2770:	4334      	orrs	r4, r6
    2772:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2774:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2776:	2d00      	cmp	r5, #0
    2778:	d10a      	bne.n	2790 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    277a:	035b      	lsls	r3, r3, #13
    277c:	d503      	bpl.n	2786 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    277e:	7893      	ldrb	r3, [r2, #2]
    2780:	2b01      	cmp	r3, #1
    2782:	d10c      	bne.n	279e <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    2784:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2786:	7853      	ldrb	r3, [r2, #1]
    2788:	3b01      	subs	r3, #1
    278a:	2b01      	cmp	r3, #1
    278c:	d800      	bhi.n	2790 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    278e:	6081      	str	r1, [r0, #8]
		}
	}
}
    2790:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2792:	26c0      	movs	r6, #192	; 0xc0
    2794:	02f6      	lsls	r6, r6, #11
    2796:	e7db      	b.n	2750 <_system_pinmux_config+0x2c>
		port->DIRCLR.reg = pin_mask;
    2798:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    279a:	2300      	movs	r3, #0
    279c:	e7df      	b.n	275e <_system_pinmux_config+0x3a>
				port->OUTCLR.reg = pin_mask;
    279e:	6141      	str	r1, [r0, #20]
    27a0:	e7f1      	b.n	2786 <_system_pinmux_config+0x62>
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	fffbffff 	.word	0xfffbffff

000027a8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    27a8:	b510      	push	{r4, lr}
    27aa:	0003      	movs	r3, r0
    27ac:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    27ae:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    27b0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    27b2:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    27b4:	4281      	cmp	r1, r0
    27b6:	d102      	bne.n	27be <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    27b8:	4904      	ldr	r1, [pc, #16]	; (27cc <system_pinmux_pin_set_config+0x24>)
    27ba:	01e0      	lsls	r0, r4, #7
    27bc:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    27be:	211f      	movs	r1, #31
    27c0:	400b      	ands	r3, r1
    27c2:	391e      	subs	r1, #30
    27c4:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    27c6:	f7ff ffad 	bl	2724 <_system_pinmux_config>
}
    27ca:	bd10      	pop	{r4, pc}
    27cc:	41004400 	.word	0x41004400

000027d0 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    27d0:	4a08      	ldr	r2, [pc, #32]	; (27f4 <_tc_get_inst_index+0x24>)
{
    27d2:	0003      	movs	r3, r0
		if (hw == tc_modules[i]) {
    27d4:	4290      	cmp	r0, r2
    27d6:	d009      	beq.n	27ec <_tc_get_inst_index+0x1c>
    27d8:	4a07      	ldr	r2, [pc, #28]	; (27f8 <_tc_get_inst_index+0x28>)
    27da:	4290      	cmp	r0, r2
    27dc:	d008      	beq.n	27f0 <_tc_get_inst_index+0x20>
    27de:	4a07      	ldr	r2, [pc, #28]	; (27fc <_tc_get_inst_index+0x2c>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    27e0:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
    27e2:	4293      	cmp	r3, r2
    27e4:	d101      	bne.n	27ea <_tc_get_inst_index+0x1a>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    27e6:	3002      	adds	r0, #2
			return i;
    27e8:	b2c0      	uxtb	r0, r0
}
    27ea:	4770      	bx	lr
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    27ec:	2000      	movs	r0, #0
    27ee:	e7fb      	b.n	27e8 <_tc_get_inst_index+0x18>
    27f0:	2001      	movs	r0, #1
    27f2:	e7f9      	b.n	27e8 <_tc_get_inst_index+0x18>
    27f4:	42002c00 	.word	0x42002c00
    27f8:	42003000 	.word	0x42003000
    27fc:	42003400 	.word	0x42003400

00002800 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2800:	b5f0      	push	{r4, r5, r6, r7, lr}
    2802:	0006      	movs	r6, r0
    2804:	b087      	sub	sp, #28
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2806:	0008      	movs	r0, r1
{
    2808:	0014      	movs	r4, r2
    280a:	000d      	movs	r5, r1
	uint8_t instance = _tc_get_inst_index(hw);
    280c:	f7ff ffe0 	bl	27d0 <_tc_get_inst_index>

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2810:	466a      	mov	r2, sp
    2812:	4b79      	ldr	r3, [pc, #484]	; (29f8 <tc_init+0x1f8>)
	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2814:	6035      	str	r5, [r6, #0]
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2816:	8113      	strh	r3, [r2, #8]
    2818:	231c      	movs	r3, #28
    281a:	7293      	strb	r3, [r2, #10]
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    281c:	4b77      	ldr	r3, [pc, #476]	; (29fc <tc_init+0x1fc>)
	uint8_t instance = _tc_get_inst_index(hw);
    281e:	0007      	movs	r7, r0
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2820:	9304      	str	r3, [sp, #16]
    2822:	2380      	movs	r3, #128	; 0x80
    2824:	019b      	lsls	r3, r3, #6
    2826:	8293      	strh	r3, [r2, #20]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2828:	78a3      	ldrb	r3, [r4, #2]
    282a:	2b08      	cmp	r3, #8
    282c:	d103      	bne.n	2836 <tc_init+0x36>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    282e:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2830:	07fa      	lsls	r2, r7, #31
    2832:	d400      	bmi.n	2836 <tc_init+0x36>
    2834:	e0ca      	b.n	29cc <tc_init+0x1cc>
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2836:	2201      	movs	r2, #1
	module_inst->counter_size = config->counter_size;
    2838:	7133      	strb	r3, [r6, #4]
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    283a:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    283c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    283e:	4213      	tst	r3, r2
    2840:	d000      	beq.n	2844 <tc_init+0x44>
    2842:	e0c3      	b.n	29cc <tc_init+0x1cc>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2844:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    2846:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2848:	06db      	lsls	r3, r3, #27
    284a:	d500      	bpl.n	284e <tc_init+0x4e>
    284c:	e0be      	b.n	29cc <tc_init+0x1cc>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    284e:	2102      	movs	r1, #2
    2850:	882b      	ldrh	r3, [r5, #0]
    2852:	400b      	ands	r3, r1
    2854:	d000      	beq.n	2858 <tc_init+0x58>
    2856:	e0b9      	b.n	29cc <tc_init+0x1cc>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    2858:	7c21      	ldrb	r1, [r4, #16]
    285a:	2900      	cmp	r1, #0
    285c:	d009      	beq.n	2872 <tc_init+0x72>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    285e:	a903      	add	r1, sp, #12
	config->powersave    = false;
    2860:	70cb      	strb	r3, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2862:	69a3      	ldr	r3, [r4, #24]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2864:	708a      	strb	r2, [r1, #2]
    2866:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    2868:	6963      	ldr	r3, [r4, #20]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    286a:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    286c:	b2d8      	uxtb	r0, r3
    286e:	f7ff ff9b 	bl	27a8 <system_pinmux_pin_set_config>
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    2872:	7f23      	ldrb	r3, [r4, #28]
    2874:	2b00      	cmp	r3, #0
    2876:	d00b      	beq.n	2890 <tc_init+0x90>
    2878:	2301      	movs	r3, #1
	config->powersave    = false;
    287a:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    287c:	a903      	add	r1, sp, #12
    287e:	708b      	strb	r3, [r1, #2]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2880:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2882:	6a23      	ldr	r3, [r4, #32]
	config->powersave    = false;
    2884:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2886:	6a62      	ldr	r2, [r4, #36]	; 0x24
		system_pinmux_pin_set_config(
    2888:	b2d8      	uxtb	r0, r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    288a:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
    288c:	f7ff ff8c 	bl	27a8 <system_pinmux_pin_set_config>
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    2890:	007a      	lsls	r2, r7, #1
    2892:	4694      	mov	ip, r2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2894:	4668      	mov	r0, sp
    2896:	2210      	movs	r2, #16
    2898:	1880      	adds	r0, r0, r2
    289a:	4662      	mov	r2, ip
    289c:	4b58      	ldr	r3, [pc, #352]	; (2a00 <tc_init+0x200>)
    289e:	5a82      	ldrh	r2, [r0, r2]
    28a0:	6a19      	ldr	r1, [r3, #32]
    28a2:	430a      	orrs	r2, r1
    28a4:	621a      	str	r2, [r3, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    28a6:	78a2      	ldrb	r2, [r4, #2]
    28a8:	2a08      	cmp	r2, #8
    28aa:	d10a      	bne.n	28c2 <tc_init+0xc2>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    28ac:	1c79      	adds	r1, r7, #1
    28ae:	004a      	lsls	r2, r1, #1
    28b0:	4694      	mov	ip, r2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    28b2:	2110      	movs	r1, #16
    28b4:	466a      	mov	r2, sp
    28b6:	1852      	adds	r2, r2, r1
    28b8:	4661      	mov	r1, ip
    28ba:	6a18      	ldr	r0, [r3, #32]
    28bc:	5a52      	ldrh	r2, [r2, r1]
    28be:	4302      	orrs	r2, r0
    28c0:	621a      	str	r2, [r3, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    28c2:	7823      	ldrb	r3, [r4, #0]
    28c4:	a901      	add	r1, sp, #4
    28c6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    28c8:	2208      	movs	r2, #8
    28ca:	466b      	mov	r3, sp
    28cc:	189b      	adds	r3, r3, r2
    28ce:	5ddf      	ldrb	r7, [r3, r7]
    28d0:	0038      	movs	r0, r7
    28d2:	f7fd fd49 	bl	368 <system_gclk_chan_set_config>
	system_gclk_chan_enable(inst_gclk_id[instance]);
    28d6:	0038      	movs	r0, r7
    28d8:	f7fd fd0a 	bl	2f0 <system_gclk_chan_enable>

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
    28dc:	79a3      	ldrb	r3, [r4, #6]
    28de:	78a2      	ldrb	r2, [r4, #2]
	ctrla_tmp =
    28e0:	88a1      	ldrh	r1, [r4, #4]
			(uint32_t)config->wave_generation |
    28e2:	431a      	orrs	r2, r3
	ctrla_tmp =
    28e4:	8923      	ldrh	r3, [r4, #8]
    28e6:	430b      	orrs	r3, r1
    28e8:	431a      	orrs	r2, r3
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    28ea:	7863      	ldrb	r3, [r4, #1]
    28ec:	2b00      	cmp	r3, #0
    28ee:	d002      	beq.n	28f6 <tc_init+0xf6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    28f0:	2380      	movs	r3, #128	; 0x80
    28f2:	011b      	lsls	r3, r3, #4
    28f4:	431a      	orrs	r2, r3
    28f6:	6833      	ldr	r3, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    28f8:	7bd9      	ldrb	r1, [r3, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    28fa:	b249      	sxtb	r1, r1
    28fc:	2900      	cmp	r1, #0
    28fe:	dbfb      	blt.n	28f8 <tc_init+0xf8>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2900:	802a      	strh	r2, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    2902:	7b62      	ldrb	r2, [r4, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    2904:	1e51      	subs	r1, r2, #1
    2906:	418a      	sbcs	r2, r1
	}

	if (config->count_direction) {
    2908:	7ba1      	ldrb	r1, [r4, #14]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    290a:	0092      	lsls	r2, r2, #2
	if (config->count_direction) {
    290c:	2900      	cmp	r1, #0
    290e:	d001      	beq.n	2914 <tc_init+0x114>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2910:	2101      	movs	r1, #1
    2912:	430a      	orrs	r2, r1
    2914:	7bd9      	ldrb	r1, [r3, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    2916:	b249      	sxtb	r1, r1
    2918:	2900      	cmp	r1, #0
    291a:	dbfb      	blt.n	2914 <tc_init+0x114>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    291c:	21ff      	movs	r1, #255	; 0xff
    291e:	7129      	strb	r1, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    2920:	2a00      	cmp	r2, #0
    2922:	d004      	beq.n	292e <tc_init+0x12e>
    2924:	7bd9      	ldrb	r1, [r3, #15]
		while (tc_is_syncing(module_inst)) {
    2926:	b249      	sxtb	r1, r1
    2928:	2900      	cmp	r1, #0
    292a:	dbfb      	blt.n	2924 <tc_init+0x124>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    292c:	716a      	strb	r2, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    292e:	7ae2      	ldrb	r2, [r4, #11]
	ctrlc_tmp = config->waveform_invert_output;
    2930:	7aa1      	ldrb	r1, [r4, #10]
		if (config->enable_capture_on_channel[i] == true) {
    2932:	2a00      	cmp	r2, #0
    2934:	d001      	beq.n	293a <tc_init+0x13a>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2936:	2210      	movs	r2, #16
    2938:	4311      	orrs	r1, r2
		if (config->enable_capture_on_channel[i] == true) {
    293a:	7b22      	ldrb	r2, [r4, #12]
    293c:	2a00      	cmp	r2, #0
    293e:	d001      	beq.n	2944 <tc_init+0x144>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2940:	2220      	movs	r2, #32
    2942:	4311      	orrs	r1, r2
    2944:	7bda      	ldrb	r2, [r3, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2946:	b252      	sxtb	r2, r2
    2948:	2a00      	cmp	r2, #0
    294a:	dbfb      	blt.n	2944 <tc_init+0x144>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    294c:	71a9      	strb	r1, [r5, #6]
    294e:	7bda      	ldrb	r2, [r3, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2950:	b252      	sxtb	r2, r2
    2952:	2a00      	cmp	r2, #0
    2954:	dbfb      	blt.n	294e <tc_init+0x14e>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    2956:	7932      	ldrb	r2, [r6, #4]
    2958:	2a04      	cmp	r2, #4
    295a:	d017      	beq.n	298c <tc_init+0x18c>
    295c:	2a08      	cmp	r2, #8
    295e:	d037      	beq.n	29d0 <tc_init+0x1d0>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    2960:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2962:	2a00      	cmp	r2, #0
    2964:	d132      	bne.n	29cc <tc_init+0x1cc>
    2966:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    2968:	b252      	sxtb	r2, r2
    296a:	2a00      	cmp	r2, #0
    296c:	dbfb      	blt.n	2966 <tc_init+0x166>
				= config->counter_16_bit.value;
    296e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    2970:	822a      	strh	r2, [r5, #16]
    2972:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    2974:	b252      	sxtb	r2, r2
    2976:	2a00      	cmp	r2, #0
    2978:	dbfb      	blt.n	2972 <tc_init+0x172>
					config->counter_16_bit.compare_capture_channel[0];
    297a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    297c:	832a      	strh	r2, [r5, #24]
    297e:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    2980:	b252      	sxtb	r2, r2
    2982:	2a00      	cmp	r2, #0
    2984:	dbfb      	blt.n	297e <tc_init+0x17e>
					config->counter_16_bit.compare_capture_channel[1];
    2986:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    2988:	836b      	strh	r3, [r5, #26]
    298a:	e01e      	b.n	29ca <tc_init+0x1ca>
    298c:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    298e:	b252      	sxtb	r2, r2
    2990:	2a00      	cmp	r2, #0
    2992:	dbfb      	blt.n	298c <tc_init+0x18c>
					config->counter_8_bit.value;
    2994:	0022      	movs	r2, r4
    2996:	3228      	adds	r2, #40	; 0x28
    2998:	7812      	ldrb	r2, [r2, #0]
			hw->COUNT8.COUNT.reg =
    299a:	742a      	strb	r2, [r5, #16]
    299c:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    299e:	b252      	sxtb	r2, r2
    29a0:	2a00      	cmp	r2, #0
    29a2:	dbfb      	blt.n	299c <tc_init+0x19c>
					config->counter_8_bit.period;
    29a4:	0022      	movs	r2, r4
    29a6:	3229      	adds	r2, #41	; 0x29
    29a8:	7812      	ldrb	r2, [r2, #0]
			hw->COUNT8.PER.reg =
    29aa:	752a      	strb	r2, [r5, #20]
    29ac:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    29ae:	b252      	sxtb	r2, r2
    29b0:	2a00      	cmp	r2, #0
    29b2:	dbfb      	blt.n	29ac <tc_init+0x1ac>
					config->counter_8_bit.compare_capture_channel[0];
    29b4:	0022      	movs	r2, r4
    29b6:	322a      	adds	r2, #42	; 0x2a
    29b8:	7812      	ldrb	r2, [r2, #0]
			hw->COUNT8.CC[0].reg =
    29ba:	762a      	strb	r2, [r5, #24]
    29bc:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    29be:	b252      	sxtb	r2, r2
    29c0:	2a00      	cmp	r2, #0
    29c2:	dbfb      	blt.n	29bc <tc_init+0x1bc>
					config->counter_8_bit.compare_capture_channel[1];
    29c4:	342b      	adds	r4, #43	; 0x2b
    29c6:	7823      	ldrb	r3, [r4, #0]
			hw->COUNT8.CC[1].reg =
    29c8:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    29ca:	2000      	movs	r0, #0
}
    29cc:	b007      	add	sp, #28
    29ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29d0:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    29d2:	b252      	sxtb	r2, r2
    29d4:	2a00      	cmp	r2, #0
    29d6:	dbfb      	blt.n	29d0 <tc_init+0x1d0>
				= config->counter_32_bit.value;
    29d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    29da:	612a      	str	r2, [r5, #16]
    29dc:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    29de:	b252      	sxtb	r2, r2
    29e0:	2a00      	cmp	r2, #0
    29e2:	dbfb      	blt.n	29dc <tc_init+0x1dc>
			hw->COUNT32.CC[0].reg =
    29e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    29e6:	61aa      	str	r2, [r5, #24]
    29e8:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    29ea:	b252      	sxtb	r2, r2
    29ec:	2a00      	cmp	r2, #0
    29ee:	dbfb      	blt.n	29e8 <tc_init+0x1e8>
					config->counter_32_bit.compare_capture_channel[1];
    29f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    29f2:	61eb      	str	r3, [r5, #28]
    29f4:	e7e9      	b.n	29ca <tc_init+0x1ca>
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	00001c1b 	.word	0x00001c1b
    29fc:	10000800 	.word	0x10000800
    2a00:	40000400 	.word	0x40000400

00002a04 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2a04:	6803      	ldr	r3, [r0, #0]
    2a06:	7bda      	ldrb	r2, [r3, #15]

	while (tc_is_syncing(module_inst)) {
    2a08:	b252      	sxtb	r2, r2
    2a0a:	2a00      	cmp	r2, #0
    2a0c:	dbfb      	blt.n	2a06 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    2a0e:	7902      	ldrb	r2, [r0, #4]
    2a10:	2a04      	cmp	r2, #4
    2a12:	d007      	beq.n	2a24 <tc_get_count_value+0x20>
    2a14:	2a08      	cmp	r2, #8
    2a16:	d008      	beq.n	2a2a <tc_get_count_value+0x26>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    2a18:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    2a1a:	2a00      	cmp	r2, #0
    2a1c:	d104      	bne.n	2a28 <tc_get_count_value+0x24>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    2a1e:	8a18      	ldrh	r0, [r3, #16]
    2a20:	b280      	uxth	r0, r0
    2a22:	e001      	b.n	2a28 <tc_get_count_value+0x24>
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    2a24:	7c18      	ldrb	r0, [r3, #16]
    2a26:	b2c0      	uxtb	r0, r0
}
    2a28:	4770      	bx	lr
			return tc_module->COUNT32.COUNT.reg;
    2a2a:	6918      	ldr	r0, [r3, #16]
    2a2c:	e7fc      	b.n	2a28 <tc_get_count_value+0x24>

00002a2e <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2a2e:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2a30:	6804      	ldr	r4, [r0, #0]
    2a32:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    2a34:	b25b      	sxtb	r3, r3
    2a36:	2b00      	cmp	r3, #0
    2a38:	dbfb      	blt.n	2a32 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2a3a:	7903      	ldrb	r3, [r0, #4]
    2a3c:	2b04      	cmp	r3, #4
    2a3e:	d00c      	beq.n	2a5a <tc_set_compare_value+0x2c>
    2a40:	2b08      	cmp	r3, #8
    2a42:	d012      	beq.n	2a6a <tc_set_compare_value+0x3c>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2a44:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2a46:	2b00      	cmp	r3, #0
    2a48:	d10e      	bne.n	2a68 <tc_set_compare_value+0x3a>
	return STATUS_ERR_INVALID_ARG;
    2a4a:	2017      	movs	r0, #23
			if (channel_index <
    2a4c:	2901      	cmp	r1, #1
    2a4e:	d80b      	bhi.n	2a68 <tc_set_compare_value+0x3a>
				tc_module->COUNT16.CC[channel_index].reg =
    2a50:	310c      	adds	r1, #12
						(uint16_t)compare;
    2a52:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    2a54:	0049      	lsls	r1, r1, #1
    2a56:	530a      	strh	r2, [r1, r4]
    2a58:	e005      	b.n	2a66 <tc_set_compare_value+0x38>
	return STATUS_ERR_INVALID_ARG;
    2a5a:	2017      	movs	r0, #23
			if (channel_index <
    2a5c:	2901      	cmp	r1, #1
    2a5e:	d803      	bhi.n	2a68 <tc_set_compare_value+0x3a>
						(uint8_t)compare;
    2a60:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    2a62:	1861      	adds	r1, r4, r1
    2a64:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    2a66:	2000      	movs	r0, #0
}
    2a68:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    2a6a:	2017      	movs	r0, #23
			if (channel_index <
    2a6c:	2901      	cmp	r1, #1
    2a6e:	d8fb      	bhi.n	2a68 <tc_set_compare_value+0x3a>
				tc_module->COUNT32.CC[channel_index].reg =
    2a70:	3106      	adds	r1, #6
    2a72:	0089      	lsls	r1, r1, #2
    2a74:	510a      	str	r2, [r1, r4]
    2a76:	e7f6      	b.n	2a66 <tc_set_compare_value+0x38>

00002a78 <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    2a78:	22a5      	movs	r2, #165	; 0xa5
    2a7a:	4b03      	ldr	r3, [pc, #12]	; (2a88 <wdt_reset_count+0x10>)
    2a7c:	721a      	strb	r2, [r3, #8]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    2a7e:	79da      	ldrb	r2, [r3, #7]
    2a80:	b252      	sxtb	r2, r2
    2a82:	2a00      	cmp	r2, #0
    2a84:	dbfb      	blt.n	2a7e <wdt_reset_count+0x6>

	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2a86:	4770      	bx	lr
    2a88:	40001000 	.word	0x40001000

00002a8c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2a8c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2a8e:	0849      	lsrs	r1, r1, #1
{
    2a90:	0004      	movs	r4, r0
	uint16_t baud_calculated = 0;
    2a92:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2a94:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
    2a96:	42a1      	cmp	r1, r4
    2a98:	d201      	bcs.n	2a9e <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    2a9a:	bd10      	pop	{r4, pc}
		baud_calculated++;
    2a9c:	0003      	movs	r3, r0
    2a9e:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
    2aa0:	1b09      	subs	r1, r1, r4
		baud_calculated++;
    2aa2:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
    2aa4:	428c      	cmp	r4, r1
    2aa6:	d9f9      	bls.n	2a9c <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2aa8:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
    2aaa:	2bff      	cmp	r3, #255	; 0xff
    2aac:	d8f5      	bhi.n	2a9a <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
    2aae:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    2ab0:	2000      	movs	r0, #0
    2ab2:	e7f2      	b.n	2a9a <_sercom_get_sync_baud_val+0xe>

00002ab4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ab6:	b08b      	sub	sp, #44	; 0x2c
    2ab8:	9206      	str	r2, [sp, #24]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2aba:	0002      	movs	r2, r0
{
    2abc:	001d      	movs	r5, r3
    2abe:	ab10      	add	r3, sp, #64	; 0x40
    2ac0:	000e      	movs	r6, r1
    2ac2:	7819      	ldrb	r1, [r3, #0]
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2ac4:	2340      	movs	r3, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    2ac6:	434a      	muls	r2, r1
    2ac8:	42b2      	cmp	r2, r6
    2aca:	d900      	bls.n	2ace <_sercom_get_async_baud_val+0x1a>
    2acc:	e08b      	b.n	2be6 <_sercom_get_async_baud_val+0x132>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2ace:	2d00      	cmp	r5, #0
    2ad0:	d142      	bne.n	2b58 <_sercom_get_async_baud_val+0xa4>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
    2ad2:	2400      	movs	r4, #0
	uint64_t q = 0, r = 0, bit_shift;
    2ad4:	0027      	movs	r7, r4
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2ad6:	002b      	movs	r3, r5
    2ad8:	0002      	movs	r2, r0
    2ada:	0008      	movs	r0, r1
    2adc:	0029      	movs	r1, r5
    2ade:	f000 fe89 	bl	37f4 <__aeabi_lmul>
		ratio = long_division(temp1, peripheral_clock);
    2ae2:	2300      	movs	r3, #0
    2ae4:	9501      	str	r5, [sp, #4]
	uint64_t q = 0, r = 0, bit_shift;
    2ae6:	003d      	movs	r5, r7
		ratio = long_division(temp1, peripheral_clock);
    2ae8:	9600      	str	r6, [sp, #0]
	uint64_t q = 0, r = 0, bit_shift;
    2aea:	001c      	movs	r4, r3
    2aec:	001e      	movs	r6, r3
	for (i = 63; i >= 0; i--) {
    2aee:	333f      	adds	r3, #63	; 0x3f
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2af0:	9007      	str	r0, [sp, #28]
	for (i = 63; i >= 0; i--) {
    2af2:	9303      	str	r3, [sp, #12]
		bit_shift = (uint64_t)1 << i;
    2af4:	9a03      	ldr	r2, [sp, #12]
    2af6:	2001      	movs	r0, #1
    2af8:	2100      	movs	r1, #0
    2afa:	f000 fe6f 	bl	37dc <__aeabi_llsl>
		r = r << 1;
    2afe:	0022      	movs	r2, r4
    2b00:	002b      	movs	r3, r5
    2b02:	1912      	adds	r2, r2, r4
    2b04:	416b      	adcs	r3, r5
    2b06:	9204      	str	r2, [sp, #16]
    2b08:	9305      	str	r3, [sp, #20]
    2b0a:	001d      	movs	r5, r3
		if (n & bit_shift) {
    2b0c:	9b07      	ldr	r3, [sp, #28]
		r = r << 1;
    2b0e:	0014      	movs	r4, r2
		if (n & bit_shift) {
    2b10:	420b      	tst	r3, r1
    2b12:	d003      	beq.n	2b1c <_sercom_get_async_baud_val+0x68>
			r |= 0x01;
    2b14:	2201      	movs	r2, #1
    2b16:	4322      	orrs	r2, r4
    2b18:	0014      	movs	r4, r2
    2b1a:	9d05      	ldr	r5, [sp, #20]
		if (r >= d) {
    2b1c:	9b01      	ldr	r3, [sp, #4]
    2b1e:	42ab      	cmp	r3, r5
    2b20:	d80b      	bhi.n	2b3a <_sercom_get_async_baud_val+0x86>
    2b22:	d102      	bne.n	2b2a <_sercom_get_async_baud_val+0x76>
    2b24:	9b00      	ldr	r3, [sp, #0]
    2b26:	42a3      	cmp	r3, r4
    2b28:	d807      	bhi.n	2b3a <_sercom_get_async_baud_val+0x86>
			r = r - d;
    2b2a:	9a00      	ldr	r2, [sp, #0]
    2b2c:	9b01      	ldr	r3, [sp, #4]
			q |= bit_shift;
    2b2e:	4330      	orrs	r0, r6
    2b30:	4339      	orrs	r1, r7
			r = r - d;
    2b32:	1aa4      	subs	r4, r4, r2
    2b34:	419d      	sbcs	r5, r3
			q |= bit_shift;
    2b36:	0006      	movs	r6, r0
    2b38:	000f      	movs	r7, r1
	for (i = 63; i >= 0; i--) {
    2b3a:	9b03      	ldr	r3, [sp, #12]
    2b3c:	1e5a      	subs	r2, r3, #1
    2b3e:	9203      	str	r2, [sp, #12]
    2b40:	d2d8      	bcs.n	2af4 <_sercom_get_async_baud_val+0x40>
		scale = ((uint64_t)1 << SHIFT) - ratio;
    2b42:	2200      	movs	r2, #0
    2b44:	2301      	movs	r3, #1
    2b46:	1b92      	subs	r2, r2, r6
    2b48:	41bb      	sbcs	r3, r7
		baud_calculated = (65536 * scale) >> SHIFT;
    2b4a:	0c14      	lsrs	r4, r2, #16
    2b4c:	041b      	lsls	r3, r3, #16
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    2b4e:	431c      	orrs	r4, r3
	}

	*baudval = baud_calculated;
    2b50:	9b06      	ldr	r3, [sp, #24]
    2b52:	801c      	strh	r4, [r3, #0]
	return STATUS_OK;
    2b54:	2300      	movs	r3, #0
    2b56:	e046      	b.n	2be6 <_sercom_get_async_baud_val+0x132>
	uint64_t baud_calculated = 0;
    2b58:	2400      	movs	r4, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2b5a:	2d01      	cmp	r5, #1
    2b5c:	d1f8      	bne.n	2b50 <_sercom_get_async_baud_val+0x9c>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    2b5e:	0f73      	lsrs	r3, r6, #29
    2b60:	9307      	str	r3, [sp, #28]
    2b62:	00f3      	lsls	r3, r6, #3
    2b64:	9308      	str	r3, [sp, #32]
			temp2 = ((uint64_t)baudrate * sample_num);
    2b66:	000a      	movs	r2, r1
    2b68:	0023      	movs	r3, r4
    2b6a:	0021      	movs	r1, r4
    2b6c:	f000 fe42 	bl	37f4 <__aeabi_lmul>
    2b70:	9000      	str	r0, [sp, #0]
    2b72:	9101      	str	r1, [sp, #4]
			r |= 0x01;
    2b74:	9509      	str	r5, [sp, #36]	; 0x24
	uint64_t q = 0, r = 0, bit_shift;
    2b76:	2300      	movs	r3, #0
    2b78:	2600      	movs	r6, #0
    2b7a:	2700      	movs	r7, #0
	for (i = 63; i >= 0; i--) {
    2b7c:	253f      	movs	r5, #63	; 0x3f
	uint64_t q = 0, r = 0, bit_shift;
    2b7e:	9303      	str	r3, [sp, #12]
		bit_shift = (uint64_t)1 << i;
    2b80:	002a      	movs	r2, r5
    2b82:	2001      	movs	r0, #1
    2b84:	2100      	movs	r1, #0
    2b86:	f000 fe29 	bl	37dc <__aeabi_llsl>
		r = r << 1;
    2b8a:	0032      	movs	r2, r6
    2b8c:	003b      	movs	r3, r7
		bit_shift = (uint64_t)1 << i;
    2b8e:	468c      	mov	ip, r1
		r = r << 1;
    2b90:	1992      	adds	r2, r2, r6
    2b92:	417b      	adcs	r3, r7
    2b94:	9204      	str	r2, [sp, #16]
    2b96:	9305      	str	r3, [sp, #20]
    2b98:	001f      	movs	r7, r3
		if (n & bit_shift) {
    2b9a:	4663      	mov	r3, ip
		r = r << 1;
    2b9c:	0016      	movs	r6, r2
		if (n & bit_shift) {
    2b9e:	9908      	ldr	r1, [sp, #32]
    2ba0:	9a07      	ldr	r2, [sp, #28]
    2ba2:	4001      	ands	r1, r0
    2ba4:	4013      	ands	r3, r2
    2ba6:	4319      	orrs	r1, r3
    2ba8:	d003      	beq.n	2bb2 <_sercom_get_async_baud_val+0xfe>
			r |= 0x01;
    2baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2bac:	9f05      	ldr	r7, [sp, #20]
    2bae:	4332      	orrs	r2, r6
    2bb0:	0016      	movs	r6, r2
		if (r >= d) {
    2bb2:	9b01      	ldr	r3, [sp, #4]
    2bb4:	42bb      	cmp	r3, r7
    2bb6:	d80a      	bhi.n	2bce <_sercom_get_async_baud_val+0x11a>
    2bb8:	d102      	bne.n	2bc0 <_sercom_get_async_baud_val+0x10c>
    2bba:	9b00      	ldr	r3, [sp, #0]
    2bbc:	42b3      	cmp	r3, r6
    2bbe:	d806      	bhi.n	2bce <_sercom_get_async_baud_val+0x11a>
			r = r - d;
    2bc0:	9a00      	ldr	r2, [sp, #0]
    2bc2:	9b01      	ldr	r3, [sp, #4]
    2bc4:	1ab6      	subs	r6, r6, r2
    2bc6:	419f      	sbcs	r7, r3
			q |= bit_shift;
    2bc8:	9b03      	ldr	r3, [sp, #12]
    2bca:	4303      	orrs	r3, r0
    2bcc:	9303      	str	r3, [sp, #12]
	for (i = 63; i >= 0; i--) {
    2bce:	3d01      	subs	r5, #1
    2bd0:	d2d6      	bcs.n	2b80 <_sercom_get_async_baud_val+0xcc>
			baud_int -= baud_fp;
    2bd2:	9b03      	ldr	r3, [sp, #12]
			if(baud_int < BAUD_INT_MAX) {
    2bd4:	4a06      	ldr	r2, [pc, #24]	; (2bf0 <_sercom_get_async_baud_val+0x13c>)
			baud_int -= baud_fp;
    2bd6:	1b1b      	subs	r3, r3, r4
			baud_int = baud_int / BAUD_FP_MAX;
    2bd8:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    2bda:	4293      	cmp	r3, r2
    2bdc:	d906      	bls.n	2bec <_sercom_get_async_baud_val+0x138>
    2bde:	3401      	adds	r4, #1
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    2be0:	2c08      	cmp	r4, #8
    2be2:	d1c8      	bne.n	2b76 <_sercom_get_async_baud_val+0xc2>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2be4:	2340      	movs	r3, #64	; 0x40
}
    2be6:	0018      	movs	r0, r3
    2be8:	b00b      	add	sp, #44	; 0x2c
    2bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		baud_calculated = baud_int | (baud_fp << 13);
    2bec:	0364      	lsls	r4, r4, #13
    2bee:	e7ae      	b.n	2b4e <_sercom_get_async_baud_val+0x9a>
    2bf0:	00001fff 	.word	0x00001fff

00002bf4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2bf6:	4c0d      	ldr	r4, [pc, #52]	; (2c2c <sercom_set_gclk_generator+0x38>)
{
    2bf8:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
    2bfa:	7823      	ldrb	r3, [r4, #0]
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	d001      	beq.n	2c04 <sercom_set_gclk_generator+0x10>
    2c00:	2900      	cmp	r1, #0
    2c02:	d00c      	beq.n	2c1e <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    2c04:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2c06:	2013      	movs	r0, #19
		gclk_chan_conf.source_generator = generator_source;
    2c08:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2c0a:	f7fd fbad 	bl	368 <system_gclk_chan_set_config>
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2c0e:	2013      	movs	r0, #19
    2c10:	f7fd fb6e 	bl	2f0 <system_gclk_chan_enable>

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
    2c14:	2301      	movs	r3, #1

		return STATUS_OK;
    2c16:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
    2c18:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    2c1a:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    2c1c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
    2c1e:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
    2c20:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
    2c22:	42ab      	cmp	r3, r5
    2c24:	d0fa      	beq.n	2c1c <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
    2c26:	201d      	movs	r0, #29
    2c28:	e7f8      	b.n	2c1c <sercom_set_gclk_generator+0x28>
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	2000130c 	.word	0x2000130c

00002c30 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2c30:	4a39      	ldr	r2, [pc, #228]	; (2d18 <_sercom_get_default_pad+0xe8>)
{
    2c32:	0003      	movs	r3, r0
    2c34:	b500      	push	{lr}
    2c36:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
    2c38:	4293      	cmp	r3, r2
    2c3a:	d037      	beq.n	2cac <_sercom_get_default_pad+0x7c>
    2c3c:	d807      	bhi.n	2c4e <_sercom_get_default_pad+0x1e>
    2c3e:	4a37      	ldr	r2, [pc, #220]	; (2d1c <_sercom_get_default_pad+0xec>)
    2c40:	4293      	cmp	r3, r2
    2c42:	d014      	beq.n	2c6e <_sercom_get_default_pad+0x3e>
    2c44:	4a36      	ldr	r2, [pc, #216]	; (2d20 <_sercom_get_default_pad+0xf0>)
    2c46:	4293      	cmp	r3, r2
    2c48:	d021      	beq.n	2c8e <_sercom_get_default_pad+0x5e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    2c4a:	2300      	movs	r3, #0
    2c4c:	e017      	b.n	2c7e <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
    2c4e:	4a35      	ldr	r2, [pc, #212]	; (2d24 <_sercom_get_default_pad+0xf4>)
    2c50:	4293      	cmp	r3, r2
    2c52:	d042      	beq.n	2cda <_sercom_get_default_pad+0xaa>
    2c54:	4a34      	ldr	r2, [pc, #208]	; (2d28 <_sercom_get_default_pad+0xf8>)
    2c56:	4293      	cmp	r3, r2
    2c58:	d04e      	beq.n	2cf8 <_sercom_get_default_pad+0xc8>
    2c5a:	4a34      	ldr	r2, [pc, #208]	; (2d2c <_sercom_get_default_pad+0xfc>)
    2c5c:	4293      	cmp	r3, r2
    2c5e:	d1f4      	bne.n	2c4a <_sercom_get_default_pad+0x1a>
	return 0;
    2c60:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2c62:	2903      	cmp	r1, #3
    2c64:	d80b      	bhi.n	2c7e <_sercom_get_default_pad+0x4e>
    2c66:	f000 fc3b 	bl	34e0 <__gnu_thumb1_case_uqi>
    2c6a:	3032      	.short	0x3032
    2c6c:	3634      	.short	0x3634
	return 0;
    2c6e:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2c70:	2903      	cmp	r1, #3
    2c72:	d804      	bhi.n	2c7e <_sercom_get_default_pad+0x4e>
    2c74:	f000 fc34 	bl	34e0 <__gnu_thumb1_case_uqi>
    2c78:	09070205 	.word	0x09070205
    2c7c:	4b2c      	ldr	r3, [pc, #176]	; (2d30 <_sercom_get_default_pad+0x100>)
}
    2c7e:	0018      	movs	r0, r3
    2c80:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2c82:	4b2c      	ldr	r3, [pc, #176]	; (2d34 <_sercom_get_default_pad+0x104>)
    2c84:	e7fb      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2c86:	4b2c      	ldr	r3, [pc, #176]	; (2d38 <_sercom_get_default_pad+0x108>)
    2c88:	e7f9      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2c8a:	4b2c      	ldr	r3, [pc, #176]	; (2d3c <_sercom_get_default_pad+0x10c>)
    2c8c:	e7f7      	b.n	2c7e <_sercom_get_default_pad+0x4e>
	return 0;
    2c8e:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2c90:	2903      	cmp	r1, #3
    2c92:	d8f4      	bhi.n	2c7e <_sercom_get_default_pad+0x4e>
    2c94:	f000 fc24 	bl	34e0 <__gnu_thumb1_case_uqi>
    2c98:	08060204 	.word	0x08060204
    2c9c:	4b28      	ldr	r3, [pc, #160]	; (2d40 <_sercom_get_default_pad+0x110>)
    2c9e:	e7ee      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2ca0:	2303      	movs	r3, #3
    2ca2:	e7ec      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2ca4:	4b27      	ldr	r3, [pc, #156]	; (2d44 <_sercom_get_default_pad+0x114>)
    2ca6:	e7ea      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2ca8:	4b27      	ldr	r3, [pc, #156]	; (2d48 <_sercom_get_default_pad+0x118>)
    2caa:	e7e8      	b.n	2c7e <_sercom_get_default_pad+0x4e>
	return 0;
    2cac:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2cae:	2903      	cmp	r1, #3
    2cb0:	d8e5      	bhi.n	2c7e <_sercom_get_default_pad+0x4e>
    2cb2:	f000 fc15 	bl	34e0 <__gnu_thumb1_case_uqi>
    2cb6:	0204      	.short	0x0204
    2cb8:	0806      	.short	0x0806
    2cba:	4b24      	ldr	r3, [pc, #144]	; (2d4c <_sercom_get_default_pad+0x11c>)
    2cbc:	e7df      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2cbe:	4b24      	ldr	r3, [pc, #144]	; (2d50 <_sercom_get_default_pad+0x120>)
    2cc0:	e7dd      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2cc2:	4b24      	ldr	r3, [pc, #144]	; (2d54 <_sercom_get_default_pad+0x124>)
    2cc4:	e7db      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2cc6:	4b24      	ldr	r3, [pc, #144]	; (2d58 <_sercom_get_default_pad+0x128>)
    2cc8:	e7d9      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2cca:	4b24      	ldr	r3, [pc, #144]	; (2d5c <_sercom_get_default_pad+0x12c>)
    2ccc:	e7d7      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2cce:	4b24      	ldr	r3, [pc, #144]	; (2d60 <_sercom_get_default_pad+0x130>)
    2cd0:	e7d5      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2cd2:	4b24      	ldr	r3, [pc, #144]	; (2d64 <_sercom_get_default_pad+0x134>)
    2cd4:	e7d3      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2cd6:	4b24      	ldr	r3, [pc, #144]	; (2d68 <_sercom_get_default_pad+0x138>)
    2cd8:	e7d1      	b.n	2c7e <_sercom_get_default_pad+0x4e>
	return 0;
    2cda:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2cdc:	2903      	cmp	r1, #3
    2cde:	d8ce      	bhi.n	2c7e <_sercom_get_default_pad+0x4e>
    2ce0:	f000 fbfe 	bl	34e0 <__gnu_thumb1_case_uqi>
    2ce4:	08060204 	.word	0x08060204
    2ce8:	4b20      	ldr	r3, [pc, #128]	; (2d6c <_sercom_get_default_pad+0x13c>)
    2cea:	e7c8      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2cec:	4b20      	ldr	r3, [pc, #128]	; (2d70 <_sercom_get_default_pad+0x140>)
    2cee:	e7c6      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2cf0:	4b20      	ldr	r3, [pc, #128]	; (2d74 <_sercom_get_default_pad+0x144>)
    2cf2:	e7c4      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2cf4:	4b20      	ldr	r3, [pc, #128]	; (2d78 <_sercom_get_default_pad+0x148>)
    2cf6:	e7c2      	b.n	2c7e <_sercom_get_default_pad+0x4e>
	return 0;
    2cf8:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2cfa:	2903      	cmp	r1, #3
    2cfc:	d8bf      	bhi.n	2c7e <_sercom_get_default_pad+0x4e>
    2cfe:	f000 fbef 	bl	34e0 <__gnu_thumb1_case_uqi>
    2d02:	0204      	.short	0x0204
    2d04:	0806      	.short	0x0806
    2d06:	4b1d      	ldr	r3, [pc, #116]	; (2d7c <_sercom_get_default_pad+0x14c>)
    2d08:	e7b9      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2d0a:	4b1d      	ldr	r3, [pc, #116]	; (2d80 <_sercom_get_default_pad+0x150>)
    2d0c:	e7b7      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2d0e:	4b1d      	ldr	r3, [pc, #116]	; (2d84 <_sercom_get_default_pad+0x154>)
    2d10:	e7b5      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2d12:	4b1d      	ldr	r3, [pc, #116]	; (2d88 <_sercom_get_default_pad+0x158>)
    2d14:	e7b3      	b.n	2c7e <_sercom_get_default_pad+0x4e>
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	42001000 	.word	0x42001000
    2d1c:	42000800 	.word	0x42000800
    2d20:	42000c00 	.word	0x42000c00
    2d24:	42001800 	.word	0x42001800
    2d28:	42001c00 	.word	0x42001c00
    2d2c:	42001400 	.word	0x42001400
    2d30:	00050003 	.word	0x00050003
    2d34:	00040003 	.word	0x00040003
    2d38:	00060003 	.word	0x00060003
    2d3c:	00070003 	.word	0x00070003
    2d40:	00010003 	.word	0x00010003
    2d44:	001e0003 	.word	0x001e0003
    2d48:	001f0003 	.word	0x001f0003
    2d4c:	00090003 	.word	0x00090003
    2d50:	00080003 	.word	0x00080003
    2d54:	000a0003 	.word	0x000a0003
    2d58:	000b0003 	.word	0x000b0003
    2d5c:	00110003 	.word	0x00110003
    2d60:	00100003 	.word	0x00100003
    2d64:	00120003 	.word	0x00120003
    2d68:	00130003 	.word	0x00130003
    2d6c:	000d0003 	.word	0x000d0003
    2d70:	000c0003 	.word	0x000c0003
    2d74:	000e0003 	.word	0x000e0003
    2d78:	000f0003 	.word	0x000f0003
    2d7c:	00170003 	.word	0x00170003
    2d80:	00160003 	.word	0x00160003
    2d84:	00180003 	.word	0x00180003
    2d88:	00190003 	.word	0x00190003

00002d8c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2d8c:	b570      	push	{r4, r5, r6, lr}
    2d8e:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2d90:	466a      	mov	r2, sp
    2d92:	0011      	movs	r1, r2
    2d94:	4b08      	ldr	r3, [pc, #32]	; (2db8 <_sercom_get_sercom_inst_index+0x2c>)
    2d96:	cb70      	ldmia	r3!, {r4, r5, r6}
    2d98:	c170      	stmia	r1!, {r4, r5, r6}
    2d9a:	cb70      	ldmia	r3!, {r4, r5, r6}
    2d9c:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2d9e:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2da0:	0099      	lsls	r1, r3, #2
    2da2:	5851      	ldr	r1, [r2, r1]
    2da4:	4281      	cmp	r1, r0
    2da6:	d102      	bne.n	2dae <_sercom_get_sercom_inst_index+0x22>
			return i;
    2da8:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
    2daa:	b006      	add	sp, #24
    2dac:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2dae:	3301      	adds	r3, #1
    2db0:	2b06      	cmp	r3, #6
    2db2:	d1f5      	bne.n	2da0 <_sercom_get_sercom_inst_index+0x14>
	return 0;
    2db4:	2000      	movs	r0, #0
    2db6:	e7f8      	b.n	2daa <_sercom_get_sercom_inst_index+0x1e>
    2db8:	00003a2c 	.word	0x00003a2c

00002dbc <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    2dbc:	b510      	push	{r4, lr}
    int sr;

    OS_ENTER_CRITICAL(sr);
    2dbe:	f000 f876 	bl	2eae <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    console_printf("Assert @ 0x%x\n",
                   (unsigned int)__builtin_return_address(0));
    if (hal_debugger_connected()) {
    2dc2:	f7fe fce3 	bl	178c <hal_debugger_connected>
    2dc6:	2800      	cmp	r0, #0
    2dc8:	d000      	beq.n	2dcc <__assert_func+0x10>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
       asm("bkpt");
    2dca:	be00      	bkpt	0x0000
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    2dcc:	2280      	movs	r2, #128	; 0x80
    2dce:	4b02      	ldr	r3, [pc, #8]	; (2dd8 <__assert_func+0x1c>)
    2dd0:	0612      	lsls	r2, r2, #24
    2dd2:	605a      	str	r2, [r3, #4]
    /* Exception happens right away. Next line not executed. */
    hal_system_reset();
    2dd4:	f7fe fcc6 	bl	1764 <hal_system_reset>
    2dd8:	e000ed00 	.word	0xe000ed00

00002ddc <os_default_irq>:
    struct coredump_regs regs;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    2ddc:	4b02      	ldr	r3, [pc, #8]	; (2de8 <os_default_irq+0xc>)
{
    2dde:	b510      	push	{r4, lr}
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    2de0:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx\n", SCB->ICSR);
    2de2:	685b      	ldr	r3, [r3, #4]
#if MYNEWT_VAL(OS_COREDUMP)
    trap_to_coredump(tf, &regs);
    coredump_dump(&regs, sizeof(regs));
#endif
    hal_system_reset();
    2de4:	f7fe fcbe 	bl	1764 <hal_system_reset>
    2de8:	e000ed00 	.word	0xe000ed00

00002dec <os_cputime_init>:
 *
 * @return int 0 on success; -1 on error.
 */
int
os_cputime_init(uint32_t clock_freq)
{
    2dec:	b510      	push	{r4, lr}
    2dee:	0001      	movs	r1, r0

    /* Set the ticks per microsecond. */
#if !defined(OS_CPUTIME_FREQ_32768) && !defined(OS_CPUTIME_FREQ_1MHZ)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    2df0:	2000      	movs	r0, #0
    2df2:	f7fe fde7 	bl	19c4 <hal_timer_config>
    return rc;
}
    2df6:	bd10      	pop	{r4, pc}

00002df8 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    2df8:	b510      	push	{r4, lr}
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    2dfa:	6903      	ldr	r3, [r0, #16]
    2dfc:	6941      	ldr	r1, [r0, #20]
{
    2dfe:	0004      	movs	r4, r0
    rc = dev->od_init(dev, dev->od_init_arg);
    2e00:	4798      	blx	r3
    2e02:	7ee3      	ldrb	r3, [r4, #27]
    if (rc != 0) {
    2e04:	2800      	cmp	r0, #0
    2e06:	d003      	beq.n	2e10 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    2e08:	071b      	lsls	r3, r3, #28
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    2e0a:	17db      	asrs	r3, r3, #31
    2e0c:	4018      	ands	r0, r3
err:
    return rc;
}
    2e0e:	bd10      	pop	{r4, pc}
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    2e10:	2201      	movs	r2, #1
    2e12:	4313      	orrs	r3, r2
    2e14:	76e3      	strb	r3, [r4, #27]
    2e16:	e7fa      	b.n	2e0e <os_dev_initialize+0x16>

00002e18 <os_dev_create>:
 * @return 0 on success, non-zero on failure.
 */
int
os_dev_create(struct os_dev *dev, char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    2e18:	b570      	push	{r4, r5, r6, lr}
    2e1a:	0004      	movs	r4, r0
    dev->od_name = name;
    2e1c:	61c1      	str	r1, [r0, #28]
    dev->od_open_ref = 0;
    2e1e:	2100      	movs	r1, #0
    dev->od_priority = priority;
    2e20:	7663      	strb	r3, [r4, #25]
{
    2e22:	001e      	movs	r6, r3
    dev->od_init = od_init;
    2e24:	9b04      	ldr	r3, [sp, #16]
    dev->od_stage = stage;
    2e26:	7622      	strb	r2, [r4, #24]
    dev->od_init = od_init;
    2e28:	6103      	str	r3, [r0, #16]
    dev->od_init_arg = arg;
    2e2a:	9b05      	ldr	r3, [sp, #20]
{
    2e2c:	0015      	movs	r5, r2
    dev->od_init_arg = arg;
    2e2e:	6143      	str	r3, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    2e30:	2210      	movs	r2, #16
    dev->od_open_ref = 0;
    2e32:	8341      	strh	r1, [r0, #26]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    2e34:	f000 f99e 	bl	3174 <memset>
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    2e38:	4a14      	ldr	r2, [pc, #80]	; (2e8c <os_dev_create+0x74>)
    2e3a:	6813      	ldr	r3, [r2, #0]
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	d10c      	bne.n	2e5a <os_dev_create+0x42>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    2e40:	6223      	str	r3, [r4, #32]
    2e42:	0023      	movs	r3, r4
    2e44:	3320      	adds	r3, #32
    2e46:	6053      	str	r3, [r2, #4]
    2e48:	6014      	str	r4, [r2, #0]
    rc = os_dev_add(dev);
    if (rc != 0) {
        goto err;
    }

    if (g_os_started) {
    2e4a:	4b11      	ldr	r3, [pc, #68]	; (2e90 <os_dev_create+0x78>)
    2e4c:	6818      	ldr	r0, [r3, #0]
    2e4e:	2800      	cmp	r0, #0
    2e50:	d002      	beq.n	2e58 <os_dev_create+0x40>
        rc = os_dev_initialize(dev);
    2e52:	0020      	movs	r0, r4
    2e54:	f7ff ffd0 	bl	2df8 <os_dev_initialize>
    }
err:
    return (rc);
}
    2e58:	bd70      	pop	{r4, r5, r6, pc}
        if (cur_dev->od_stage > dev->od_stage) {
    2e5a:	7e18      	ldrb	r0, [r3, #24]
    2e5c:	6a19      	ldr	r1, [r3, #32]
    2e5e:	42a8      	cmp	r0, r5
    2e60:	d802      	bhi.n	2e68 <os_dev_create+0x50>
        if (dev->od_priority >= cur_dev->od_priority) {
    2e62:	7e58      	ldrb	r0, [r3, #25]
    2e64:	42b0      	cmp	r0, r6
    2e66:	d908      	bls.n	2e7a <os_dev_create+0x62>
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    2e68:	1e0b      	subs	r3, r1, #0
    2e6a:	d1f6      	bne.n	2e5a <os_dev_create+0x42>
        STAILQ_INSERT_TAIL(&g_os_dev_list, dev, od_next);
    2e6c:	6853      	ldr	r3, [r2, #4]
    2e6e:	6221      	str	r1, [r4, #32]
    2e70:	601c      	str	r4, [r3, #0]
    2e72:	0023      	movs	r3, r4
    2e74:	3320      	adds	r3, #32
    2e76:	6053      	str	r3, [r2, #4]
    2e78:	e7e7      	b.n	2e4a <os_dev_create+0x32>
        STAILQ_INSERT_AFTER(&g_os_dev_list, cur_dev, dev, od_next);
    2e7a:	6221      	str	r1, [r4, #32]
    2e7c:	2900      	cmp	r1, #0
    2e7e:	d102      	bne.n	2e86 <os_dev_create+0x6e>
    2e80:	0021      	movs	r1, r4
    2e82:	3120      	adds	r1, #32
    2e84:	6051      	str	r1, [r2, #4]
    2e86:	621c      	str	r4, [r3, #32]
    2e88:	e7df      	b.n	2e4a <os_dev_create+0x32>
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	20001310 	.word	0x20001310
    2e90:	20001528 	.word	0x20001528

00002e94 <os_malloc>:
 *
 * @return A pointer to the memory region allocated.
 */
void *
os_malloc(size_t size)
{
    2e94:	b510      	push	{r4, lr}
    void *ptr;

    os_malloc_lock();
    ptr = malloc(size);
    2e96:	f000 f8f7 	bl	3088 <malloc>
    os_malloc_unlock();

    return ptr;
}
    2e9a:	bd10      	pop	{r4, pc}

00002e9c <os_free>:
 *
 * @param mem The memory to free.
 */
void
os_free(void *mem)
{
    2e9c:	b510      	push	{r4, lr}
    os_malloc_lock();
    free(mem);
    2e9e:	f000 f93f 	bl	3120 <free>
    os_malloc_unlock();
}
    2ea2:	bd10      	pop	{r4, pc}

00002ea4 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    2ea4:	b510      	push	{r4, lr}
    os_time_advance(1);
    2ea6:	2001      	movs	r0, #1
    2ea8:	f000 f808 	bl	2ebc <os_time_advance>
}
    2eac:	bd10      	pop	{r4, pc}

00002eae <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2eae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    2eb2:	b672      	cpsid	i
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
    2eb4:	2301      	movs	r3, #1
    2eb6:	4018      	ands	r0, r3
}
    2eb8:	4770      	bx	lr
	...

00002ebc <os_time_advance>:
}
#else
void
os_time_advance(int ticks)
{
    g_os_time += ticks;
    2ebc:	4b02      	ldr	r3, [pc, #8]	; (2ec8 <os_time_advance+0xc>)
    2ebe:	681a      	ldr	r2, [r3, #0]
    2ec0:	1810      	adds	r0, r2, r0
    2ec2:	6018      	str	r0, [r3, #0]
}
    2ec4:	4770      	bx	lr
    2ec6:	46c0      	nop			; (mov r8, r8)
    2ec8:	20001534 	.word	0x20001534

00002ecc <os_set_env>:
    2ecc:	f380 8809 	msr	PSP, r0
    2ed0:	4838      	ldr	r0, [pc, #224]	; (2fb4 <using_msp_as_sp+0x22>)
    2ed2:	7800      	ldrb	r0, [r0, #0]
    2ed4:	3002      	adds	r0, #2
    2ed6:	f380 8814 	msr	CONTROL, r0
    2eda:	f3bf 8f6f 	isb	sy
    2ede:	4770      	bx	lr

00002ee0 <os_arch_init_task_stack>:
    2ee0:	4603      	mov	r3, r0
    2ee2:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2ee4:	4644      	mov	r4, r8
    2ee6:	464d      	mov	r5, r9
    2ee8:	4656      	mov	r6, sl
    2eea:	465f      	mov	r7, fp
    2eec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2eee:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    2ef0:	4770      	bx	lr

00002ef2 <SVC_Handler>:
    2ef2:	f3ef 8009 	mrs	r0, PSP
    2ef6:	6981      	ldr	r1, [r0, #24]
    2ef8:	3902      	subs	r1, #2
    2efa:	7809      	ldrb	r1, [r1, #0]
    2efc:	2900      	cmp	r1, #0
    2efe:	d108      	bne.n	2f12 <SVC_User>
    2f00:	6901      	ldr	r1, [r0, #16]
    2f02:	468c      	mov	ip, r1
    2f04:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    2f06:	b500      	push	{lr}
    2f08:	47e0      	blx	ip
    2f0a:	f3ef 8309 	mrs	r3, PSP
    2f0e:	c307      	stmia	r3!, {r0, r1, r2}
    2f10:	bd00      	pop	{pc}

00002f12 <SVC_User>:
    2f12:	b510      	push	{r4, lr}
    2f14:	4a28      	ldr	r2, [pc, #160]	; (2fb8 <using_msp_as_sp+0x26>)
    2f16:	6812      	ldr	r2, [r2, #0]
    2f18:	4291      	cmp	r1, r2
    2f1a:	d809      	bhi.n	2f30 <SVC_Done>
    2f1c:	4c27      	ldr	r4, [pc, #156]	; (2fbc <using_msp_as_sp+0x2a>)
    2f1e:	0089      	lsls	r1, r1, #2
    2f20:	5864      	ldr	r4, [r4, r1]
    2f22:	46a6      	mov	lr, r4
    2f24:	c81f      	ldmia	r0, {r0, r1, r2, r3, r4}
    2f26:	46a4      	mov	ip, r4
    2f28:	47f0      	blx	lr
    2f2a:	f3ef 8409 	mrs	r4, PSP
    2f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}

00002f30 <SVC_Done>:
    2f30:	bd10      	pop	{r4, pc}

00002f32 <PendSV_Handler>:
    2f32:	4b23      	ldr	r3, [pc, #140]	; (2fc0 <using_msp_as_sp+0x2e>)
    2f34:	681a      	ldr	r2, [r3, #0]
    2f36:	4b23      	ldr	r3, [pc, #140]	; (2fc4 <using_msp_as_sp+0x32>)
    2f38:	6819      	ldr	r1, [r3, #0]
    2f3a:	4291      	cmp	r1, r2
    2f3c:	d100      	bne.n	2f40 <context_switch>
    2f3e:	4770      	bx	lr

00002f40 <context_switch>:
    2f40:	f3ef 8009 	mrs	r0, PSP
    2f44:	3820      	subs	r0, #32
    2f46:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2f48:	4644      	mov	r4, r8
    2f4a:	464d      	mov	r5, r9
    2f4c:	4656      	mov	r6, sl
    2f4e:	465f      	mov	r7, fp
    2f50:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2f52:	3820      	subs	r0, #32
    2f54:	6008      	str	r0, [r1, #0]
    2f56:	601a      	str	r2, [r3, #0]
    2f58:	6810      	ldr	r0, [r2, #0]
    2f5a:	3010      	adds	r0, #16
    2f5c:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2f5e:	46a0      	mov	r8, r4
    2f60:	46a9      	mov	r9, r5
    2f62:	46b2      	mov	sl, r6
    2f64:	46bb      	mov	fp, r7
    2f66:	f380 8809 	msr	PSP, r0
    2f6a:	3820      	subs	r0, #32
    2f6c:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2f6e:	4770      	bx	lr

00002f70 <SysTick_Handler>:
    2f70:	b510      	push	{r4, lr}
    2f72:	f7ff ff97 	bl	2ea4 <timer_handler>
    2f76:	bd10      	pop	{r4, pc}

00002f78 <__aeabi_idiv0>:
    2f78:	b423      	push	{r0, r1, r5}
    2f7a:	4813      	ldr	r0, [pc, #76]	; (2fc8 <using_msp_as_sp+0x36>)
    2f7c:	21d5      	movs	r1, #213	; 0xd5
    2f7e:	4d13      	ldr	r5, [pc, #76]	; (2fcc <using_msp_as_sp+0x3a>)
    2f80:	4728      	bx	r5

00002f82 <os_default_irq_asm>:
    2f82:	4670      	mov	r0, lr
    2f84:	2104      	movs	r1, #4
    2f86:	4208      	tst	r0, r1
    2f88:	f3ef 8c08 	mrs	ip, MSP
    2f8c:	d001      	beq.n	2f92 <using_msp_as_sp>
    2f8e:	f3ef 8c09 	mrs	ip, PSP

00002f92 <using_msp_as_sp>:
    2f92:	4640      	mov	r0, r8
    2f94:	4649      	mov	r1, r9
    2f96:	4652      	mov	r2, sl
    2f98:	465b      	mov	r3, fp
    2f9a:	b50f      	push	{r0, r1, r2, r3, lr}
    2f9c:	4663      	mov	r3, ip
    2f9e:	b4f8      	push	{r3, r4, r5, r6, r7}
    2fa0:	4668      	mov	r0, sp
    2fa2:	f7ff ff1b 	bl	2ddc <os_default_irq>
    2fa6:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2fa8:	bc0f      	pop	{r0, r1, r2, r3}
    2faa:	4680      	mov	r8, r0
    2fac:	4689      	mov	r9, r1
    2fae:	4692      	mov	sl, r2
    2fb0:	469b      	mov	fp, r3
    2fb2:	bd00      	pop	{pc}
    2fb4:	20001318 	.word	0x20001318
    2fb8:	00000000 	.word	0x00000000
    2fbc:	fffffffc 	.word	0xfffffffc
    2fc0:	200000cc 	.word	0x200000cc
    2fc4:	2000152c 	.word	0x2000152c
    2fc8:	00003a44 	.word	0x00003a44
    2fcc:	00002dbd 	.word	0x00002dbd

00002fd0 <malloc_lock_nop>:
	},
	&__malloc_head,
	&__malloc_head
};

static bool malloc_lock_nop() {return true;}
    2fd0:	2001      	movs	r0, #1
    2fd2:	4770      	bx	lr

00002fd4 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
    2fd4:	4770      	bx	lr
	...

00002fd8 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
	struct free_arena_header *pah, *nah;

	pah = ah->a.prev;
    2fd8:	68c3      	ldr	r3, [r0, #12]
{
    2fda:	b510      	push	{r4, lr}
	nah = ah->a.next;
	if (pah->a.type == ARENA_TYPE_FREE &&
    2fdc:	6819      	ldr	r1, [r3, #0]
	nah = ah->a.next;
    2fde:	6882      	ldr	r2, [r0, #8]
	if (pah->a.type == ARENA_TYPE_FREE &&
    2fe0:	2901      	cmp	r1, #1
    2fe2:	d11c      	bne.n	301e <__free_block+0x46>
	    (char *)pah + pah->a.size == (char *)ah) {
    2fe4:	685c      	ldr	r4, [r3, #4]
    2fe6:	1919      	adds	r1, r3, r4
	if (pah->a.type == ARENA_TYPE_FREE &&
    2fe8:	4288      	cmp	r0, r1
    2fea:	d118      	bne.n	301e <__free_block+0x46>
		/* Coalesce into the previous block */
		pah->a.size += ah->a.size;
    2fec:	6841      	ldr	r1, [r0, #4]
		pah->a.next = nah;
    2fee:	609a      	str	r2, [r3, #8]
		pah->a.size += ah->a.size;
    2ff0:	1909      	adds	r1, r1, r4
    2ff2:	6059      	str	r1, [r3, #4]
		nah->a.prev = pah;
    2ff4:	60d3      	str	r3, [r2, #12]
		ah->next_free->prev_free = ah;
	}

	/* In either of the previous cases, we might be able to merge
	   with the subsequent block... */
	if (nah->a.type == ARENA_TYPE_FREE &&
    2ff6:	6811      	ldr	r1, [r2, #0]
    2ff8:	2901      	cmp	r1, #1
    2ffa:	d10e      	bne.n	301a <__free_block+0x42>
	    (char *)ah + ah->a.size == (char *)nah) {
    2ffc:	6859      	ldr	r1, [r3, #4]
    2ffe:	1858      	adds	r0, r3, r1
	if (nah->a.type == ARENA_TYPE_FREE &&
    3000:	4282      	cmp	r2, r0
    3002:	d10a      	bne.n	301a <__free_block+0x42>
		ah->a.size += nah->a.size;
    3004:	6850      	ldr	r0, [r2, #4]
    3006:	1841      	adds	r1, r0, r1
    3008:	6059      	str	r1, [r3, #4]
	ap = ah->prev_free;
    300a:	6950      	ldr	r0, [r2, #20]
	an = ah->next_free;
    300c:	6911      	ldr	r1, [r2, #16]
	ap->next_free = an;
    300e:	6101      	str	r1, [r0, #16]
	an->prev_free = ap;
    3010:	6148      	str	r0, [r1, #20]
	ap = ah->a.prev;
    3012:	68d1      	ldr	r1, [r2, #12]
	an = ah->a.next;
    3014:	6892      	ldr	r2, [r2, #8]
	ap->a.next = an;
    3016:	608a      	str	r2, [r1, #8]
	an->a.prev = ap;
    3018:	60d1      	str	r1, [r2, #12]
		remove_from_chains(nah);
	}

	/* Return the block that contains the called block */
	return ah;
}
    301a:	0018      	movs	r0, r3
    301c:	bd10      	pop	{r4, pc}
		ah->a.type = ARENA_TYPE_FREE;
    301e:	2301      	movs	r3, #1
    3020:	6003      	str	r3, [r0, #0]
		ah->next_free = __malloc_head.next_free;
    3022:	4b04      	ldr	r3, [pc, #16]	; (3034 <__free_block+0x5c>)
    3024:	6919      	ldr	r1, [r3, #16]
		ah->prev_free = &__malloc_head;
    3026:	6143      	str	r3, [r0, #20]
		ah->next_free = __malloc_head.next_free;
    3028:	6101      	str	r1, [r0, #16]
		__malloc_head.next_free = ah;
    302a:	6118      	str	r0, [r3, #16]
		ah->next_free->prev_free = ah;
    302c:	6903      	ldr	r3, [r0, #16]
    302e:	6158      	str	r0, [r3, #20]
    3030:	0003      	movs	r3, r0
    3032:	e7e0      	b.n	2ff6 <__free_block+0x1e>
    3034:	200000d4 	.word	0x200000d4

00003038 <add_malloc_block>:
	return result;
}

/* Call this to give malloc some memory to allocate from */
void add_malloc_block(void *buf, size_t size)
{
    3038:	b510      	push	{r4, lr}
    303a:	0004      	movs	r4, r0
	struct free_arena_header *fp = buf;
	struct free_arena_header *pah;

	if (size < sizeof(struct free_arena_header))
    303c:	2917      	cmp	r1, #23
    303e:	d908      	bls.n	3052 <add_malloc_block+0x1a>
		return; // Too small.

	/* Insert the block into the management chains.  We need to set
	   up the size and the main block list pointer, the rest of
	   the work is logically identical to free(). */
	fp->a.type = ARENA_TYPE_FREE;
    3040:	2301      	movs	r3, #1
    3042:	6003      	str	r3, [r0, #0]
	fp->a.size = size;

        if (!malloc_lock())
    3044:	4b0d      	ldr	r3, [pc, #52]	; (307c <add_malloc_block+0x44>)
	fp->a.size = size;
    3046:	6041      	str	r1, [r0, #4]
        if (!malloc_lock())
    3048:	681b      	ldr	r3, [r3, #0]
    304a:	4798      	blx	r3

	/* We need to insert this into the main block list in the proper
	   place -- this list is required to be sorted.  Since we most likely
	   get memory assignments in ascending order, search backwards for
	   the proper place. */
	for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
    304c:	4b0c      	ldr	r3, [pc, #48]	; (3080 <add_malloc_block+0x48>)
        if (!malloc_lock())
    304e:	2800      	cmp	r0, #0
    3050:	d100      	bne.n	3054 <add_malloc_block+0x1c>

	/* Insert into the free chain and coalesce with adjacent blocks */
	fp = __free_block(fp);

        malloc_unlock();
}
    3052:	bd10      	pop	{r4, pc}
	     pah = pah->a.prev) {
    3054:	68db      	ldr	r3, [r3, #12]
	for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
    3056:	681a      	ldr	r2, [r3, #0]
    3058:	2a02      	cmp	r2, #2
    305a:	d001      	beq.n	3060 <add_malloc_block+0x28>
		if (pah < fp)
    305c:	429c      	cmp	r4, r3
    305e:	d9f9      	bls.n	3054 <add_malloc_block+0x1c>
	fp->a.next = pah->a.next;
    3060:	689a      	ldr	r2, [r3, #8]
	fp->a.prev = pah;
    3062:	60e3      	str	r3, [r4, #12]
	fp->a.next = pah->a.next;
    3064:	60a2      	str	r2, [r4, #8]
	pah->a.next = fp;
    3066:	609c      	str	r4, [r3, #8]
	fp->a.next->a.prev = fp;
    3068:	68a3      	ldr	r3, [r4, #8]
	fp = __free_block(fp);
    306a:	0020      	movs	r0, r4
	fp->a.next->a.prev = fp;
    306c:	60dc      	str	r4, [r3, #12]
	fp = __free_block(fp);
    306e:	f7ff ffb3 	bl	2fd8 <__free_block>
        malloc_unlock();
    3072:	4b04      	ldr	r3, [pc, #16]	; (3084 <add_malloc_block+0x4c>)
    3074:	681b      	ldr	r3, [r3, #0]
    3076:	4798      	blx	r3
    3078:	e7eb      	b.n	3052 <add_malloc_block+0x1a>
    307a:	46c0      	nop			; (mov r8, r8)
    307c:	200000ec 	.word	0x200000ec
    3080:	200000d4 	.word	0x200000d4
    3084:	200000f0 	.word	0x200000f0

00003088 <malloc>:
{
    3088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (size == 0)
    308a:	2800      	cmp	r0, #0
    308c:	d102      	bne.n	3094 <malloc+0xc>
		return NULL;
    308e:	2400      	movs	r4, #0
}
    3090:	0020      	movs	r0, r4
    3092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
    3094:	230f      	movs	r3, #15
    3096:	301f      	adds	r0, #31
    3098:	4398      	bics	r0, r3
        if (!malloc_lock())
    309a:	4b1e      	ldr	r3, [pc, #120]	; (3114 <malloc+0x8c>)
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
    309c:	0004      	movs	r4, r0
        if (!malloc_lock())
    309e:	681b      	ldr	r3, [r3, #0]
    30a0:	4798      	blx	r3
    30a2:	2800      	cmp	r0, #0
    30a4:	d0f3      	beq.n	308e <malloc+0x6>
	for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
    30a6:	4b1c      	ldr	r3, [pc, #112]	; (3118 <malloc+0x90>)
    30a8:	691b      	ldr	r3, [r3, #16]
    30aa:	681a      	ldr	r2, [r3, #0]
    30ac:	2a02      	cmp	r2, #2
    30ae:	d106      	bne.n	30be <malloc+0x36>
            more_mem = _sbrk(size);
    30b0:	0020      	movs	r0, r4
    30b2:	f000 fa01 	bl	34b8 <_sbrk>
            if (more_mem != (void *)-1) {
    30b6:	1c43      	adds	r3, r0, #1
    30b8:	d128      	bne.n	310c <malloc+0x84>
    30ba:	2400      	movs	r4, #0
    30bc:	e01b      	b.n	30f6 <malloc+0x6e>
		if (fp->a.size >= size) {
    30be:	6858      	ldr	r0, [r3, #4]
    30c0:	6919      	ldr	r1, [r3, #16]
    30c2:	42a0      	cmp	r0, r4
    30c4:	d320      	bcc.n	3108 <malloc+0x80>
	if (fsize >= size + 2 * sizeof(struct arena_header)) {
    30c6:	0022      	movs	r2, r4
    30c8:	3220      	adds	r2, #32
    30ca:	695d      	ldr	r5, [r3, #20]
    30cc:	4290      	cmp	r0, r2
    30ce:	d316      	bcc.n	30fe <malloc+0x76>
		nfp = (struct free_arena_header *)((char *)fp + size);
    30d0:	191a      	adds	r2, r3, r4
		nfp->a.size = fsize - size;
    30d2:	1b00      	subs	r0, r0, r4
		na = fp->a.next;
    30d4:	689e      	ldr	r6, [r3, #8]
		nfp->a.type = ARENA_TYPE_FREE;
    30d6:	2701      	movs	r7, #1
		nfp->a.size = fsize - size;
    30d8:	6050      	str	r0, [r2, #4]
		fp->a.type = ARENA_TYPE_USED;
    30da:	2000      	movs	r0, #0
		nfp->a.type = ARENA_TYPE_FREE;
    30dc:	6017      	str	r7, [r2, #0]
		fp->a.type = ARENA_TYPE_USED;
    30de:	6018      	str	r0, [r3, #0]
		fp->a.size = size;
    30e0:	605c      	str	r4, [r3, #4]
		nfp->a.prev = fp;
    30e2:	60d3      	str	r3, [r2, #12]
		nfp->a.next = na;
    30e4:	6096      	str	r6, [r2, #8]
		na->a.prev = nfp;
    30e6:	60f2      	str	r2, [r6, #12]
		fp->a.next = nfp;
    30e8:	609a      	str	r2, [r3, #8]
		nfp->next_free = fpn = fp->next_free;
    30ea:	6111      	str	r1, [r2, #16]
		nfp->prev_free = fpp = fp->prev_free;
    30ec:	6155      	str	r5, [r2, #20]
		fpn->prev_free = nfp;
    30ee:	614a      	str	r2, [r1, #20]
		fpp->next_free = nfp;
    30f0:	612a      	str	r2, [r5, #16]
	return (void *)(&fp->a + 1);
    30f2:	3310      	adds	r3, #16
    30f4:	001c      	movs	r4, r3
        malloc_unlock();
    30f6:	4b09      	ldr	r3, [pc, #36]	; (311c <malloc+0x94>)
    30f8:	681b      	ldr	r3, [r3, #0]
    30fa:	4798      	blx	r3
	return result;
    30fc:	e7c8      	b.n	3090 <malloc+0x8>
		fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
    30fe:	2200      	movs	r2, #0
    3100:	601a      	str	r2, [r3, #0]
	ap->next_free = an;
    3102:	6129      	str	r1, [r5, #16]
	an->prev_free = ap;
    3104:	614d      	str	r5, [r1, #20]
    3106:	e7f4      	b.n	30f2 <malloc+0x6a>
    3108:	000b      	movs	r3, r1
    310a:	e7ce      	b.n	30aa <malloc+0x22>
                add_malloc_block(more_mem, size);
    310c:	0021      	movs	r1, r4
    310e:	f7ff ff93 	bl	3038 <add_malloc_block>
                goto retry_alloc;
    3112:	e7c8      	b.n	30a6 <malloc+0x1e>
    3114:	200000ec 	.word	0x200000ec
    3118:	200000d4 	.word	0x200000d4
    311c:	200000f0 	.word	0x200000f0

00003120 <free>:

void free(void *ptr)
{
    3120:	b510      	push	{r4, lr}
    3122:	1e04      	subs	r4, r0, #0
	struct free_arena_header *ah;

	if (!ptr)
    3124:	d00b      	beq.n	313e <free+0x1e>

#ifdef DEBUG_MALLOC
	assert(ah->a.type == ARENA_TYPE_USED);
#endif

        if (!malloc_lock())
    3126:	4b06      	ldr	r3, [pc, #24]	; (3140 <free+0x20>)
    3128:	681b      	ldr	r3, [r3, #0]
    312a:	4798      	blx	r3
    312c:	2800      	cmp	r0, #0
    312e:	d006      	beq.n	313e <free+0x1e>
	ah = (struct free_arena_header *)
    3130:	0020      	movs	r0, r4
    3132:	3810      	subs	r0, #16
            return;

	/* Merge into adjacent free blocks */
	ah = __free_block(ah);
    3134:	f7ff ff50 	bl	2fd8 <__free_block>
        malloc_unlock();
    3138:	4b02      	ldr	r3, [pc, #8]	; (3144 <free+0x24>)
    313a:	681b      	ldr	r3, [r3, #0]
    313c:	4798      	blx	r3
}
    313e:	bd10      	pop	{r4, pc}
    3140:	200000ec 	.word	0x200000ec
    3144:	200000f0 	.word	0x200000f0

00003148 <memcmp>:
 */

#include <string.h>

int memcmp(const void *s1, const void *s2, size_t n)
{
    3148:	b530      	push	{r4, r5, lr}
	const unsigned char *c1 = s1, *c2 = s2;
	int d = 0;

	while (n--) {
    314a:	2400      	movs	r4, #0
    314c:	4294      	cmp	r4, r2
    314e:	d101      	bne.n	3154 <memcmp+0xc>
    3150:	2300      	movs	r3, #0
		d = (int)*c1++ - (int)*c2++;
		if (d)
			break;
	}

	return d;
    3152:	e004      	b.n	315e <memcmp+0x16>
		d = (int)*c1++ - (int)*c2++;
    3154:	5d03      	ldrb	r3, [r0, r4]
    3156:	5d0d      	ldrb	r5, [r1, r4]
    3158:	3401      	adds	r4, #1
    315a:	1b5b      	subs	r3, r3, r5
		if (d)
    315c:	d0f6      	beq.n	314c <memcmp+0x4>
}
    315e:	0018      	movs	r0, r3
    3160:	bd30      	pop	{r4, r5, pc}

00003162 <memcpy>:
	size_t nq = n >> 3;
	asm volatile ("cld ; rep ; movsq ; movl %3,%%ecx ; rep ; movsb":"+c"
		      (nq), "+S"(p), "+D"(q)
		      :"r"((uint32_t) (n & 7)));
#else
	while (n--) {
    3162:	2300      	movs	r3, #0
{
    3164:	b510      	push	{r4, lr}
	while (n--) {
    3166:	429a      	cmp	r2, r3
    3168:	d100      	bne.n	316c <memcpy+0xa>
		*q++ = *p++;
	}
#endif

	return dst;
}
    316a:	bd10      	pop	{r4, pc}
		*q++ = *p++;
    316c:	5ccc      	ldrb	r4, [r1, r3]
    316e:	54c4      	strb	r4, [r0, r3]
    3170:	3301      	adds	r3, #1
    3172:	e7f8      	b.n	3166 <memcpy+0x4>

00003174 <memset>:

#include <string.h>
#include <stdint.h>

void *memset(void *dst, int c, size_t n)
{
    3174:	0003      	movs	r3, r0
    3176:	1812      	adds	r2, r2, r0
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#else
	while (n--) {
    3178:	4293      	cmp	r3, r2
    317a:	d100      	bne.n	317e <memset+0xa>
		*q++ = c;
	}
#endif

	return dst;
}
    317c:	4770      	bx	lr
		*q++ = c;
    317e:	7019      	strb	r1, [r3, #0]
    3180:	3301      	adds	r3, #1
    3182:	e7f9      	b.n	3178 <memset+0x4>

00003184 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    3184:	0003      	movs	r3, r0
	while (*ss)
    3186:	781a      	ldrb	r2, [r3, #0]
    3188:	2a00      	cmp	r2, #0
    318a:	d101      	bne.n	3190 <strlen+0xc>
		ss++;
	return ss - s;
    318c:	1a18      	subs	r0, r3, r0
}
    318e:	4770      	bx	lr
		ss++;
    3190:	3301      	adds	r3, #1
    3192:	e7f8      	b.n	3186 <strlen+0x2>

00003194 <flash_area_open>:
flash_area_open(uint8_t id, const struct flash_area **fap)
{
    const struct flash_area *area;
    int i;

    if (flash_map == NULL) {
    3194:	4b0d      	ldr	r3, [pc, #52]	; (31cc <flash_area_open+0x38>)
{
    3196:	b570      	push	{r4, r5, r6, lr}
    if (flash_map == NULL) {
    3198:	681b      	ldr	r3, [r3, #0]
    319a:	2b00      	cmp	r3, #0
    319c:	d013      	beq.n	31c6 <flash_area_open+0x32>
        return SYS_EACCES;
    }

    for (i = 0; i < flash_map_entries; i++) {
    319e:	4a0c      	ldr	r2, [pc, #48]	; (31d0 <flash_area_open+0x3c>)
    31a0:	6814      	ldr	r4, [r2, #0]
    31a2:	2200      	movs	r2, #0
    31a4:	4294      	cmp	r4, r2
    31a6:	dc02      	bgt.n	31ae <flash_area_open+0x1a>
            *fap = area;
            return 0;
        }
    }

    return SYS_ENOENT;
    31a8:	2004      	movs	r0, #4
        return SYS_EACCES;
    31aa:	4240      	negs	r0, r0
    31ac:	e008      	b.n	31c0 <flash_area_open+0x2c>
        area = flash_map + i;
    31ae:	001d      	movs	r5, r3
    31b0:	330c      	adds	r3, #12
        if (area->fa_id == id) {
    31b2:	001e      	movs	r6, r3
    31b4:	3e0c      	subs	r6, #12
    31b6:	7836      	ldrb	r6, [r6, #0]
    31b8:	4286      	cmp	r6, r0
    31ba:	d102      	bne.n	31c2 <flash_area_open+0x2e>
            return 0;
    31bc:	2000      	movs	r0, #0
            *fap = area;
    31be:	600d      	str	r5, [r1, #0]
}
    31c0:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < flash_map_entries; i++) {
    31c2:	3201      	adds	r2, #1
    31c4:	e7ee      	b.n	31a4 <flash_area_open+0x10>
        return SYS_EACCES;
    31c6:	2007      	movs	r0, #7
    31c8:	e7ef      	b.n	31aa <flash_area_open+0x16>
    31ca:	46c0      	nop			; (mov r8, r8)
    31cc:	20001538 	.word	0x20001538
    31d0:	2000153c 	.word	0x2000153c

000031d4 <flash_area_close>:

void
flash_area_close(const struct flash_area *fa)
{
    /* nothing to do for now */
}
    31d4:	4770      	bx	lr

000031d6 <flash_area_to_sectors>:

int
flash_area_to_sectors(int id, int *cnt, struct flash_area *ret)
{
    31d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t start;
    uint32_t size;
    int rc;
    int i;

    rc = flash_area_open(id, &fa);
    31d8:	b2c3      	uxtb	r3, r0
{
    31da:	b089      	sub	sp, #36	; 0x24
    31dc:	000e      	movs	r6, r1
    rc = flash_area_open(id, &fa);
    31de:	0018      	movs	r0, r3
    31e0:	a905      	add	r1, sp, #20
{
    31e2:	0014      	movs	r4, r2
    rc = flash_area_open(id, &fa);
    31e4:	9303      	str	r3, [sp, #12]
    31e6:	f7ff ffd5 	bl	3194 <flash_area_open>
    31ea:	1e07      	subs	r7, r0, #0
    if (rc != 0) {
    31ec:	d10b      	bne.n	3206 <flash_area_to_sectors+0x30>
        return rc;
    }

    *cnt = 0;

    hf = hal_bsp_flash_dev(fa->fa_device_id);
    31ee:	9b05      	ldr	r3, [sp, #20]
    *cnt = 0;
    31f0:	6030      	str	r0, [r6, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    31f2:	7858      	ldrb	r0, [r3, #1]
    31f4:	f7fe f84c 	bl	1290 <hal_bsp_flash_dev>
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    31f8:	9701      	str	r7, [sp, #4]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    31fa:	9002      	str	r0, [sp, #8]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    31fc:	9b02      	ldr	r3, [sp, #8]
    31fe:	9a01      	ldr	r2, [sp, #4]
    3200:	68db      	ldr	r3, [r3, #12]
    3202:	4293      	cmp	r3, r2
    3204:	dc02      	bgt.n	320c <flash_area_to_sectors+0x36>
            }
            (*cnt)++;
        }
    }
    return 0;
}
    3206:	0038      	movs	r0, r7
    3208:	b009      	add	sp, #36	; 0x24
    320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    320c:	9b02      	ldr	r3, [sp, #8]
    320e:	aa06      	add	r2, sp, #24
    3210:	681b      	ldr	r3, [r3, #0]
    3212:	9901      	ldr	r1, [sp, #4]
    3214:	68db      	ldr	r3, [r3, #12]
    3216:	9802      	ldr	r0, [sp, #8]
    3218:	001d      	movs	r5, r3
    321a:	ab07      	add	r3, sp, #28
    321c:	47a8      	blx	r5
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
    321e:	9905      	ldr	r1, [sp, #20]
    3220:	9a06      	ldr	r2, [sp, #24]
    3222:	684b      	ldr	r3, [r1, #4]
    3224:	4293      	cmp	r3, r2
    3226:	d811      	bhi.n	324c <flash_area_to_sectors+0x76>
    3228:	6888      	ldr	r0, [r1, #8]
    322a:	181b      	adds	r3, r3, r0
    322c:	429a      	cmp	r2, r3
    322e:	d20d      	bcs.n	324c <flash_area_to_sectors+0x76>
            if (ret) {
    3230:	2c00      	cmp	r4, #0
    3232:	d008      	beq.n	3246 <flash_area_to_sectors+0x70>
                ret->fa_id = id;
    3234:	466b      	mov	r3, sp
    3236:	7b1b      	ldrb	r3, [r3, #12]
    3238:	7023      	strb	r3, [r4, #0]
                ret->fa_device_id = fa->fa_device_id;
    323a:	784b      	ldrb	r3, [r1, #1]
                ret->fa_off = start;
    323c:	6062      	str	r2, [r4, #4]
                ret->fa_device_id = fa->fa_device_id;
    323e:	7063      	strb	r3, [r4, #1]
                ret->fa_size = size;
    3240:	9b07      	ldr	r3, [sp, #28]
    3242:	60a3      	str	r3, [r4, #8]
                ret++;
    3244:	340c      	adds	r4, #12
            (*cnt)++;
    3246:	6833      	ldr	r3, [r6, #0]
    3248:	3301      	adds	r3, #1
    324a:	6033      	str	r3, [r6, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    324c:	9b01      	ldr	r3, [sp, #4]
    324e:	3301      	adds	r3, #1
    3250:	9301      	str	r3, [sp, #4]
    3252:	e7d3      	b.n	31fc <flash_area_to_sectors+0x26>

00003254 <flash_area_read>:

int
flash_area_read(const struct flash_area *fa, uint32_t off, void *dst,
    uint32_t len)
{
    3254:	b570      	push	{r4, r5, r6, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    3256:	6884      	ldr	r4, [r0, #8]
    3258:	428c      	cmp	r4, r1
    325a:	d308      	bcc.n	326e <flash_area_read+0x1a>
    325c:	18cd      	adds	r5, r1, r3
    325e:	42ac      	cmp	r4, r5
    3260:	d305      	bcc.n	326e <flash_area_read+0x1a>
        return -1;
    }
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    3262:	6844      	ldr	r4, [r0, #4]
    3264:	7840      	ldrb	r0, [r0, #1]
    3266:	1909      	adds	r1, r1, r4
    3268:	f7fe f91f 	bl	14aa <hal_flash_read>
}
    326c:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
    326e:	2001      	movs	r0, #1
    3270:	4240      	negs	r0, r0
    3272:	e7fb      	b.n	326c <flash_area_read+0x18>

00003274 <flash_area_write>:

int
flash_area_write(const struct flash_area *fa, uint32_t off, const void *src,
    uint32_t len)
{
    3274:	b570      	push	{r4, r5, r6, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    3276:	6884      	ldr	r4, [r0, #8]
    3278:	428c      	cmp	r4, r1
    327a:	d308      	bcc.n	328e <flash_area_write+0x1a>
    327c:	18cd      	adds	r5, r1, r3
    327e:	42ac      	cmp	r4, r5
    3280:	d305      	bcc.n	328e <flash_area_write+0x1a>
        return -1;
    }
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    3282:	6844      	ldr	r4, [r0, #4]
    3284:	7840      	ldrb	r0, [r0, #1]
    3286:	1909      	adds	r1, r1, r4
    3288:	f7fe f92d 	bl	14e6 <hal_flash_write>
                           (void *)src, len);
}
    328c:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
    328e:	2001      	movs	r0, #1
    3290:	4240      	negs	r0, r0
    3292:	e7fb      	b.n	328c <flash_area_write+0x18>

00003294 <flash_area_erase>:

int
flash_area_erase(const struct flash_area *fa, uint32_t off, uint32_t len)
{
    if (off > fa->fa_size || off + len > fa->fa_size) {
    3294:	6883      	ldr	r3, [r0, #8]
{
    3296:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    3298:	428b      	cmp	r3, r1
    329a:	d308      	bcc.n	32ae <flash_area_erase+0x1a>
    329c:	188c      	adds	r4, r1, r2
    329e:	42a3      	cmp	r3, r4
    32a0:	d305      	bcc.n	32ae <flash_area_erase+0x1a>
        return -1;
    }
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    32a2:	6843      	ldr	r3, [r0, #4]
    32a4:	7840      	ldrb	r0, [r0, #1]
    32a6:	18c9      	adds	r1, r1, r3
    32a8:	f7fe f93b 	bl	1522 <hal_flash_erase>
}
    32ac:	bd10      	pop	{r4, pc}
        return -1;
    32ae:	2001      	movs	r0, #1
    32b0:	4240      	negs	r0, r0
    32b2:	e7fb      	b.n	32ac <flash_area_erase+0x18>

000032b4 <flash_area_align>:

uint8_t
flash_area_align(const struct flash_area *fa)
{
    32b4:	b510      	push	{r4, lr}
    return hal_flash_align(fa->fa_device_id);
    32b6:	7840      	ldrb	r0, [r0, #1]
    32b8:	f7fe f8ed 	bl	1496 <hal_flash_align>
}
    32bc:	bd10      	pop	{r4, pc}

000032be <flash_area_id_from_image_slot>:
 * specified value is not a valid image slot index (0 or 1), a crash is
 * triggered.
 */
int
flash_area_id_from_image_slot(int slot)
{
    32be:	b510      	push	{r4, lr}
    switch (slot) {
    32c0:	2800      	cmp	r0, #0
    32c2:	d008      	beq.n	32d6 <flash_area_id_from_image_slot+0x18>
    case 0:
        return FLASH_AREA_IMAGE_0;
    case 1:
        return FLASH_AREA_IMAGE_1;
    32c4:	2302      	movs	r3, #2
    switch (slot) {
    32c6:	2801      	cmp	r0, #1
    32c8:	d006      	beq.n	32d8 <flash_area_id_from_image_slot+0x1a>
    default:
        assert(0);
    32ca:	2300      	movs	r3, #0
    32cc:	001a      	movs	r2, r3
    32ce:	0019      	movs	r1, r3
    32d0:	0018      	movs	r0, r3
    32d2:	f7ff fd73 	bl	2dbc <__assert_func>
        return FLASH_AREA_IMAGE_0;
    32d6:	2301      	movs	r3, #1
        return FLASH_AREA_IMAGE_0;
    }
}
    32d8:	0018      	movs	r0, r3
    32da:	bd10      	pop	{r4, pc}

000032dc <flash_map_init>:
    }
}

void
flash_map_init(void)
{
    32dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    32de:	b089      	sub	sp, #36	; 0x24
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
    32e0:	f7fe f8c4 	bl	146c <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    32e4:	2800      	cmp	r0, #0
    32e6:	d007      	beq.n	32f8 <flash_map_init+0x1c>
    32e8:	2000      	movs	r0, #0
    32ea:	4b1d      	ldr	r3, [pc, #116]	; (3360 <flash_map_init+0x84>)
    32ec:	9000      	str	r0, [sp, #0]
    32ee:	681c      	ldr	r4, [r3, #0]
    32f0:	0002      	movs	r2, r0
    32f2:	0003      	movs	r3, r0
    32f4:	0001      	movs	r1, r0
    32f6:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required, as the meta
     *    region is located at the end of the boot loader area.
     * 2. If we fail to read the flash map from the meta region, the system
     *    continues to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    32f8:	4b1a      	ldr	r3, [pc, #104]	; (3364 <flash_map_init+0x88>)
    32fa:	4f1b      	ldr	r7, [pc, #108]	; (3368 <flash_map_init+0x8c>)
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    32fc:	4e1b      	ldr	r6, [pc, #108]	; (336c <flash_map_init+0x90>)
    flash_map = sysflash_map_dflt;
    32fe:	603b      	str	r3, [r7, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    3300:	2306      	movs	r3, #6
    3302:	6033      	str	r3, [r6, #0]
    off = 0;
    3304:	2300      	movs	r3, #0
    3306:	9304      	str	r3, [sp, #16]
    rc = mfg_init();
    3308:	f000 f89a 	bl	3440 <mfg_init>
    330c:	1e04      	subs	r4, r0, #0
    if (rc != 0) {
    330e:	d108      	bne.n	3322 <flash_map_init+0x46>
        rc = mfg_next_tlv_with_type(&tlv, &off, MFG_META_TLV_TYPE_FLASH_AREA);
    3310:	2202      	movs	r2, #2
    3312:	a904      	add	r1, sp, #16
    3314:	a803      	add	r0, sp, #12
    3316:	f000 f863 	bl	33e0 <mfg_next_tlv_with_type>
        switch (rc) {
    331a:	2800      	cmp	r0, #0
    331c:	d003      	beq.n	3326 <flash_map_init+0x4a>
    331e:	2803      	cmp	r0, #3
    3320:	d019      	beq.n	3356 <flash_map_init+0x7a>
                            mfg_areas, &num_areas);
    if (rc == 0) {
        flash_map = mfg_areas;
        flash_map_entries = num_areas;
    }
}
    3322:	b009      	add	sp, #36	; 0x24
    3324:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = mfg_read_tlv_flash_area(&tlv, off, &meta_flash_area);
    3326:	ad05      	add	r5, sp, #20
    3328:	002a      	movs	r2, r5
    332a:	9904      	ldr	r1, [sp, #16]
    332c:	a803      	add	r0, sp, #12
    332e:	f000 f865 	bl	33fc <mfg_read_tlv_flash_area>
        if (rc != 0) {
    3332:	2800      	cmp	r0, #0
    3334:	d1f5      	bne.n	3322 <flash_map_init+0x46>
    3336:	220c      	movs	r2, #12
    3338:	4362      	muls	r2, r4
        fap->fa_id = meta_flash_area.area_id;
    333a:	4b0d      	ldr	r3, [pc, #52]	; (3370 <flash_map_init+0x94>)
    333c:	7829      	ldrb	r1, [r5, #0]
        (*out_num_areas)++;
    333e:	3401      	adds	r4, #1
        fap->fa_id = meta_flash_area.area_id;
    3340:	54d1      	strb	r1, [r2, r3]
    3342:	189b      	adds	r3, r3, r2
        fap->fa_device_id = meta_flash_area.device_id;
    3344:	786a      	ldrb	r2, [r5, #1]
    3346:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
    3348:	686a      	ldr	r2, [r5, #4]
    334a:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
    334c:	68aa      	ldr	r2, [r5, #8]
    334e:	609a      	str	r2, [r3, #8]
        if (*out_num_areas >= max_areas) {
    3350:	2c0a      	cmp	r4, #10
    3352:	d1dd      	bne.n	3310 <flash_map_init+0x34>
    3354:	e7e5      	b.n	3322 <flash_map_init+0x46>
        flash_map = mfg_areas;
    3356:	4b06      	ldr	r3, [pc, #24]	; (3370 <flash_map_init+0x94>)
        flash_map_entries = num_areas;
    3358:	6034      	str	r4, [r6, #0]
        flash_map = mfg_areas;
    335a:	603b      	str	r3, [r7, #0]
}
    335c:	e7e1      	b.n	3322 <flash_map_init+0x46>
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	200000f4 	.word	0x200000f4
    3364:	00003a88 	.word	0x00003a88
    3368:	20001538 	.word	0x20001538
    336c:	2000153c 	.word	0x2000153c
    3370:	2000131c 	.word	0x2000131c

00003374 <mfg_next_tlv>:
 *                                  read;
 *                              Other MFG error code on failure.
 */
int
mfg_next_tlv(struct mfg_meta_tlv *tlv, uint32_t *off)
{
    3374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    const struct flash_area *fap;
    int rc;

    if (!mfg_state.valid) {
        return MFG_EUNINIT;
    3376:	2401      	movs	r4, #1
    if (!mfg_state.valid) {
    3378:	4f18      	ldr	r7, [pc, #96]	; (33dc <mfg_next_tlv+0x68>)
{
    337a:	0006      	movs	r6, r0
    if (!mfg_state.valid) {
    337c:	783b      	ldrb	r3, [r7, #0]
{
    337e:	000d      	movs	r5, r1
    if (!mfg_state.valid) {
    3380:	4223      	tst	r3, r4
    3382:	d009      	beq.n	3398 <mfg_next_tlv+0x24>
    }

    rc = flash_area_open(FLASH_AREA_BOOTLOADER, &fap);
    3384:	a901      	add	r1, sp, #4
    3386:	2000      	movs	r0, #0
    3388:	f7ff ff04 	bl	3194 <flash_area_open>
    if (rc != 0) {
    338c:	2800      	cmp	r0, #0
    338e:	d005      	beq.n	339c <mfg_next_tlv+0x28>
        rc = MFG_EFLASH;
    3390:	2404      	movs	r4, #4
    }

    rc = 0;

done:
    flash_area_close(fap);
    3392:	9801      	ldr	r0, [sp, #4]
    3394:	f7ff ff1e 	bl	31d4 <flash_area_close>
    return rc;
}
    3398:	0020      	movs	r0, r4
    339a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (*off == 0) {
    339c:	682a      	ldr	r2, [r5, #0]
    339e:	2a00      	cmp	r2, #0
    33a0:	d117      	bne.n	33d2 <mfg_next_tlv+0x5e>
        *off = mfg_state.off + MFG_META_HEADER_SZ;
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	3304      	adds	r3, #4
        *off += MFG_META_TLV_SZ + tlv->size;
    33a6:	602b      	str	r3, [r5, #0]
    if (*off + MFG_META_FOOTER_SZ >= fap->fa_size) {
    33a8:	9f01      	ldr	r7, [sp, #4]
    33aa:	682b      	ldr	r3, [r5, #0]
    33ac:	68ba      	ldr	r2, [r7, #8]
    33ae:	3308      	adds	r3, #8
        return MFG_EDONE;
    33b0:	2403      	movs	r4, #3
    if (*off + MFG_META_FOOTER_SZ >= fap->fa_size) {
    33b2:	4293      	cmp	r3, r2
    33b4:	d2f0      	bcs.n	3398 <mfg_next_tlv+0x24>
    memset(tlv, 0, sizeof *tlv);
    33b6:	2202      	movs	r2, #2
    33b8:	2100      	movs	r1, #0
    33ba:	0030      	movs	r0, r6
    33bc:	f7ff feda 	bl	3174 <memset>
    rc = flash_area_read(fap, *off, tlv, MFG_META_TLV_SZ);
    33c0:	2302      	movs	r3, #2
    33c2:	0032      	movs	r2, r6
    33c4:	6829      	ldr	r1, [r5, #0]
    33c6:	0038      	movs	r0, r7
    33c8:	f7ff ff44 	bl	3254 <flash_area_read>
    33cc:	1e04      	subs	r4, r0, #0
    if (rc != 0) {
    33ce:	d1df      	bne.n	3390 <mfg_next_tlv+0x1c>
    33d0:	e7df      	b.n	3392 <mfg_next_tlv+0x1e>
        *off += MFG_META_TLV_SZ + tlv->size;
    33d2:	7873      	ldrb	r3, [r6, #1]
    33d4:	189b      	adds	r3, r3, r2
    33d6:	3302      	adds	r3, #2
    33d8:	e7e5      	b.n	33a6 <mfg_next_tlv+0x32>
    33da:	46c0      	nop			; (mov r8, r8)
    33dc:	20001540 	.word	0x20001540

000033e0 <mfg_next_tlv_with_type>:
 *                                  the specified type to read;
 *                              Other MFG error code on failure.
 */
int
mfg_next_tlv_with_type(struct mfg_meta_tlv *tlv, uint32_t *off, uint8_t type)
{
    33e0:	b570      	push	{r4, r5, r6, lr}
    33e2:	0004      	movs	r4, r0
    33e4:	000e      	movs	r6, r1
    33e6:	0015      	movs	r5, r2
    int rc;

    while (1) {
        rc = mfg_next_tlv(tlv, off);
    33e8:	0031      	movs	r1, r6
    33ea:	0020      	movs	r0, r4
    33ec:	f7ff ffc2 	bl	3374 <mfg_next_tlv>
        if (rc != 0) {
    33f0:	2800      	cmp	r0, #0
    33f2:	d102      	bne.n	33fa <mfg_next_tlv_with_type+0x1a>
            break;
        }

        if (tlv->type == type) {
    33f4:	7823      	ldrb	r3, [r4, #0]
    33f6:	42ab      	cmp	r3, r5
    33f8:	d1f6      	bne.n	33e8 <mfg_next_tlv_with_type+0x8>

        /* Proceed to next TLV. */
    }

    return rc;
}
    33fa:	bd70      	pop	{r4, r5, r6, pc}

000033fc <mfg_read_tlv_flash_area>:
 * @return                      0 on success; MFG error code on failure.
 */
int
mfg_read_tlv_flash_area(const struct mfg_meta_tlv *tlv, uint32_t off,
                        struct mfg_meta_flash_area *out_mfa)
{
    33fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    33fe:	0006      	movs	r6, r0
    3400:	000c      	movs	r4, r1
    const struct flash_area *fap;
    int read_sz;
    int rc;

    rc = flash_area_open(FLASH_AREA_BOOTLOADER, &fap);
    3402:	2000      	movs	r0, #0
    3404:	a901      	add	r1, sp, #4
{
    3406:	0015      	movs	r5, r2
    rc = flash_area_open(FLASH_AREA_BOOTLOADER, &fap);
    3408:	f7ff fec4 	bl	3194 <flash_area_open>
    340c:	1e01      	subs	r1, r0, #0
    if (rc != 0) {
    340e:	d005      	beq.n	341c <mfg_read_tlv_flash_area+0x20>
        rc = MFG_EFLASH;
    3410:	2404      	movs	r4, #4
    }

    rc = 0;

done:
    flash_area_close(fap);
    3412:	9801      	ldr	r0, [sp, #4]
    3414:	f7ff fede 	bl	31d4 <flash_area_close>
    return rc;
}
    3418:	0020      	movs	r0, r4
    341a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    memset(out_mfa, 0, sizeof *out_mfa);
    341c:	220c      	movs	r2, #12
    341e:	0028      	movs	r0, r5
    3420:	f7ff fea8 	bl	3174 <memset>
    read_sz = min(MFG_META_FLASH_AREA_SZ, tlv->size);
    3424:	7872      	ldrb	r2, [r6, #1]
    3426:	1c13      	adds	r3, r2, #0
    3428:	2a0c      	cmp	r2, #12
    342a:	d900      	bls.n	342e <mfg_read_tlv_flash_area+0x32>
    342c:	230c      	movs	r3, #12
    rc = flash_area_read(fap, off + MFG_META_TLV_SZ, out_mfa, read_sz);
    342e:	1ca1      	adds	r1, r4, #2
    3430:	b2db      	uxtb	r3, r3
    3432:	002a      	movs	r2, r5
    3434:	9801      	ldr	r0, [sp, #4]
    3436:	f7ff ff0d 	bl	3254 <flash_area_read>
    343a:	1e04      	subs	r4, r0, #0
    if (rc != 0) {
    343c:	d0e9      	beq.n	3412 <mfg_read_tlv_flash_area+0x16>
    343e:	e7e7      	b.n	3410 <mfg_read_tlv_flash_area+0x14>

00003440 <mfg_init>:
 *
 * @return                      0 on success; MFG error code on failure.
 */
int
mfg_init(void)
{
    3440:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    if (mfg_state.valid) {
    3442:	2601      	movs	r6, #1
    3444:	4d18      	ldr	r5, [pc, #96]	; (34a8 <mfg_init+0x68>)
{
    3446:	b085      	sub	sp, #20
    if (mfg_state.valid) {
    3448:	782b      	ldrb	r3, [r5, #0]
        /* Already initialized. */
        return 0;
    344a:	2400      	movs	r4, #0
    if (mfg_state.valid) {
    344c:	4233      	tst	r3, r6
    344e:	d10b      	bne.n	3468 <mfg_init+0x28>
    }

    mfg_state.valid = 0;
    3450:	43b3      	bics	r3, r6

    rc = flash_area_open(FLASH_AREA_BOOTLOADER, &fap);
    3452:	a901      	add	r1, sp, #4
    3454:	0020      	movs	r0, r4
    mfg_state.valid = 0;
    3456:	702b      	strb	r3, [r5, #0]
    rc = flash_area_open(FLASH_AREA_BOOTLOADER, &fap);
    3458:	f7ff fe9c 	bl	3194 <flash_area_open>
    if (rc != 0) {
    345c:	42a0      	cmp	r0, r4
    345e:	d006      	beq.n	346e <mfg_init+0x2e>
        rc = MFG_EFLASH;
    3460:	2404      	movs	r4, #4
    mfg_state.size = ftr.size;

    rc = 0;

done:
    flash_area_close(fap);
    3462:	9801      	ldr	r0, [sp, #4]
    3464:	f7ff feb6 	bl	31d4 <flash_area_close>
    return rc;
}
    3468:	0020      	movs	r0, r4
    346a:	b005      	add	sp, #20
    346c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    off = fap->fa_size - sizeof ftr;
    346e:	9801      	ldr	r0, [sp, #4]
    rc = flash_area_read(fap, off, &ftr, sizeof ftr);
    3470:	af02      	add	r7, sp, #8
    off = fap->fa_size - sizeof ftr;
    3472:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read(fap, off, &ftr, sizeof ftr);
    3474:	2308      	movs	r3, #8
    off = fap->fa_size - sizeof ftr;
    3476:	3908      	subs	r1, #8
    rc = flash_area_read(fap, off, &ftr, sizeof ftr);
    3478:	b289      	uxth	r1, r1
    347a:	003a      	movs	r2, r7
    347c:	f7ff feea 	bl	3254 <flash_area_read>
    3480:	1e04      	subs	r4, r0, #0
    if (rc != 0) {
    3482:	d1ed      	bne.n	3460 <mfg_init+0x20>
    if (ftr.magic != MFG_META_MAGIC) {
    3484:	4b09      	ldr	r3, [pc, #36]	; (34ac <mfg_init+0x6c>)
    3486:	687a      	ldr	r2, [r7, #4]
    3488:	429a      	cmp	r2, r3
    348a:	d10b      	bne.n	34a4 <mfg_init+0x64>
    if (ftr.size > fap->fa_size) {
    348c:	9b01      	ldr	r3, [sp, #4]
    348e:	883a      	ldrh	r2, [r7, #0]
    3490:	689b      	ldr	r3, [r3, #8]
    3492:	429a      	cmp	r2, r3
    3494:	d806      	bhi.n	34a4 <mfg_init+0x64>
    mfg_state.valid = 1;
    3496:	7829      	ldrb	r1, [r5, #0]
    mfg_state.off = fap->fa_size - ftr.size;
    3498:	1a9b      	subs	r3, r3, r2
    mfg_state.valid = 1;
    349a:	430e      	orrs	r6, r1
    349c:	702e      	strb	r6, [r5, #0]
    mfg_state.off = fap->fa_size - ftr.size;
    349e:	606b      	str	r3, [r5, #4]
    mfg_state.size = ftr.size;
    34a0:	60aa      	str	r2, [r5, #8]
    34a2:	e7de      	b.n	3462 <mfg_init+0x22>
        rc = MFG_EBADDATA;
    34a4:	2402      	movs	r4, #2
    34a6:	e7dc      	b.n	3462 <mfg_init+0x22>
    34a8:	20001540 	.word	0x20001540
    34ac:	3bb2a269 	.word	0x3bb2a269

000034b0 <sysinit_dflt_panic_cb>:
#include "sysinit/sysinit.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    34b0:	b510      	push	{r4, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    34b2:	f7ff fc83 	bl	2dbc <__assert_func>
	...

000034b8 <_sbrk>:
void *
_sbrk(int incr)
{
    void *prev_brk;

    if (incr < 0) {
    34b8:	2800      	cmp	r0, #0
    34ba:	db09      	blt.n	34d0 <_sbrk+0x18>
        /* Returning memory to the heap. */
        prev_brk = (void *)-1;
    } else {
        /* Allocating memory from the heap. */
        if (&_user_heap_end - _brk >= incr) {
    34bc:	4906      	ldr	r1, [pc, #24]	; (34d8 <_sbrk+0x20>)
    34be:	4a07      	ldr	r2, [pc, #28]	; (34dc <_sbrk+0x24>)
    34c0:	680b      	ldr	r3, [r1, #0]
    34c2:	1ad2      	subs	r2, r2, r3
    34c4:	4282      	cmp	r2, r0
    34c6:	db03      	blt.n	34d0 <_sbrk+0x18>
            prev_brk = _brk;
            _brk += incr;
    34c8:	1818      	adds	r0, r3, r0
    34ca:	6008      	str	r0, [r1, #0]
            prev_brk = (void *)-1;
        }
    }

    return prev_brk;
}
    34cc:	0018      	movs	r0, r3
    34ce:	4770      	bx	lr
        prev_brk = (void *)-1;
    34d0:	2301      	movs	r3, #1
    34d2:	425b      	negs	r3, r3
    return prev_brk;
    34d4:	e7fa      	b.n	34cc <_sbrk+0x14>
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	200000f8 	.word	0x200000f8
    34dc:	20007c00 	.word	0x20007c00

000034e0 <__gnu_thumb1_case_uqi>:
    34e0:	b402      	push	{r1}
    34e2:	4671      	mov	r1, lr
    34e4:	0849      	lsrs	r1, r1, #1
    34e6:	0049      	lsls	r1, r1, #1
    34e8:	5c09      	ldrb	r1, [r1, r0]
    34ea:	0049      	lsls	r1, r1, #1
    34ec:	448e      	add	lr, r1
    34ee:	bc02      	pop	{r1}
    34f0:	4770      	bx	lr
    34f2:	46c0      	nop			; (mov r8, r8)

000034f4 <__udivsi3>:
    34f4:	2200      	movs	r2, #0
    34f6:	0843      	lsrs	r3, r0, #1
    34f8:	428b      	cmp	r3, r1
    34fa:	d374      	bcc.n	35e6 <__udivsi3+0xf2>
    34fc:	0903      	lsrs	r3, r0, #4
    34fe:	428b      	cmp	r3, r1
    3500:	d35f      	bcc.n	35c2 <__udivsi3+0xce>
    3502:	0a03      	lsrs	r3, r0, #8
    3504:	428b      	cmp	r3, r1
    3506:	d344      	bcc.n	3592 <__udivsi3+0x9e>
    3508:	0b03      	lsrs	r3, r0, #12
    350a:	428b      	cmp	r3, r1
    350c:	d328      	bcc.n	3560 <__udivsi3+0x6c>
    350e:	0c03      	lsrs	r3, r0, #16
    3510:	428b      	cmp	r3, r1
    3512:	d30d      	bcc.n	3530 <__udivsi3+0x3c>
    3514:	22ff      	movs	r2, #255	; 0xff
    3516:	0209      	lsls	r1, r1, #8
    3518:	ba12      	rev	r2, r2
    351a:	0c03      	lsrs	r3, r0, #16
    351c:	428b      	cmp	r3, r1
    351e:	d302      	bcc.n	3526 <__udivsi3+0x32>
    3520:	1212      	asrs	r2, r2, #8
    3522:	0209      	lsls	r1, r1, #8
    3524:	d065      	beq.n	35f2 <__udivsi3+0xfe>
    3526:	0b03      	lsrs	r3, r0, #12
    3528:	428b      	cmp	r3, r1
    352a:	d319      	bcc.n	3560 <__udivsi3+0x6c>
    352c:	e000      	b.n	3530 <__udivsi3+0x3c>
    352e:	0a09      	lsrs	r1, r1, #8
    3530:	0bc3      	lsrs	r3, r0, #15
    3532:	428b      	cmp	r3, r1
    3534:	d301      	bcc.n	353a <__udivsi3+0x46>
    3536:	03cb      	lsls	r3, r1, #15
    3538:	1ac0      	subs	r0, r0, r3
    353a:	4152      	adcs	r2, r2
    353c:	0b83      	lsrs	r3, r0, #14
    353e:	428b      	cmp	r3, r1
    3540:	d301      	bcc.n	3546 <__udivsi3+0x52>
    3542:	038b      	lsls	r3, r1, #14
    3544:	1ac0      	subs	r0, r0, r3
    3546:	4152      	adcs	r2, r2
    3548:	0b43      	lsrs	r3, r0, #13
    354a:	428b      	cmp	r3, r1
    354c:	d301      	bcc.n	3552 <__udivsi3+0x5e>
    354e:	034b      	lsls	r3, r1, #13
    3550:	1ac0      	subs	r0, r0, r3
    3552:	4152      	adcs	r2, r2
    3554:	0b03      	lsrs	r3, r0, #12
    3556:	428b      	cmp	r3, r1
    3558:	d301      	bcc.n	355e <__udivsi3+0x6a>
    355a:	030b      	lsls	r3, r1, #12
    355c:	1ac0      	subs	r0, r0, r3
    355e:	4152      	adcs	r2, r2
    3560:	0ac3      	lsrs	r3, r0, #11
    3562:	428b      	cmp	r3, r1
    3564:	d301      	bcc.n	356a <__udivsi3+0x76>
    3566:	02cb      	lsls	r3, r1, #11
    3568:	1ac0      	subs	r0, r0, r3
    356a:	4152      	adcs	r2, r2
    356c:	0a83      	lsrs	r3, r0, #10
    356e:	428b      	cmp	r3, r1
    3570:	d301      	bcc.n	3576 <__udivsi3+0x82>
    3572:	028b      	lsls	r3, r1, #10
    3574:	1ac0      	subs	r0, r0, r3
    3576:	4152      	adcs	r2, r2
    3578:	0a43      	lsrs	r3, r0, #9
    357a:	428b      	cmp	r3, r1
    357c:	d301      	bcc.n	3582 <__udivsi3+0x8e>
    357e:	024b      	lsls	r3, r1, #9
    3580:	1ac0      	subs	r0, r0, r3
    3582:	4152      	adcs	r2, r2
    3584:	0a03      	lsrs	r3, r0, #8
    3586:	428b      	cmp	r3, r1
    3588:	d301      	bcc.n	358e <__udivsi3+0x9a>
    358a:	020b      	lsls	r3, r1, #8
    358c:	1ac0      	subs	r0, r0, r3
    358e:	4152      	adcs	r2, r2
    3590:	d2cd      	bcs.n	352e <__udivsi3+0x3a>
    3592:	09c3      	lsrs	r3, r0, #7
    3594:	428b      	cmp	r3, r1
    3596:	d301      	bcc.n	359c <__udivsi3+0xa8>
    3598:	01cb      	lsls	r3, r1, #7
    359a:	1ac0      	subs	r0, r0, r3
    359c:	4152      	adcs	r2, r2
    359e:	0983      	lsrs	r3, r0, #6
    35a0:	428b      	cmp	r3, r1
    35a2:	d301      	bcc.n	35a8 <__udivsi3+0xb4>
    35a4:	018b      	lsls	r3, r1, #6
    35a6:	1ac0      	subs	r0, r0, r3
    35a8:	4152      	adcs	r2, r2
    35aa:	0943      	lsrs	r3, r0, #5
    35ac:	428b      	cmp	r3, r1
    35ae:	d301      	bcc.n	35b4 <__udivsi3+0xc0>
    35b0:	014b      	lsls	r3, r1, #5
    35b2:	1ac0      	subs	r0, r0, r3
    35b4:	4152      	adcs	r2, r2
    35b6:	0903      	lsrs	r3, r0, #4
    35b8:	428b      	cmp	r3, r1
    35ba:	d301      	bcc.n	35c0 <__udivsi3+0xcc>
    35bc:	010b      	lsls	r3, r1, #4
    35be:	1ac0      	subs	r0, r0, r3
    35c0:	4152      	adcs	r2, r2
    35c2:	08c3      	lsrs	r3, r0, #3
    35c4:	428b      	cmp	r3, r1
    35c6:	d301      	bcc.n	35cc <__udivsi3+0xd8>
    35c8:	00cb      	lsls	r3, r1, #3
    35ca:	1ac0      	subs	r0, r0, r3
    35cc:	4152      	adcs	r2, r2
    35ce:	0883      	lsrs	r3, r0, #2
    35d0:	428b      	cmp	r3, r1
    35d2:	d301      	bcc.n	35d8 <__udivsi3+0xe4>
    35d4:	008b      	lsls	r3, r1, #2
    35d6:	1ac0      	subs	r0, r0, r3
    35d8:	4152      	adcs	r2, r2
    35da:	0843      	lsrs	r3, r0, #1
    35dc:	428b      	cmp	r3, r1
    35de:	d301      	bcc.n	35e4 <__udivsi3+0xf0>
    35e0:	004b      	lsls	r3, r1, #1
    35e2:	1ac0      	subs	r0, r0, r3
    35e4:	4152      	adcs	r2, r2
    35e6:	1a41      	subs	r1, r0, r1
    35e8:	d200      	bcs.n	35ec <__udivsi3+0xf8>
    35ea:	4601      	mov	r1, r0
    35ec:	4152      	adcs	r2, r2
    35ee:	4610      	mov	r0, r2
    35f0:	4770      	bx	lr
    35f2:	e7ff      	b.n	35f4 <__udivsi3+0x100>
    35f4:	b501      	push	{r0, lr}
    35f6:	2000      	movs	r0, #0
    35f8:	f7ff fcbe 	bl	2f78 <__aeabi_idiv0>
    35fc:	bd02      	pop	{r1, pc}
    35fe:	46c0      	nop			; (mov r8, r8)

00003600 <__aeabi_uidivmod>:
    3600:	2900      	cmp	r1, #0
    3602:	d0f7      	beq.n	35f4 <__udivsi3+0x100>
    3604:	e776      	b.n	34f4 <__udivsi3>
    3606:	4770      	bx	lr

00003608 <__divsi3>:
    3608:	4603      	mov	r3, r0
    360a:	430b      	orrs	r3, r1
    360c:	d47f      	bmi.n	370e <__divsi3+0x106>
    360e:	2200      	movs	r2, #0
    3610:	0843      	lsrs	r3, r0, #1
    3612:	428b      	cmp	r3, r1
    3614:	d374      	bcc.n	3700 <__divsi3+0xf8>
    3616:	0903      	lsrs	r3, r0, #4
    3618:	428b      	cmp	r3, r1
    361a:	d35f      	bcc.n	36dc <__divsi3+0xd4>
    361c:	0a03      	lsrs	r3, r0, #8
    361e:	428b      	cmp	r3, r1
    3620:	d344      	bcc.n	36ac <__divsi3+0xa4>
    3622:	0b03      	lsrs	r3, r0, #12
    3624:	428b      	cmp	r3, r1
    3626:	d328      	bcc.n	367a <__divsi3+0x72>
    3628:	0c03      	lsrs	r3, r0, #16
    362a:	428b      	cmp	r3, r1
    362c:	d30d      	bcc.n	364a <__divsi3+0x42>
    362e:	22ff      	movs	r2, #255	; 0xff
    3630:	0209      	lsls	r1, r1, #8
    3632:	ba12      	rev	r2, r2
    3634:	0c03      	lsrs	r3, r0, #16
    3636:	428b      	cmp	r3, r1
    3638:	d302      	bcc.n	3640 <__divsi3+0x38>
    363a:	1212      	asrs	r2, r2, #8
    363c:	0209      	lsls	r1, r1, #8
    363e:	d065      	beq.n	370c <__divsi3+0x104>
    3640:	0b03      	lsrs	r3, r0, #12
    3642:	428b      	cmp	r3, r1
    3644:	d319      	bcc.n	367a <__divsi3+0x72>
    3646:	e000      	b.n	364a <__divsi3+0x42>
    3648:	0a09      	lsrs	r1, r1, #8
    364a:	0bc3      	lsrs	r3, r0, #15
    364c:	428b      	cmp	r3, r1
    364e:	d301      	bcc.n	3654 <__divsi3+0x4c>
    3650:	03cb      	lsls	r3, r1, #15
    3652:	1ac0      	subs	r0, r0, r3
    3654:	4152      	adcs	r2, r2
    3656:	0b83      	lsrs	r3, r0, #14
    3658:	428b      	cmp	r3, r1
    365a:	d301      	bcc.n	3660 <__divsi3+0x58>
    365c:	038b      	lsls	r3, r1, #14
    365e:	1ac0      	subs	r0, r0, r3
    3660:	4152      	adcs	r2, r2
    3662:	0b43      	lsrs	r3, r0, #13
    3664:	428b      	cmp	r3, r1
    3666:	d301      	bcc.n	366c <__divsi3+0x64>
    3668:	034b      	lsls	r3, r1, #13
    366a:	1ac0      	subs	r0, r0, r3
    366c:	4152      	adcs	r2, r2
    366e:	0b03      	lsrs	r3, r0, #12
    3670:	428b      	cmp	r3, r1
    3672:	d301      	bcc.n	3678 <__divsi3+0x70>
    3674:	030b      	lsls	r3, r1, #12
    3676:	1ac0      	subs	r0, r0, r3
    3678:	4152      	adcs	r2, r2
    367a:	0ac3      	lsrs	r3, r0, #11
    367c:	428b      	cmp	r3, r1
    367e:	d301      	bcc.n	3684 <__divsi3+0x7c>
    3680:	02cb      	lsls	r3, r1, #11
    3682:	1ac0      	subs	r0, r0, r3
    3684:	4152      	adcs	r2, r2
    3686:	0a83      	lsrs	r3, r0, #10
    3688:	428b      	cmp	r3, r1
    368a:	d301      	bcc.n	3690 <__divsi3+0x88>
    368c:	028b      	lsls	r3, r1, #10
    368e:	1ac0      	subs	r0, r0, r3
    3690:	4152      	adcs	r2, r2
    3692:	0a43      	lsrs	r3, r0, #9
    3694:	428b      	cmp	r3, r1
    3696:	d301      	bcc.n	369c <__divsi3+0x94>
    3698:	024b      	lsls	r3, r1, #9
    369a:	1ac0      	subs	r0, r0, r3
    369c:	4152      	adcs	r2, r2
    369e:	0a03      	lsrs	r3, r0, #8
    36a0:	428b      	cmp	r3, r1
    36a2:	d301      	bcc.n	36a8 <__divsi3+0xa0>
    36a4:	020b      	lsls	r3, r1, #8
    36a6:	1ac0      	subs	r0, r0, r3
    36a8:	4152      	adcs	r2, r2
    36aa:	d2cd      	bcs.n	3648 <__divsi3+0x40>
    36ac:	09c3      	lsrs	r3, r0, #7
    36ae:	428b      	cmp	r3, r1
    36b0:	d301      	bcc.n	36b6 <__divsi3+0xae>
    36b2:	01cb      	lsls	r3, r1, #7
    36b4:	1ac0      	subs	r0, r0, r3
    36b6:	4152      	adcs	r2, r2
    36b8:	0983      	lsrs	r3, r0, #6
    36ba:	428b      	cmp	r3, r1
    36bc:	d301      	bcc.n	36c2 <__divsi3+0xba>
    36be:	018b      	lsls	r3, r1, #6
    36c0:	1ac0      	subs	r0, r0, r3
    36c2:	4152      	adcs	r2, r2
    36c4:	0943      	lsrs	r3, r0, #5
    36c6:	428b      	cmp	r3, r1
    36c8:	d301      	bcc.n	36ce <__divsi3+0xc6>
    36ca:	014b      	lsls	r3, r1, #5
    36cc:	1ac0      	subs	r0, r0, r3
    36ce:	4152      	adcs	r2, r2
    36d0:	0903      	lsrs	r3, r0, #4
    36d2:	428b      	cmp	r3, r1
    36d4:	d301      	bcc.n	36da <__divsi3+0xd2>
    36d6:	010b      	lsls	r3, r1, #4
    36d8:	1ac0      	subs	r0, r0, r3
    36da:	4152      	adcs	r2, r2
    36dc:	08c3      	lsrs	r3, r0, #3
    36de:	428b      	cmp	r3, r1
    36e0:	d301      	bcc.n	36e6 <__divsi3+0xde>
    36e2:	00cb      	lsls	r3, r1, #3
    36e4:	1ac0      	subs	r0, r0, r3
    36e6:	4152      	adcs	r2, r2
    36e8:	0883      	lsrs	r3, r0, #2
    36ea:	428b      	cmp	r3, r1
    36ec:	d301      	bcc.n	36f2 <__divsi3+0xea>
    36ee:	008b      	lsls	r3, r1, #2
    36f0:	1ac0      	subs	r0, r0, r3
    36f2:	4152      	adcs	r2, r2
    36f4:	0843      	lsrs	r3, r0, #1
    36f6:	428b      	cmp	r3, r1
    36f8:	d301      	bcc.n	36fe <__divsi3+0xf6>
    36fa:	004b      	lsls	r3, r1, #1
    36fc:	1ac0      	subs	r0, r0, r3
    36fe:	4152      	adcs	r2, r2
    3700:	1a41      	subs	r1, r0, r1
    3702:	d200      	bcs.n	3706 <__divsi3+0xfe>
    3704:	4601      	mov	r1, r0
    3706:	4152      	adcs	r2, r2
    3708:	4610      	mov	r0, r2
    370a:	4770      	bx	lr
    370c:	e05d      	b.n	37ca <__divsi3+0x1c2>
    370e:	0fca      	lsrs	r2, r1, #31
    3710:	d000      	beq.n	3714 <__divsi3+0x10c>
    3712:	4249      	negs	r1, r1
    3714:	1003      	asrs	r3, r0, #32
    3716:	d300      	bcc.n	371a <__divsi3+0x112>
    3718:	4240      	negs	r0, r0
    371a:	4053      	eors	r3, r2
    371c:	2200      	movs	r2, #0
    371e:	469c      	mov	ip, r3
    3720:	0903      	lsrs	r3, r0, #4
    3722:	428b      	cmp	r3, r1
    3724:	d32d      	bcc.n	3782 <__divsi3+0x17a>
    3726:	0a03      	lsrs	r3, r0, #8
    3728:	428b      	cmp	r3, r1
    372a:	d312      	bcc.n	3752 <__divsi3+0x14a>
    372c:	22fc      	movs	r2, #252	; 0xfc
    372e:	0189      	lsls	r1, r1, #6
    3730:	ba12      	rev	r2, r2
    3732:	0a03      	lsrs	r3, r0, #8
    3734:	428b      	cmp	r3, r1
    3736:	d30c      	bcc.n	3752 <__divsi3+0x14a>
    3738:	0189      	lsls	r1, r1, #6
    373a:	1192      	asrs	r2, r2, #6
    373c:	428b      	cmp	r3, r1
    373e:	d308      	bcc.n	3752 <__divsi3+0x14a>
    3740:	0189      	lsls	r1, r1, #6
    3742:	1192      	asrs	r2, r2, #6
    3744:	428b      	cmp	r3, r1
    3746:	d304      	bcc.n	3752 <__divsi3+0x14a>
    3748:	0189      	lsls	r1, r1, #6
    374a:	d03a      	beq.n	37c2 <__divsi3+0x1ba>
    374c:	1192      	asrs	r2, r2, #6
    374e:	e000      	b.n	3752 <__divsi3+0x14a>
    3750:	0989      	lsrs	r1, r1, #6
    3752:	09c3      	lsrs	r3, r0, #7
    3754:	428b      	cmp	r3, r1
    3756:	d301      	bcc.n	375c <__divsi3+0x154>
    3758:	01cb      	lsls	r3, r1, #7
    375a:	1ac0      	subs	r0, r0, r3
    375c:	4152      	adcs	r2, r2
    375e:	0983      	lsrs	r3, r0, #6
    3760:	428b      	cmp	r3, r1
    3762:	d301      	bcc.n	3768 <__divsi3+0x160>
    3764:	018b      	lsls	r3, r1, #6
    3766:	1ac0      	subs	r0, r0, r3
    3768:	4152      	adcs	r2, r2
    376a:	0943      	lsrs	r3, r0, #5
    376c:	428b      	cmp	r3, r1
    376e:	d301      	bcc.n	3774 <__divsi3+0x16c>
    3770:	014b      	lsls	r3, r1, #5
    3772:	1ac0      	subs	r0, r0, r3
    3774:	4152      	adcs	r2, r2
    3776:	0903      	lsrs	r3, r0, #4
    3778:	428b      	cmp	r3, r1
    377a:	d301      	bcc.n	3780 <__divsi3+0x178>
    377c:	010b      	lsls	r3, r1, #4
    377e:	1ac0      	subs	r0, r0, r3
    3780:	4152      	adcs	r2, r2
    3782:	08c3      	lsrs	r3, r0, #3
    3784:	428b      	cmp	r3, r1
    3786:	d301      	bcc.n	378c <__divsi3+0x184>
    3788:	00cb      	lsls	r3, r1, #3
    378a:	1ac0      	subs	r0, r0, r3
    378c:	4152      	adcs	r2, r2
    378e:	0883      	lsrs	r3, r0, #2
    3790:	428b      	cmp	r3, r1
    3792:	d301      	bcc.n	3798 <__divsi3+0x190>
    3794:	008b      	lsls	r3, r1, #2
    3796:	1ac0      	subs	r0, r0, r3
    3798:	4152      	adcs	r2, r2
    379a:	d2d9      	bcs.n	3750 <__divsi3+0x148>
    379c:	0843      	lsrs	r3, r0, #1
    379e:	428b      	cmp	r3, r1
    37a0:	d301      	bcc.n	37a6 <__divsi3+0x19e>
    37a2:	004b      	lsls	r3, r1, #1
    37a4:	1ac0      	subs	r0, r0, r3
    37a6:	4152      	adcs	r2, r2
    37a8:	1a41      	subs	r1, r0, r1
    37aa:	d200      	bcs.n	37ae <__divsi3+0x1a6>
    37ac:	4601      	mov	r1, r0
    37ae:	4663      	mov	r3, ip
    37b0:	4152      	adcs	r2, r2
    37b2:	105b      	asrs	r3, r3, #1
    37b4:	4610      	mov	r0, r2
    37b6:	d301      	bcc.n	37bc <__divsi3+0x1b4>
    37b8:	4240      	negs	r0, r0
    37ba:	2b00      	cmp	r3, #0
    37bc:	d500      	bpl.n	37c0 <__divsi3+0x1b8>
    37be:	4249      	negs	r1, r1
    37c0:	4770      	bx	lr
    37c2:	4663      	mov	r3, ip
    37c4:	105b      	asrs	r3, r3, #1
    37c6:	d300      	bcc.n	37ca <__divsi3+0x1c2>
    37c8:	4240      	negs	r0, r0
    37ca:	b501      	push	{r0, lr}
    37cc:	2000      	movs	r0, #0
    37ce:	f7ff fbd3 	bl	2f78 <__aeabi_idiv0>
    37d2:	bd02      	pop	{r1, pc}

000037d4 <__aeabi_idivmod>:
    37d4:	2900      	cmp	r1, #0
    37d6:	d0f8      	beq.n	37ca <__divsi3+0x1c2>
    37d8:	e716      	b.n	3608 <__divsi3>
    37da:	4770      	bx	lr

000037dc <__aeabi_llsl>:
    37dc:	4091      	lsls	r1, r2
    37de:	1c03      	adds	r3, r0, #0
    37e0:	4090      	lsls	r0, r2
    37e2:	469c      	mov	ip, r3
    37e4:	3a20      	subs	r2, #32
    37e6:	4093      	lsls	r3, r2
    37e8:	4319      	orrs	r1, r3
    37ea:	4252      	negs	r2, r2
    37ec:	4663      	mov	r3, ip
    37ee:	40d3      	lsrs	r3, r2
    37f0:	4319      	orrs	r1, r3
    37f2:	4770      	bx	lr

000037f4 <__aeabi_lmul>:
    37f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37f6:	46ce      	mov	lr, r9
    37f8:	4647      	mov	r7, r8
    37fa:	0415      	lsls	r5, r2, #16
    37fc:	0c2d      	lsrs	r5, r5, #16
    37fe:	002e      	movs	r6, r5
    3800:	b580      	push	{r7, lr}
    3802:	0407      	lsls	r7, r0, #16
    3804:	0c14      	lsrs	r4, r2, #16
    3806:	0c3f      	lsrs	r7, r7, #16
    3808:	4699      	mov	r9, r3
    380a:	0c03      	lsrs	r3, r0, #16
    380c:	437e      	muls	r6, r7
    380e:	435d      	muls	r5, r3
    3810:	4367      	muls	r7, r4
    3812:	4363      	muls	r3, r4
    3814:	197f      	adds	r7, r7, r5
    3816:	0c34      	lsrs	r4, r6, #16
    3818:	19e4      	adds	r4, r4, r7
    381a:	469c      	mov	ip, r3
    381c:	42a5      	cmp	r5, r4
    381e:	d903      	bls.n	3828 <__aeabi_lmul+0x34>
    3820:	2380      	movs	r3, #128	; 0x80
    3822:	025b      	lsls	r3, r3, #9
    3824:	4698      	mov	r8, r3
    3826:	44c4      	add	ip, r8
    3828:	464b      	mov	r3, r9
    382a:	4343      	muls	r3, r0
    382c:	4351      	muls	r1, r2
    382e:	0c25      	lsrs	r5, r4, #16
    3830:	0436      	lsls	r6, r6, #16
    3832:	4465      	add	r5, ip
    3834:	0c36      	lsrs	r6, r6, #16
    3836:	0424      	lsls	r4, r4, #16
    3838:	19a4      	adds	r4, r4, r6
    383a:	195b      	adds	r3, r3, r5
    383c:	1859      	adds	r1, r3, r1
    383e:	0020      	movs	r0, r4
    3840:	bc0c      	pop	{r2, r3}
    3842:	4690      	mov	r8, r2
    3844:	4699      	mov	r9, r3
    3846:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003848 <boot_status_tables>:
    3848:	0001 0001 0001 02ff 0100 0100 0003 02ff     ................

00003858 <boot_swap_trans_table>:
    3858:	0104 0103 0402 0000                         ........

00003860 <boot_img_magic>:
    3860:	c277 f395 d260 7fef 5235 0f50 b62c 8079     w...`...5RP.,.y.

00003870 <boot_swap_tables>:
    3870:	0303 0000 0001 0001 02ff 0100 0100 0103     ................
    3880:	ff03 0400 0301 0001 0001 0000               ............

0000388c <K>:
    388c:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
    389c:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
    38ac:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
    38bc:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
    38cc:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
    38dc:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
    38ec:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
    38fc:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
    390c:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
    391c:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
    392c:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
    393c:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
    394c:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
    395c:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
    396c:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
    397c:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

0000398c <sha256_padding>:
    398c:	0080 0000 0000 0000 0000 0000 0000 0000     ................
	...
    39cc:	6175 7472 0030 0000                         uart0...

000039d4 <uart_cfgs>:
    39d4:	1000 4200 0000 0031 0000 0000 0000 0000     ...B..1.........
	...
    39ec:	0003 000a 0003 000b                         ........

000039f4 <samd21_flash_funcs>:
    39f4:	16f3 0000 1665 0000 1639 0000 1609 0000     ....e...9.......
    3a04:	15ad 0000                                   ....

00003a08 <CSWTCH.32>:
    3a08:	8000 0000 8000 0000 8000 0000 1200 007a     ..............z.
    3a18:	6c00 02dc d800 05b8                         .l......

00003a20 <samd21_hal_timers>:
    3a20:	1398 2000 0000 0000 0000 0000 0800 4200     ... ...........B
    3a30:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    3a40:	1c00 4200                                   ...B

00003a44 <file_name>:
    3a44:	6f706572 	.word	0x6f706572
    3a48:	70612f73 	.word	0x70612f73
    3a4c:	65686361 	.word	0x65686361
    3a50:	6e796d2d 	.word	0x6e796d2d
    3a54:	2d747765 	.word	0x2d747765
    3a58:	65726f63 	.word	0x65726f63
    3a5c:	72656b2f 	.word	0x72656b2f
    3a60:	2f6c656e 	.word	0x2f6c656e
    3a64:	732f736f 	.word	0x732f736f
    3a68:	612f6372 	.word	0x612f6372
    3a6c:	2f686372 	.word	0x2f686372
    3a70:	74726f63 	.word	0x74726f63
    3a74:	6d5f7865 	.word	0x6d5f7865
    3a78:	306d2f30 	.word	0x306d2f30
    3a7c:	4c41482f 	.word	0x4c41482f
    3a80:	304d435f 	.word	0x304d435f
    3a84:	0000732e 	.word	0x0000732e

00003a88 <sysflash_map_dflt>:
	...
    3a90:	0000c000 00000001 0000c000 00018000     ................
    3aa0:	00000002 00024000 00018000 00000003     .....@..........
    3ab0:	0003c000 00001c00 00000010 0003dc00     ................
    3ac0:	00000400 00000011 0003e000 00002000     ............. ..

/home/pchizek/dev/press-reg/bin/targets/arduino_boot/app/apps/boot/boot.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file

/home/pchizek/dev/press-reg/bin/targets/arduino_boot/app/apps/boot/boot.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.data' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  15080	     72	   5892	  21044	   5234	/home/pchizek/dev/press-reg/bin/targets/arduino_boot/app/apps/boot/boot.elf
